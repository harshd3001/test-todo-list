{"processMobileTechnicianData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getAllTechniciansAvailability"}],"contextChangePermitted":true,"name":"processMobileTechnicianData","description":"processMobileTechnicianData","processRule":"{ contextVar.technicianArray = []; if (contextVar.technicianListData != undefined && contextVar.technicianListData.length > 0) { contextVar.technicianListData.forEach(function (element) { if (contextVar.technicianArray.indexOf(element.workforceUserId) == -1) contextVar.technicianArray.push(element.workforceUserId); }); } }","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetails"}],"name":"start","description":"Start","id":"start","nodeType":"START"},"isTaskPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processWorkOrderTaskData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isTaskPresent","description":"isTaskPresent","processRule":"(contextVar.workOrderTaskData !== '' && contextVar.workOrderTaskData.length !== 0)","id":"isTaskPresent","nodeType":"DECISION"},"isEligibleTechnicianIdsListPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchLocalizedKeysForAvailabilityStatus"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isEligibleTechnicianIdsListPresent","description":"Use this for decision in workflow","processRule":"(typeof contextVar.finalFilteredUserIdList !== 'undefined' && contextVar.finalFilteredUserIdList !== '' && typeof contextVar.finalFilteredUserIdList[contextVar.workOrderTaskIdList[0]]!=='undefined' && contextVar.finalFilteredUserIdList[contextVar.workOrderTaskIdList[0]].length > 0)","id":"isEligibleTechnicianIdsListPresent","nodeType":"DECISION"},"getAllTechniciansAvailability":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTechArray"}],"processId":"8EIKAE8E10","name":"getAllTechniciansAvailability","description":"getAllTechniciansAvailability","inputVarMap":{"technicianArray":"technicianArray","startDateFilter":"startDateFilter","endDate":"endDate","technicianListData":"techniciansData","endDateFilter":"endDateFilter","endDayDisplayOrder":"endDayDisplayOrder","startDayDisplayOrder":"startDayDisplayOrder","unavailableTechs":"unavailableTechs","startDate":"startDate"},"outputVarMap":{"techniciansData":"techniciansData"},"nodeType":"WORKFLOW"},"fetchUnavailableTechniciansPartOfCrew":{"connectors":[{"exitPortType":"NextStep","nodeId":"getMobileTechnicianData"}],"processId":"workforceFieldForceCrewFetchUnavailableTechsWF","name":"fetchUnavailableTechniciansPartOfCrew","description":"fetchUnavailableTechniciansPartOfCrew","inputVarMap":{"startDateFilter":"startDateFilter","endDate":"endDate","endDateFilter":"endDateFilter","startDate":"startDate"},"outputVarMap":{"unavailableTechs":"unavailableTechs"},"nodeType":"WORKFLOW"},"workflowNodes":["start","fetchTaskDetails","isTaskPresent","processWorkOrderTaskData","getEligibleTechnicianIds","isEligibleTechnicianIdsListPresent","fetchLocalizedKeysForAvailabilityStatus","fetchUnavailableTechniciansPartOfCrew","processTaskDataAndLocalizationKeys","getMobileTechnicianData","processMobileTechnicianData","getAllTechniciansAvailability","processTechArray","getTravelTime","processTravelTimeAndSorting","end"],"fetchTaskDetails":{"models":["workOrder","taskType","workOrderTask","site","ZProcess","ZProjectUser","UserGroup","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"isTaskPresent"}],"columns":{"siteRegionId":"site.regionId","estimatedTaskDuration":"workOrderTask.estimatedDuration","latitude":"site.latitude","destinations":"CONCAT({$site.latitude},',',{$site.longitude},'|')","assignToUserId":"workOrderTask.assignedToUserId","siteCustomerId":"site.customerId","userGroupGroupId":"UserGroup.groupId","taskType":"taskType.name","site":"site.name","workOrderTaskDueDate":"workOrderTask.dueDate","workOrderWorkOrderTypeId":"workOrder.workOrderTypeId","modifiedDate":"workOrderTask.modifiedDate","workOrderTaskId":"workOrderTask.id","siteId":"site.id","workOrderTaskScheduledDate":"workOrderTask.scheduledDate","workOrderTaskTaskTypeId":"workOrderTask.taskTypeId","status":"workOrderTask.statusId","longitude":"site.longitude"},"description":"fetchWorkOrderTaskData","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","workOrderTaskId":"idFilter"},"nodeType":"QUERY","filter":"{$workOrderTaskId}={@idFilter} and ({$taskType.mobileProcessId}={$ZProcess.id} and {$ZProcess.projectId}={$ZProjectUser.projectId} and {$ZProjectUser.groupId}={$userGroupGroupId})","name":"fetchTaskDetails","links":{"workOrder":"workOrderTask","taskType":"workOrderTask","site":"workOrderTask","UserGroup":"User"},"outputVarMap":{"data":"workOrderTaskData"},"id":"fetchTaskDetails","batchSize":"batchSize"},"workflowContext":{"statusFilter":["workOrderTaskScheduled","workOrderTaskDispatched","workOrderTaskInProgress","workOrderTaskCompleted","workOrderTaskPendingReview"],"userStatus":"Deactivated","workflowCall":"viewAllTechnician","count":0,"workforceStatusFilter":"workforceActive","noOfBatchesOfTech":0,"technician":"technician","workforceStatusId":"workforceActive","allTechnicianData":[],"featureValue":0,"customBatchSize":1000,"newTechBatchNumber":0,"webUser":"webUser","noOfAllTechniciansBatches":0,"pendingAndCompletedStatus":["workOrderTaskPendingReview","workOrderTaskCompleted"],"dispatcherTechs":[],"proximityTechArray":[],"schedulingAndDispatchData":[],"userStatusFilter":"Deactivated"},"getEligibleTechnicianIds":{"connectors":[{"exitPortType":"NextStep","nodeId":"isEligibleTechnicianIdsListPresent"}],"processId":"workGroupFilterForTechniciansAndTasksWF","name":"getEligibleTechnicianIds","description":"getEligibleTechnicianIds","inputVarMap":{"workOrderTaskIdList":"workOrderTaskIdList"},"outputVarMap":{"isAllFilterApplied":"isAllFilterApplied","finalFilteredUserIdList":"finalFilteredUserIdList"},"nodeType":"WORKFLOW"},"fetchLocalizedKeysForAvailabilityStatus":{"filter":"{$listOptionAnswer.listOptionId}='availabilityStatus'","models":["listOptionAnswer"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskDataAndLocalizationKeys"}],"columns":{"listOptionAnswerId":"listOptionAnswer.id","listOptionAnswerAnswerOptionText":"listOptionAnswer.answerOptionText"},"name":"fetchLocalizedKeysForAvailabilityStatus","description":"fetchLocalizedKeysForAvailabilityStatus","outputVarMap":{"data":"availibilityStatus"},"nodeType":"QUERY","translate":true},"processTechArray":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTravelTime"}],"contextChangePermitted":true,"name":"processTechArray","description":"processTaskprocessWeekData","processRule":"{ if (Array.isArray(contextVar.techniciansData) && contextVar.techniciansData.length > 0) { contextVar.techniciansData.forEach(function (element) { contextVar.proximityTechArray.push(element.workforceUserId); }); } }","id":"processTechArray","nodeType":"PROCESS"},"processWorkOrderTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getEligibleTechnicianIds"}],"contextChangePermitted":true,"name":"processWorkOrderTaskData","description":"processWorkOrderTaskData","processRule":"{ if (typeof contextVar.workOrderTaskData != 'undefined' && contextVar.workOrderTaskData != '' && contextVar.workOrderTaskData.length > 0) { contextVar.destinations = contextVar.workOrderTaskData[0].destinations; contextVar.taskStartTime = contextVar.workOrderTaskData[0].workOrderTaskScheduledDate; if (typeof contextVar.workOrderTaskIdList === 'undefined') { contextVar.workOrderTaskIdList = []; contextVar.workOrderTaskIdList.push(contextVar.workOrderTaskId) } contextVar.userGroupGroupId = []; contextVar.workOrderTaskData.forEach(function(ele) { contextVar.userGroupGroupId.push(ele.userGroupGroupId); }); } }","nodeType":"PROCESS"},"processTaskDataAndLocalizationKeys":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchUnavailableTechniciansPartOfCrew"}],"contextChangePermitted":true,"name":"processTaskDataAndLocalizationKeys","description":"processTaskDataAndLocalizationKeys","processRule":"{ if (Array.isArray(contextVar.unavailableTechs) && contextVar.unavailableTechs.length > 0) { contextVar.allTechsFilter = contextVar.allTechsFilter + ' AND {$workforce.userId} NOT IN {@unavailableTechs}'; } if (typeof contextVar === 'undefined' || typeof contextVar.filter === 'undefined' || contextVar.filter === '') { contextVar.allTechsFilter = '{$UserGroup.groupId} IN {@userGroupGroupId} AND {$User.status} != {@userStatus} AND {$workforce.statusId} = {@workforceStatusId} AND({$workforce.workforceType} = {@technician} OR {$workforce.workforceType} IS NULL)'; } else { contextVar.allTechsFilter = '(' + contextVar.filter + ') AND {$UserGroup.groupId} IN {@userGroupGroupId} AND {$User.status} != {@userStatus} AND {$workforce.statusId} = {@workforceStatusId} AND({$workforce.workforceType} = {@technician} OR {$workforce.workforceType} IS NULL)'; } contextVar.startDate = contextVar.workOrderTaskData[0].workOrderTaskScheduledDate; contextVar.endDate = contextVar.workOrderTaskData[0].workOrderTaskDueDate; contextVar.startDayDisplayOrder = new Date(contextVar.startDate).getDay(); contextVar.endDayDisplayOrder = new Date(contextVar.endDate).getDay(); contextVar.startDateFilter = new Date(contextVar.workOrderTaskData[0].workOrderTaskScheduledDate); contextVar.startDateFilter.setUTCHours(0, 0, 0, 0); contextVar.endDateFilter = new Date(contextVar.workOrderTaskData[0].workOrderTaskDueDate); contextVar.endDateFilter.setDate(contextVar.endDateFilter.getDate() + 1); contextVar.endDateFilter.setUTCHours(0, 0, 0, 0); contextVar.startDateFilter = new Date(contextVar.startDateFilter).toISOString().replace('T', ' ').replace('Z', ''); contextVar.endDateFilter = new Date(contextVar.endDateFilter).toISOString().replace('T', ' ').replace('Z', ''); /*Localization keys processing*/ if (typeof contextVar.availibilityStatus !== 'undefined' && contextVar.availibilityStatus.length > 0) { contextVar.localizedStatus = {}; contextVar.availibilityStatus.forEach(function (element) { contextVar.localizedStatus[element.listOptionAnswerId] = element.listOptionAnswerAnswerOptionText; }); } if (typeof contextVar === 'undefined' || typeof contextVar.batchNumber === 'undefined' || contextVar.batchNumber === '') { contextVar.batchNumber = 1; } else { contextVar.batchNumber = contextVar.batchNumber; } if (typeof contextVar === 'undefined' || typeof contextVar.batchSize === 'undefined' || contextVar.batchSize === '') { contextVar.batchSize = 50; } else { contextVar.batchSize = contextVar.batchSize; } taskId = contextVar.workOrderTaskIdList[0]; contextVar.finalUserIdList = contextVar.finalFilteredUserIdList[taskId]; if (typeof contextVar.finalUserIdList != 'undefined' && contextVar.finalUserIdList.length > 0) { contextVar.allTechsFilter = contextVar.allTechsFilter + ' AND {$workforce.userId} IN {@finalUserIdList}'; } }","id":"processTaskData","nodeType":"PROCESS"},"getMobileTechnicianData":{"models":["UserGroup","workforce","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"processMobileTechnicianData"}],"columns":{"userStatus":"User.status","timezoneOffset":"workforce.timezoneOffset","userPhoneNumber":"User.phoneNumber","userEmail":"User.emailId","id":"workforce.userId","userName":"User.name","workforceUserId":"workforce.userId","userId":"User.id","workforceCalendarId":"workforce.calendarId"},"orderBy":"userName ASC","description":"getMobileTechnicianData","distinct":true,"inputVarMap":{"userStatus":"userStatus","allTechsFilter":"filter","finalUserIdList":"finalUserIdList","technician":"technician","batchSize":"batchSize","workforceStatusId":"workforceStatusId","unavailableTechs":"unavailableTechs","batchNumber":"batchNumber","userGroupGroupId":"userGroupGroupId"},"nodeType":"QUERY","filter":"filter","name":"getMobileTechnicianData","links":{"User":"UserGroup","workforce":"User"},"outputVarMap":{"data":"technicianListData","count":"technicianCount"},"batchSize":"batchSize","getCount":true,"batchNumber":"batchNumber"},"getTravelTime":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTravelTimeAndSorting"}],"processId":"S5WSVP8VZ0","name":"getTravelTime","description":"getTravelTime","inputVarMap":{"customBatchSize":"customBatchSize","startDateFilter":"startDateFilter","workflowCall":"proximityCall","endDateFilter":"endDateFilter","destinations":"destinations","proximityTechArray":"proximityTechArray","workOrderTaskId":"workOrderTaskId","taskStartTime":"taskStartTime"},"id":"getTravelTime","outputVarMap":{},"nodeType":"WORKFLOW"},"end":{"name":"End","description":"End","inputVarMap":{"technicianCount":"count","techniciansData":"viewAllTechnicianData"},"outputVarMap":{"count":"count","viewAllTechnicianData":"viewAllTechnicianData"},"id":"end","nodeType":"END"},"processTravelTimeAndSorting":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processTravelTimeAndSorting","description":"processTravelTimeAndSorting","processRule":"{ for (var i = 0; i < contextVar.techniciansData.length; i++) { Object.keys(contextVar.proximityScoreData).forEach(function (techId) { if (contextVar.techniciansData[i].workforceUserId == techId) { if (contextVar.proximityScoreData[techId].text != '') { contextVar.techniciansData[i]['travelTime'] = contextVar.proximityScoreData[techId].text; contextVar.techniciansData[i]['travelTimeValue'] = contextVar.proximityScoreData[techId].value; } else { contextVar.techniciansData[i]['travelTime'] = '-'; } } }); } contextVar.count = contextVar.techniciansData.length; if (typeof contextVar === 'undefined' || typeof contextVar.orderBy === 'undefined' || contextVar.orderBy === '') { contextVar.techniciansData.sort(function (a, b) { var titleA = a.userName.toLowerCase(), titleB = b.userName.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); } else { contextVar.orderBy = contextVar.orderBy; switch (contextVar.orderBy) { case 'userName DESC': { contextVar.techniciansData.sort(function (a, b) { var titleA = b.userName.toLowerCase(), titleB = a.userName.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'userName ASC': { contextVar.techniciansData.sort(function (a, b) { var titleA = a.userName.toLowerCase(), titleB = b.userName.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'travelTime DESC': { contextVar.techniciansData.sort(function (a, b) { return b.travelTimeValue - a.travelTimeValue; }); break; } case 'travelTime ASC': { contextVar.techniciansData.sort(function (a, b) { return a.travelTimeValue - b.travelTimeValue; }); break; } case 'availability DESC': { contextVar.techniciansData.sort(function (a, b) { var titleA = b.availability.toLowerCase(), titleB = a.availability.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'availability ASC': { contextVar.techniciansData.sort(function (a, b) { var titleA = a.availability.toLowerCase(), titleB = b.availability.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'shiftTime DESC': { contextVar.techniciansData.sort(function (a, b) { var titleA = b.openingTime.toLowerCase(), titleB = a.openingTime.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'shiftTime ASC': { contextVar.techniciansData.sort(function (a, b) { var titleA = a.openingTime.toLowerCase(), titleB = b.openingTime.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'userEmailId DESC': { contextVar.techniciansData.sort(function (a, b) { var titleA = b.userEmailId.toLowerCase(), titleB = a.userEmailId.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } case 'userEmailId ASC': { contextVar.techniciansData.sort(function (a, b) { var titleA = a.userEmailId.toLowerCase(), titleB = b.userEmailId.toLowerCase(); if (titleA < titleB) return -1; if (titleA > titleB) return 1; return 0; }); break; } default: break; } } }","id":"processTravelTimeAndSorting","nodeType":"PROCESS"}}