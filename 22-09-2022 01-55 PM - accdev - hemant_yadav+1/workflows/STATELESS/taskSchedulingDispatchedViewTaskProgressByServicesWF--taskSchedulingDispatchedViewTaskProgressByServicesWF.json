{"isResultAvailableForOldTask":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processOldData"},{"exitPortType":"FalseStep","nodeId":"processData"}],"name":"isResultAvailableForOldTask","description":"isResultAvailableForOldTask","processRule":"(contextVar.resultFlag)","nodeType":"DECISION"},"callBackwardCompatibilityWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"ProcessResourcesData"}],"processId":"backwardCompatibilityForTaskResultsWF","name":"callBackwardCompatibilityWF","description":"callBackwardCompatibilityWF","inputVarMap":{"viewType":"viewType","servicesArrayForTaskProgress":"inputData"},"id":"callBackwardCompatibilityWF","outputVarMap":{"outputData":"servicesArrayForTaskProgress"},"nodeType":"WORKFLOW"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"getServices"}],"name":"start","description":" Start","id":"start","nodeType":"START"},"ProcessResourcesData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"ProcessResourcesData","description":"ProcessResourcesData","processRule":"contextVar.servicesArrayForTaskProgress.forEach(element => { if (typeof element.servicesData !== 'undefined') { element.servicesData.forEach(e => { if (typeof e.serviceGridWrapper !== 'undefined') { e.serviceGridWrapper.forEach(ele => { if (new Date(e.completedOn).getTime() === new Date(ele.addedOn).getTime()) { ele['serviceModeName'] = contextVar.responseData[contextVar.userLocale][ele.serviceMode]; } }); } }); } });","id":"processServiceData","nodeType":"PROCESS","jsEngine":"es6"},"callFetchResourcesForLocaleWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetails"}],"processId":"fetchResourcesForLocale","name":"callFetchResourcesForLocaleWF","description":"callFetchResourcesForLocaleWF","inputVarMap":{"resourceIdList":"resourceIdList","userLocale":"userLocale"},"outputVarMap":{"resourcesData":"resourcesData"},"nodeType":"WORKFLOW"},"workflowNodes":["start","getServices","queryListOptionData","ProcessListOptionData","callFetchResourcesForLocaleWF","fetchTaskDetails","processServiceData","processCheckResult","isResultAvailableForOldTask","processOldData","processData","callBackwardCompatibilityWF","ProcessResourcesData","end"],"fetchTaskDetails":{"filter":"{$workOrderTaskId}={@workOrderTaskId} ","models":["workOrderTask","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"processServiceData"}],"columns":{"result":"workOrderTask.result","workOrderTaskStartDate":"workOrderTask.actualStartTime","workOrderTaskId":"workOrderTask.id","userPhoneNumber":"User.phoneNumber","userEmail":"User.emailId","userName":"User.name","workOrderTaskservices":"workOrderTask.services"},"name":"fetchTaskDetails","description":"fetch task details","inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"links":{"workOrderTask":"User"},"id":"fetchTaskDetails","outputVarMap":{"data":"taskDetail"},"nodeType":"QUERY"},"processOldData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callBackwardCompatibilityWF"}],"contextChangePermitted":true,"name":"processOldData","description":"Process services for old data","processRule":" contextVar.servicesArrayForTaskProgress = []; if (typeof contextVar.taskDetail[0].workOrderTaskservices != 'undefined' && contextVar.taskDetail[0].workOrderTaskservices != '') { contextVar.taskDetail[0].workOrderTaskservices.forEach(function (element) { var serviceCount = 0; var obj = {}; contextVar.subArrayForServices = []; if (typeof contextVar.taskDetail[0].result != 'undefined' && contextVar.taskDetail[0].result != '') { contextVar.taskDetail[0].result.forEach(function (resultElement) { if (typeof resultElement.activityDataGrid != 'undefined' && resultElement.activityDataGrid != '') { resultElement.activityDataGrid.forEach(function (serviceElement) { if (element.catalogId == serviceElement.taskActivity[0].serviceId) { serviceCount++; if (serviceCount == 1) { obj['serviceName'] = serviceElement.taskActivity[0].serviceName; obj['id'] = serviceElement.taskActivity[0].serviceId; obj['serviceStatus'] = 'Delivered'; } var objServiceData = {}; if (typeof serviceElement.assets != 'undefined' && serviceElement.assets.length != 0) { if (serviceElement.assets[0].catalogName) { objServiceData['assetName'] = serviceElement.assets[0].catalogName; } if (serviceElement.assets[0].installedBaseCatalogId) { objServiceData['assetNumber'] = serviceElement.assets[0].installedBaseCatalogId; } } objServiceData['serviceItemId'] = serviceElement.taskActivity[0].serviceId; if(contextVar.taskDetail[0].workOrderTaskStartDate){ objServiceData['completedOn'] =contextVar.taskDetail[0].workOrderTaskStartDate; } var servicephotosArray = []; var photosObj = {}; photosObj['servicePhoto'] = serviceElement.photo1.media; photosObj['servicePhotoComment'] = serviceElement.photo1.comment; photosObj['servicePhotosCapturedTime'] = serviceElement.photo1.servicePhotosCapturedTime; photosObj['fileType'] = 'JPG'; photosObj['photoId'] = ''; servicephotosArray.push(photosObj); objServiceData['addServicePhotosDataGrid'] = servicephotosArray; if (serviceElement.servicesNotes) { objServiceData['servicesNotes'] = serviceElement.servicesNotes; } objServiceData['capturedBy'] = contextVar.taskDetail[0].userName; if (contextVar.taskDetail[0].userEmail) { objServiceData['emailId'] = contextVar.taskDetail[0].userEmail; } if (contextVar.taskDetail[0].userPhoneNumber) { objServiceData['phoneNumber'] = contextVar.taskDetail[0].userPhoneNumber; } contextVar.subArrayForServices.push(objServiceData); } }); } }); if (serviceCount > 0) { obj['numberOfServicesUsed'] = serviceCount; obj['servicesData'] = contextVar.subArrayForServices; } if (serviceCount == 0) { obj['numberOfServicesUsed'] = serviceCount; obj['serviceName'] = element.catalogName; obj['id'] = element.catalogId; obj['serviceStatus'] = 'Not Started'; } contextVar.servicesArrayForTaskProgress.push(obj); } }); }","id":"processOldData","nodeType":"PROCESS"},"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callBackwardCompatibilityWF"}],"contextChangePermitted":true,"name":"processData","description":"Process services","processRule":"function formatToLocalDate(date) { var d = new Date(new Date(date + ' UTC').toLocaleString('en-US', { timeZone: contextVar.timeZone })), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(), hour = d.getHours(), min = d.getMinutes(), sec = d.getSeconds(); if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; if (hour.length < 2) hour = '0' + hour; if (min.length < 2) min = '0' + min; if (sec.length < 2) sec = '0' + sec; times = [hour, min, sec].join(':'); space = (' '); date1 = [year, month, day].join('-'); date2 = date1.concat(space); resultTimeTwo = date2.concat(times); return resultTimeTwo; } contextVar.servicesArrayForTaskProgress = []; if (typeof contextVar.taskDetail[0].workOrderTaskservices != 'undefined' && contextVar.taskDetail[0].workOrderTaskservices != '') { contextVar.taskDetail[0].workOrderTaskservices.forEach(function(element) { var serviceCount = 0; var obj = {}; contextVar.subArrayForServices = []; if (typeof contextVar.taskDetail[0].result != 'undefined' && contextVar.taskDetail[0].result != '') { var resultLength = contextVar.taskDetail[0].result.length; contextVar.resultElement = contextVar.taskDetail[0].result[resultLength - 1]; if (typeof contextVar.resultElement.servicesDataGrid != 'undefined' && contextVar.resultElement.servicesDataGrid != '') { contextVar.resultElement.servicesDataGrid.forEach(function(serviceElement) { if (element.catalogId == serviceElement.selectedService[0].serviceId) { serviceCount++; if (serviceCount == 1) { obj['serviceName'] = serviceElement.selectedService[0].serviceName; obj['id'] = serviceElement.selectedService[0].serviceId; obj['serviceStatus'] = 'Delivered'; } var objServiceData = {}; if (typeof serviceElement.assets != 'undefined' && serviceElement.assets.length != 0) { if (serviceElement.assets[0].catalogName) { objServiceData['assetName'] = serviceElement.assets[0].catalogName; } else { objServiceData['assetName'] = '-'; } if (serviceElement.assets[0].installedBaseCatalogId) { objServiceData['assetNumber'] = serviceElement.barcode; } else { objServiceData['assetNumber'] = '-'; } } else { objServiceData['assetName'] = '-'; objServiceData['assetNumber'] = '-'; } objServiceData['serviceItemId'] = serviceElement.selectedService[0].serviceId; if (typeof serviceElement.addServicesTime !== 'undefined' && serviceElement.addServicesTime !== '') { objServiceData['completedOn'] = serviceElement.addServicesTime; objServiceData['servicesCapturedTime'] = formatToLocalDate(serviceElement.addServicesTime); } else { objServiceData['servicesCapturedTime'] = ''; objServiceData['completedOn'] = ''; } var servicephotosArray = []; if (typeof serviceElement.addServicePhotosDataGrid != 'undefined' && serviceElement.addServicePhotosDataGrid != '') { serviceElement.addServicePhotosDataGrid.forEach(function(photoElement, index) { var photosObj = {}; photosObj['servicePhoto'] = photoElement.servicePhotos.media; photosObj['servicePhotoComment'] = photoElement.servicePhotos.comment; photosObj['servicePhotosCapturedTime'] = photoElement.servicePhotosCapturedTime; photosObj['fileType'] = 'JPG'; photosObj['capturedBy'] = photoElement.capturedBy; photosObj['photoId'] = index; servicephotosArray.push(photosObj); }); } if (typeof contextVar.resultElement.serviceGridWrapper != 'undefined' && Array.isArray(contextVar.resultElement.serviceGridWrapper)) { var serviceGridWrapperData = []; contextVar.resultElement.serviceGridWrapper.forEach(function(ele) { if (ele.selectedService.serviceId === serviceElement.selectedService[0].serviceId) { if (typeof serviceElement.assetRemovalReason !== 'undefined' && serviceElement.assetRemovalReason !== '' && (ele.serviceMode === 'assetReplacement' || ele.serviceMode === 'assetRemoval')) { ele['reason'] = contextVar.responseData[contextVar.userLocale][serviceElement.assetRemovalReason]; } serviceGridWrapperData.push(ele); } }); objServiceData['serviceGridWrapper'] = serviceGridWrapperData; } objServiceData['addServicePhotosDataGrid'] = servicephotosArray; if (serviceElement.servicesNotes) { objServiceData['servicesNotes'] = serviceElement.servicesNotes; } objServiceData['capturedBy'] = contextVar.taskDetail[0].result[0].userName; if (contextVar.taskDetail[0].result[0].userEmail) { objServiceData['emailId'] = contextVar.taskDetail[0].result[0].userEmail; } if (contextVar.taskDetail[0].result[0].userPhoneNumber) { objServiceData['phoneNumber'] = contextVar.taskDetail[0].result[0].userPhoneNumber; } contextVar.subArrayForServices.push(objServiceData); } }); } contextVar.filterDuplicateService = []; var arrayOfServices = contextVar.subArrayForServices; contextVar.filterDuplicateService = arrayOfServices.reduce((acc, current) => { var filtered = acc.find(item => item.completedOn === current.completedOn); if (!filtered) { return acc.concat([current]); } else { return acc; } }, []); if (serviceCount > 0) { obj['numberOfServicesUsed'] = contextVar.filterDuplicateService.length; obj['servicesData'] = contextVar.filterDuplicateService; } if (serviceCount == 0) { obj['numberOfServicesUsed'] = serviceCount; obj['serviceName'] = element.catalogName; obj['id'] = element.catalogId; obj['serviceStatus'] = 'Not Started'; } contextVar.servicesArrayForTaskProgress.push(obj); } }); }","id":"processData","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"viewType":"byService"},"queryListOptionData":{"filter":"{$listOptionAnswer.listOptionId} = 'assetMaintenanceOptions' || {$listOptionAnswer.listOptionId} = 'assetRemovalReasons'","models":["listOption","listOptionAnswer"],"connectors":[{"exitPortType":"NextStep","nodeId":"ProcessListOptionData"}],"columns":{"listOptionId":"listOptionAnswer.id"},"name":"queryListOptionData","description":"queryListOptionData","inputVarMap":{},"id":"queryListOptionData","outputVarMap":{"data":"listOptionData"},"nodeType":"QUERY"},"end":{"name":"End","description":"end","inputVarMap":{"servicesArrayForTaskProgress":"servicesArrayForTaskProgress"},"outputVarMap":{"servicesArrayForTaskProgress":"servicesArrayForTaskProgress"},"id":"end","nodeType":"END"},"getServices":{"filter":"{$catalogTypeId}='service'","models":["catalog"],"connectors":[{"exitPortType":"NextStep","nodeId":"queryListOptionData"}],"columns":{"catalogName":"catalog.name","catalogId":"catalog.id","catalogTypeId":"catalog.catalogTypeId"},"name":"getServices","description":"getServices","outputVarMap":{"data":"servicesList"},"nodeType":"QUERY"},"processCheckResult":{"connectors":[{"exitPortType":"NextStep","nodeId":"isResultAvailableForOldTask"}],"contextChangePermitted":true,"name":"processCheckResult","description":"processCheckResult","processRule":"contextVar.resultFlag = ''; if (contextVar.taskDetail[0].result) { contextVar.taskDetail[0].result.forEach(function (element) { if (typeof element.beforeCaptureEvidence != 'undefined') { contextVar.resultFlag = true; } else { contextVar.resultFlag = false; } }); } else { contextVar.resultFlag = false; }","id":"processCheckResult","nodeType":"PROCESS"},"processServiceData":{"connectors":[{"exitPortType":"NextStep","nodeId":"processCheckResult"}],"contextChangePermitted":true,"name":"processServiceData","description":"Process services","processRule":"if (contextVar.taskDetail[0].workOrderTaskservices) { contextVar.taskDetail[0].workOrderTaskservices.forEach(function(element) { if (contextVar.servicesList) { contextVar.servicesList.forEach(function(elementList) { if (element.catalogId == elementList.catalogId) { element['catalogName'] = elementList.catalogName; } }); } }); }","id":"processServiceData","nodeType":"PROCESS"},"ProcessListOptionData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callFetchResourcesForLocaleWF"}],"contextChangePermitted":true,"name":"ProcessListOptionData","description":"ProcessListOptionData","processRule":"if (typeof contextVar.listOptionData !== 'undefined' && Array.isArray(contextVar.listOptionData) && contextVar.listOptionData.length > 0) { contextVar.resourceIdList = []; contextVar.listOptionData.forEach(obj => { contextVar.resourceIdList.push(obj.listOptionId); }); } else { contextVar.resourceIdList = []; }","id":"ProcessListOptionData","nodeType":"PROCESS","jsEngine":"es6"}}