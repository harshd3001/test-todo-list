{"isOrderDetailsPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"setOutputData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isOrderDetailsPresent","description":"isOrderDetailsPresent","processRule":"{Array.isArray(contextVar.customerPortalOrderDetailsData) && typeof contextVar.customerPortalOrderDetailsData[0].UID != 'undefined'}","nodeType":"DECISION","jsEngine":"es6"},"setInputData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchOrderDetails"}],"contextChangePermitted":true,"name":"setInputData","description":"setInputData","processRule":"{for (var key in contextVar.data) {contextVar[key] = contextVar.data[key];}contextVar.jobList = []; contextVar.jobList.push(contextVar.workOrderTaskId);}","nodeType":"PROCESS","jsEngine":"es6"},"processTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"createDataForConfirmationNotification"}],"contextChangePermitted":true,"name":"processTaskData","description":"processTaskData","processRule":"{ function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; } function trimToHourMinFormat(time) { let timeFormat = time.split(' ')[1].split(':'); return timeFormat[0] + '' + timeFormat[1]; } if (contextVar.workOrderTaskData) { let timezoneOffset = contextVar.workOrderTaskData.siteTimezoneOffset; contextVar.contactPhone = contextVar.workOrderTaskData.siteContactPhone; contextVar.contactEmail = contextVar.workOrderTaskData.siteContactEmail; contextVar.startDate = toDateString(new Date(new Date(contextVar.workOrderTaskData.workOrderTaskAppointmentWindowStartDate).getTime() - (timezoneOffset * 60000))); let startTime = trimToHourMinFormat(contextVar.startDate); contextVar.startDate = contextVar.startDate.split(' ')[0]; let endtime = toDateString(new Date(new Date(contextVar.workOrderTaskData.workOrderTaskAppointmentWindowEndDate).getTime() - (timezoneOffset * 60000))); endtime = trimToHourMinFormat(endtime); if (contextVar.preferredNotification === 'SMS') { contextVar.appointmentWindowForSMS = startTime + ' hrs' + ' - ' + endtime + ' hrs'; } else if (contextVar.preferredNotification === 'EMAIL') { contextVar.appointmentWindowForEmail = contextVar.startDate + ' / ' + startTime + ' hrs' + ' - ' + endtime + ' hrs'; } else { contextVar.appointmentWindowForSMS = startTime + ' hrs' + ' - ' + endtime + ' hrs'; contextVar.appointmentWindowForEmail = contextVar.startDate + ' / ' + startTime + ' hrs' + ' - ' + endtime + ' hrs'; } } }","nodeType":"PROCESS","jsEngine":"es6"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfCustomerPortalOrderDetailsModelPresentWF"}],"name":"start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"notifyNodeBookingConfirmation"}],"name":"logContextVar","description":"logContextVar","inputVarMap":{"featureLoggerWF":"processId","featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"callTaskDataWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskData"}],"ignoreSubContext":true,"name":"callTaskDataWF","description":"callTaskDataWF","inputVarMap":{"workOrderTaskId":"workOrderTaskId","taskDataProcessId":"processId"},"outputVarMap":{"workOrderTaskData":"workOrderTaskData"},"nodeType":"WORKFLOW"},"processSiteData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callTaskDataWF"}],"contextChangePermitted":true,"name":"processSiteData","description":"processSiteData","processRule":"{ if (Array.isArray(contextVar.siteData)) { for (let key in contextVar.siteData[0]) { contextVar[key] = contextVar.siteData[0][key]; } } if (Array.isArray(contextVar.entityConfigData)) { for (let value of contextVar.entityConfigData) { if (value.configKey === 'configurations') { value.configValue = JSON.parse(value.configValue); for (let key in value.configValue) { contextVar[key] = value.configValue[key]; } } } } contextVar.customerPortalUrl = contextVar.customerPortalUrl + '?ref=' + contextVar.UID; if (contextVar.brandingParams) { contextVar.clientLogo = contextVar.brandingParams.iconUrl; } contextVar.contactPhone = contextVar.contactPhone.replace(' ', '').replace('-', ''); }","nodeType":"PROCESS","jsEngine":"es6"},"workflowNodes":["start","checkIfCustomerPortalOrderDetailsModelPresentWF","isCustomerPortalIntsalled","setInputData","fetchOrderDetails","isOrderDetailsPresent","setOutputData","isNotificationNeeded","publishEvent","fetchEntityConfig","callSiteDataWF","processSiteData","callTaskDataWF","processTaskData","createDataForConfirmationNotification","logContextVar","notifyNodeBookingConfirmation","end"],"checkIfCustomerPortalOrderDetailsModelPresentWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"isCustomerPortalIntsalled"}],"contextChangePermitted":true,"name":"checkIfCustomerPortalOrderDetailsModelPresentWF","description":"checkIfCustomerPortalOrderDetailsModelPresentWF","inputVarMap":{"customerPortalOrderDetailsModelPresentProcessId":"processId"},"outputVarMap":{"isCustomerPortalOrderDetailsModelPresent":"isCustomerPortalOrderDetailsModelPresent"},"nodeType":"WORKFLOW"},"callSiteDataWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processSiteData"}],"ignoreSubContext":true,"name":"callSiteDataWF","description":"callSiteDataWF","inputVarMap":{"workOrderTaskId":"id","siteDataProcessId":"processId"},"outputVarMap":{"siteData":"siteData"},"nodeType":"WORKFLOW"},"workflowContext":{"customerPortalOrderDetailsModelPresentProcessId":"checkIfCustomerPortalOrderDetailsModelPresentWF","featureLoggerWF":"featureLoggerWF","configScopeArray":["customerPortal"],"featureName":"customerPortal","extraMsg":"fscx2_0_workOrderTaskAppointmentWindowModelEventWF","siteDataProcessId":"fetchSiteCustomerTaskTypeDetails","customerPortalOrderDataProcessId":"fscx2_0_fetchCustomerPortalOrderDetailsWF","taskDataProcessId":"FQJXQ58NSK"},"createDataForConfirmationNotification":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"contextChangePermitted":true,"name":"createDataForConfirmationNotification","description":"createDataForConfirmationNotification","processRule":"{contextVar.dataForNotify = []; contextVar.notificationInfo = 'Booking Confirm'; if (typeof contextVar.preferredNotification != 'undefined' && contextVar.preferredNotification != '' && contextVar.preferredNotification == 'SMS') { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.contactPhone, 'scheduledDate': contextVar.startDate, 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'appointmentWindow': contextVar.appointmentWindowForSMS, 'notificationType': 'sms', 'templateId': 'fscx2_0bookingConfimrationSms1', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.contactPhone, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms2', 'preferredNotification': 'sms' }); if (typeof contextVar.secondaryContactEmail != 'undefined' && contextVar.secondaryContactEmail != '' && typeof contextVar.secondaryContactPhone != 'undefined' && contextVar.secondaryContactPhone != '') { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.secondaryContactPhone, 'scheduledDate': contextVar.startDate, 'appointmentWindow': contextVar.appointmentWindowForSMS, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms1', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.secondaryContactPhone, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms2', 'preferredNotification': 'sms' }); } } else if (typeof contextVar.preferredNotification != 'undefined' && contextVar.preferredNotification != '' && contextVar.preferredNotification == 'EMAIL') { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'templateId': 'fscx2_0_bookingConfrimationEmail', 'preferredNotification': 'email', 'scheduledDate': contextVar.startDate, 'emailId': contextVar.contactEmail, 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'appointmentWindow': contextVar.appointmentWindowForEmail, 'notificationType': 'email', 'taskType': contextVar.taskTypeName, 'clientLogo': contextVar.clientLogo }); if (typeof contextVar.secondaryContactEmail != 'undefined' && contextVar.secondaryContactEmail != '' && typeof contextVar.secondaryContactPhone != 'undefined' && contextVar.secondaryContactPhone != '') { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'templateId': 'fscx2_0_bookingConfrimationEmail', 'preferredNotification': 'email', 'scheduledDate': contextVar.startDate, 'emailId': contextVar.secondaryContactEmail, 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'appointmentWindow': contextVar.appointmentWindowForEmail, 'notificationType': 'email', 'taskType': contextVar.taskTypeName, 'clientLogo': contextVar.clientLogo }); } } else { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.contactPhone, 'scheduledDate': contextVar.startDate, 'appointmentWindow': contextVar.appointmentWindowForSMS, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms1', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.contactPhone, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms2', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'templateId': 'fscx2_0_bookingConfrimationEmail', 'preferredNotification': 'email', 'scheduledDate': contextVar.startDate, 'emailId': contextVar.contactEmail, 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'appointmentWindow': contextVar.appointmentWindowForEmail, 'notificationType': 'email', 'taskType': contextVar.taskTypeName, 'clientLogo': contextVar.clientLogo }); if (typeof contextVar.secondaryContactEmail != 'undefined' && contextVar.secondaryContactEmail != '' && typeof contextVar.secondaryContactPhone != 'undefined' && contextVar.secondaryContactPhone != '') { contextVar.dataForNotify.push({ 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.secondaryContactPhone, 'scheduledDate': contextVar.startDate, 'appointmentWindow': contextVar.appointmentWindowForSMS, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms1', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'phoneNumber': contextVar.secondaryContactPhone, 'notificationType': 'sms', 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'templateId': 'fscx2_0bookingConfimrationSms2', 'preferredNotification': 'sms' }, { 'customerPortalUrl': contextVar.customerPortalUrl, 'customerName': contextVar.customerName, 'templateId': 'fscx2_0_bookingConfrimationEmail', 'preferredNotification': 'email', 'scheduledDate': contextVar.startDate, 'emailId': contextVar.secondaryContactEmail, 'UID': contextVar.UID, 'notificationInfo': contextVar.notificationInfo, 'appointmentWindow': contextVar.appointmentWindowForEmail, 'notificationType': 'email', 'taskType': contextVar.taskTypeName, 'clientLogo': contextVar.clientLogo }); } } }","nodeType":"PROCESS","jsEngine":"es6"},"publishEvent":{"eventId":"fscx_2_0_customerPortalLogProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"fetchEntityConfig"}],"contextChangePermitted":true,"name":"publishEvent","description":"publishEvent","inputVarMap":{"customerPortalLog":"customerPortalLog"},"outputVarMap":{},"nodeType":"PUBLISH"},"fetchOrderDetails":{"connectors":[{"exitPortType":"NextStep","nodeId":"isOrderDetailsPresent"}],"ignoreSubContext":true,"name":"fetchOrderDetails","description":"fetchOrderDetails","inputVarMap":{"jobList":"jobList","customerPortalOrderDataProcessId":"processId"},"outputVarMap":{"customerPortalOrderDetailsData":"customerPortalOrderDetailsData"},"nodeType":"WORKFLOW"},"end":{"name":"end","description":"End","inputVarMap":{"unassignedTask":"data"},"outputVarMap":{"unassignedTask":"data"},"nodeType":"END"},"fetchEntityConfig":{"filter":"{$configScope} IN {@configScopeArray}","models":["EntityConfig"],"connectors":[{"exitPortType":"NextStep","nodeId":"callSiteDataWF"}],"columns":{"configKey":"EntityConfig.configKey","valueType":"EntityConfig.valueType","configScope":"EntityConfig.configScope","configValue":"EntityConfig.configValue"},"name":"fetchEntityConfig","description":"fetchEntityConfig","inputVarMap":{"configScopeArray":"configScopeArray"},"outputVarMap":{"data":"entityConfigData"},"nodeType":"QUERY"},"isCustomerPortalIntsalled":{"connectors":[{"exitPortType":"TrueStep","nodeId":"setInputData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isCustomerPortalIntsalled","description":"isCustomerPortalIntsalled","processRule":"{typeof contextVar.isCustomerPortalOrderDetailsModelPresent != 'undefined' && contextVar.isCustomerPortalOrderDetailsModelPresent == true}","nodeType":"DECISION","jsEngine":"es6"},"setOutputData":{"connectors":[{"exitPortType":"NextStep","nodeId":"isNotificationNeeded"}],"contextChangePermitted":true,"name":"setOutputData","description":"setOutputData","processRule":"{ contextVar.UID = contextVar.customerPortalOrderDetailsData[0].UID; contextVar.statusId = contextVar.customerPortalOrderDetailsData[0].statusId; contextVar.customerPortalLog = []; contextVar.customerPortalLog.push({ 'UID': contextVar.UID, 'action': contextVar.statusId, 'zRequestId': new Date().getTime() + '', 'requestPayload': JSON.parse(JSON.stringify(contextVar)) });}","nodeType":"PROCESS","jsEngine":"es6"},"isNotificationNeeded":{"connectors":[{"exitPortType":"TrueStep","nodeId":"publishEvent"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isNotificationNeeded","description":"isNotificationNeeded","processRule":"{(Array.isArray(contextVar.customerPortalOrderDetailsData) && contextVar.customerPortalOrderDetailsData[0].statusId == 'fscx2_0_bookingRescheduled' && contextVar.customerPortalOrderDetailsData[0].sendCustomerNotifications)}","nodeType":"DECISION","jsEngine":"es6"},"notifyNodeBookingConfirmation":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"notifyNodeBookingConfirmation","description":"notifyNodeBookingConfirmation","inputVarMap":{"dataForNotify":"notificationData"},"targetType":"USER","outputVarMap":{},"nodeType":"NOTIFY"}}