{"isDependencyPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTaskDependencyData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isDependencyPresent","description":"isDependencyPresent","processRule":"typeof contextVar.taskDependencyData !== 'undefined' && contextVar.taskDependencyData.length > 0","id":"isDependencyPresent","nodeType":"DECISION"},"checkWorkOrderId":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getTaskDependencyData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"checkWorkOrderId","description":"checkWorkOrderId","processRule":"(typeof contextVar.workOrderId !== 'undefined' && contextVar.workOrderId !== '')","nodeType":"DECISION"},"getTaskDependencyData":{"filter":"{$taskDependencyWorkOrderId} = {@workOrderId}","models":["taskDependency"],"connectors":[{"exitPortType":"NextStep","nodeId":"isDependencyPresent"}],"columns":{"taskDependencyEnforceAllDependency":"IF({$taskDependency.enforceAllDependency}=true,'All of these tasks','Any one of these tasks')","taskDependencyPrecedentStatusId":"taskDependency.precedentStatusId","taskDependencyEnforceBoolean":"taskDependency.enforceAllDependency","taskDependencyDependentTask":"taskDependency.dependentTask","taskDependencyRecver":"taskDependency.recver","taskDependencyId":"taskDependency.id","taskDependencyWorkOrderId":"taskDependency.workOrderId","taskDependencyPrecedentTask":"taskDependency.precedentTask","taskDependencyDependentStatusId":"taskDependency.dependentStatusId"},"name":"getTaskDependencyData","description":"getTaskDependencyData","inputVarMap":{"workOrderId":"workOrderId"},"outputVarMap":{"data":"taskDependencyData"},"nodeType":"QUERY"},"getStatusName":{"filter":"{$zStatusId} IN {@taskDependencyStatusId}","models":["ZStatus"],"connectors":[{"exitPortType":"NextStep","nodeId":"processGetStatusNameData"}],"columns":{"zStatusName":"ZStatus.name","zStatusId":"ZStatus.id"},"name":"getStatusName","description":"getStatusName","inputVarMap":{"taskDependencyStatusId":"taskDependencyStatusId"},"outputVarMap":{"data":"taskDependencyStatusName"},"nodeType":"QUERY"},"processTaskDependencyData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getStatusName"}],"contextChangePermitted":true,"name":"processTaskDependencyData","description":"processTaskDependencyData","processRule":"{contextVar.taskDependencyStatusId = []; if (typeof contextVar.taskDependencyData !== 'undefined' && contextVar.taskDependencyData !== '' && contextVar.taskDependencyData.length !== 0) { contextVar.taskDependencyData.forEach(function(element) { contextVar.taskDependencyStatusId.push(element.taskDependencyPrecedentStatusId); contextVar.taskDependencyStatusId.push(element.taskDependencyDependentStatusId); if(element.taskDependencyPrecedentTask.length===1){ element.taskDependencyEnforceAllDependency='-'; element.taskDependencyEnforceBoolean=0}}); }}","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkWorkOrderId"}],"name":"start","description":"start","nodeType":"START"},"processGetStatusNameData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processGetStatusNameData","description":"processGetStatusNameData","processRule":"{if ( typeof contextVar.workOrderTaskId !== 'undefined' && contextVar.workOrderTaskId !== '' ) { var obj = []; } else { var obj = contextVar.taskDependencyData; } contextVar.precedentTaskIds = []; if ( typeof contextVar.taskDependencyData !== 'undefined' && contextVar.taskDependencyData !== '' && contextVar.taskDependencyData.length !== 0 ) { contextVar.taskDependencyData.forEach(function (element) { contextVar.taskDependencyStatusName.forEach(function (item) { if (element.taskDependencyPrecedentStatusId === item.zStatusId) element.taskDependencyPrecedentStatusName = item.zStatusName; if (element.taskDependencyDependentStatusId === item.zStatusId) element.taskDependencyDependentStatusName = item.zStatusName; }); if ( typeof contextVar.workOrderTaskId !== 'undefined' && contextVar.workOrderTaskId !== '' ) { var flag = true; element.taskDependencyDependentTask.forEach(function (item) { if (contextVar.workOrderTaskId === item) { obj.push(element); element.taskDependencyPrecedentTask.forEach(function (item) { contextVar.precedentTaskIds.push(item); }); flag = false; } }); if (flag) { element.taskDependencyPrecedentTask.forEach(function (item) { if (contextVar.workOrderTaskId === item) { obj.push(element); } }); } } }); contextVar.taskDependencyData = obj; contextVar.count = contextVar.taskDependencyData.length; }}","nodeType":"PROCESS"},"end":{"name":"end","description":"end","inputVarMap":{"taskDependencyData":"taskDependencyData","precedentTaskIds":"precedentTaskIds","count":"count"},"outputVarMap":{"taskDependencyData":"taskDependencyData","precedentTaskIds":"precedentTaskIds","count":"count"},"nodeType":"END"},"workflowNodes":["start","checkWorkOrderId","getTaskDependencyData","isDependencyPresent","processTaskDependencyData","getStatusName","processGetStatusNameData","end"]}