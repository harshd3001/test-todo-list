{"fetchHolidayData":{"models":["holiday"],"connectors":[{"condition":"","connectorDisplayType":"CurvedLine","connectorLabel":"","exitPortType":"NextStep","nodeId":"processData"}],"columns":{"Date":"DATE({$holiday.date})"},"description":"query node to fetch holiday Data","inputVarMap":{},"nodeType":"QUERY","filter":"","name":"fetchHolidayData","outputVarMap":{"data":"holidayData"},"id":"fetchHolidayData","getCount":true,"displayPositionX":45,"displayPositionY":34},"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processData","description":"node to parse data","processRule":"{for(var i=0;i<contextVar.taskData.length;i++){var day=new Date(contextVar.taskData[i].Date);day=day.getDay();day=day.toString();contextVar.taskData[i].Day=day;contextVar.taskData[i].allocatedTime=(contextVar.taskData[i].allocatedTime/60);contextVar.taskData[i].allocatedTime=(contextVar.taskData[i].allocatedTime).toFixed(1);}for(var i=0;i<contextVar.dateData.length;i++){contextVar.dateData[i].count=0;contextVar.dateData[i].availableTime=0;contextVar.dateData[i].allocatedTime=0;}for(var i=0;i<contextVar.taskData.length;i++){for(var j=0;j<contextVar.shiftData.length;j++){if(contextVar.taskData[i].calendarId===contextVar.shiftData[j].calendarId&&contextVar.taskData[i].Day===contextVar.shiftData[j].displayOrder){var scd=[];scd=JSON.parse(contextVar.shiftData[j].schedule);if(scd.length===0){contextVar.taskData[i].availableTime=0;}else if(scd.length===1){var startTime=scd[0].startTime;var endTime=scd[0].endTime;startTime=new Date(startTime);endTime=new Date(endTime);var time=Math.abs(endTime-startTime);time=(parseFloat(time/(1000*60*60))).toFixed(1);contextVar.taskData[i].availableTime=time;}else{var startTime=scd[0].startTime;var endTime=scd[0].endTime;startTime=new Date(startTime);endTime=new Date(endTime);var time=Math.abs(endTime-startTime);(parseFloat(time/(1000*60*60))).toFixed(1);contextVar.taskData[i].availableTime=time;for(k=1;k<scd.length;k++){var startTime=scd[k].startTime;var endTime=scd[k].endTime;startTime=new Date(startTime);endTime=new Date(endTime);var time=Math.abs(endTime-startTime);time=(parseFloat(time/(1000*60*60))).toFixed(1);contextVar.taskData[i].availableTime=contextVar.taskData[i].availableTime+time;}}}else{continue;}}}for(var i=0;i<contextVar.dateData.length;i++){for(var j=0;j<contextVar.taskData.length;j++){if(contextVar.dateData[i].Date===contextVar.taskData[j].Date){contextVar.dateData[i].count=contextVar.dateData[i].count+1;contextVar.dateData[i].availableTime=parseFloat(contextVar.dateData[i].availableTime)+parseFloat(contextVar.taskData[j].availableTime);contextVar.dateData[i].allocatedTime=parseFloat(contextVar.dateData[i].allocatedTime)+parseFloat(contextVar.taskData[j].allocatedTime);}}}for(var i=0;i<contextVar.dateData.length;i++){contextVar.dateData[i].availableTime=(parseFloat(contextVar.dateData[i].availableTime)/parseFloat(contextVar.dateData[i].count)).toFixed(0);contextVar.dateData[i].allocatedTime=(parseFloat(contextVar.dateData[i].allocatedTime)/parseFloat(contextVar.dateData[i].count)).toFixed(0);}for(var i=0;i<contextVar.dateData.length;i++){for(var j=0;j<contextVar.holidayData.length;j++){if(contextVar.dateData[i].Date===contextVar.holidayData[j].Date){contextVar.dateData[i].availableTime=0;}}}}","id":"processData","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskData"}],"name":"start","description":"Start","id":"start","nodeType":"START"},"fetchTaskData":{"models":["workOrderTask","workforce"],"connectors":[{"condition":"","connectorDisplayType":"CurvedLine","connectorLabel":"","exitPortType":"NextStep","nodeId":"fetchDate"}],"columns":{"assignedToUserId":"workOrderTask.assignedToUserId","calendarId":"workforce.calendarId","allocatedTime":"sum({$workOrderTask.estimatedDuration})","Date":"Date({$workOrderTask.scheduledDate})"},"orderBy":"Date ASC","description":"query node to fetch taskData related to the date and technician","inputVarMap":{},"groupBy":"Date, assignedToUserId","nodeType":"QUERY","filter":"{$workOrderTask.id} IS NOT NULL AND {$workOrderTask.id} != ''AND (DATE({$workOrderTask.dueDate}) BETWEEN (CURRENT_DATE()- INTERVAL 1 Month) AND (CURRENT_DATE())) AND {$workOrderTask.statusId} != 'workOrderTaskCompleted' AND {$workOrderTask.assignedToUserId} IS NOT NULL AND {$workOrderTask.assignedToUserId} !='' AND {$workOrderTask.scheduledDate} IS NOT NULL AND {$workOrderTask.scheduledDate} !=''","name":"fetchTaskData","outputVarMap":{"data":"taskData"},"id":"fetchTaskData","getCount":true,"displayPositionX":45,"displayPositionY":34},"end":{"name":"end","description":"End","inputVarMap":{"dateData":"dateData"},"outputVarMap":{"dateData":"dateData"},"id":"end","nodeType":"END"},"fetchShiftData":{"models":["weeklySchedule"],"connectors":[{"condition":"","connectorDisplayType":"CurvedLine","connectorLabel":"","exitPortType":"NextStep","nodeId":"fetchHolidayData"}],"columns":{"schedule":"schedule","calendarId":"calendarId","displayOrder":"displayOrder","day":"day"},"description":"query node to fetch shift Data","inputVarMap":{},"nodeType":"QUERY","filter":"","name":"fetchShiftData","outputVarMap":{"data":"shiftData"},"id":"fetchShiftData","getCount":true,"displayPositionX":45,"displayPositionY":34},"workflowNodes":["start","fetchTaskData","fetchDate","fetchShiftData","fetchHolidayData","processData","end"],"fetchDate":{"models":["workOrderTask","workforce"],"connectors":[{"condition":"","connectorDisplayType":"CurvedLine","connectorLabel":"","exitPortType":"NextStep","nodeId":"fetchShiftData"}],"columns":{"Date":"Date({$workOrderTask.scheduledDate})"},"orderBy":"Date ASC","description":"query node to fetch Date related to the tasks","inputVarMap":{},"groupBy":"Date","nodeType":"QUERY","filter":"{$workOrderTask.id} IS NOT NULL AND {$workOrderTask.id} != ''AND (DATE({$workOrderTask.dueDate}) BETWEEN (CURRENT_DATE()- INTERVAL 1 Month) AND (CURRENT_DATE())) AND {$workOrderTask.statusId} != 'workOrderTaskCompleted' AND {$workOrderTask.assignedToUserId} IS NOT NULL AND {$workOrderTask.assignedToUserId} !='' AND {$workOrderTask.scheduledDate} IS NOT NULL AND {$workOrderTask.scheduledDate} !=''","name":"fetchDate","outputVarMap":{"data":"dateData"},"id":"fetchDate","getCount":true,"displayPositionX":45,"displayPositionY":34}}