{"callLongRunningTaskNotificationWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"processId":"longRunningTaskBatchSchedulerNotificationWF","name":"callLongRunningTaskNotificationWF","description":"callLongRunningTaskNotificationWF","inputVarMap":{"openJobs":"openJobs"},"outputVarMap":{},"nodeType":"WORKFLOW"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"name":"start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"flattenDataReceived"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"callMissedSSTNotificationWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"processId":"missedSSTBatchSchedulerNotificationWF","name":"callMissedSSTNotificationWF","description":"callMissedSSTNotificationWF","inputVarMap":{"openJobs":"openJobs"},"outputVarMap":{},"nodeType":"WORKFLOW"},"upsertIntoSchedulerLog":{"eventId":"schedulerLogModelProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"upsertIntoSchedulerLog","description":"upsertIntoSchedulerLog","inputVarMap":{"schedulerLog":"schedulerLog"},"outputVarMap":{},"nodeType":"PUBLISH"},"fetchInProgressScheduler":{"filter":"{$schedulerLog.id} = {@currentSchedulerLogId}","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"isSchedulerCurrentStatusFailed"}],"columns":{"result":"IF({$schedulerLog.result} IS NOT NULL,{$schedulerLog.result},'[]')","actualStatus":"schedulerLog.status","context":"schedulerLog.context","id":"schedulerLog.id","schedulerType":"schedulerLog.schedulerType","status":"IF({@currentStatus} = {@successStatus},'schedulerLogCompleted', 'schedulerLogFailed')"},"name":"fetchInProgressScheduler","description":"fetchInProgressScheduler","inputVarMap":{"currentSchedulerLogId":"currentSchedulerLogId","successStatus":"successStatus","status":"currentStatus"},"outputVarMap":{"data":"schedulerLog"},"nodeType":"QUERY"},"workflowNodes":["start","logContextVar","flattenDataReceived","fetchInProgressScheduler","isSchedulerCurrentStatusFailed","callNotificationWFAccordingToSchedulerType","callTechnicianLeaveTasksNotificationWF","callSLAJeopardyNotificationWF","callMissedSSTNotificationWF","callLongRunningTaskNotificationWF","processDataForSchedulerLog","upsertIntoSchedulerLog","end"],"callSLAJeopardyNotificationWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"processId":"slaJeopardyBatchSchedulerNotificationWF","ignoreSubContext":true,"name":"callSLAJeopardyNotificationWF","description":"callSLAJeopardyNotificationWF","inputVarMap":{"openJobs":"openJobs","schedulerLog":"schedulerLog","assignedJobs":"assignedJobs"},"outputVarMap":{"schedulerLog":"schedulerLog"},"nodeType":"WORKFLOW"},"isSchedulerCurrentStatusFailed":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"callNotificationWFAccordingToSchedulerType"}],"name":"isSchedulerCurrentStatusFailed","description":"isSchedulerCurrentStatusFailed","processRule":"{ !Array.isArray(contextVar.schedulerLog) || contextVar.schedulerLog[0].actualStatus === 'schedulerLogFailed'}","nodeType":"DECISION"},"workflowContext":{"featureName":"batchScheduler","extraMsg":"NOTIFICATION: parentBatchSchedulerNotificationWF call","successStatus":true},"callTechnicianLeaveTasksNotificationWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"processId":"technicianLeaveTasksNotificationWF","ignoreSubContext":true,"name":"callTechnicianLeaveTasksNotificationWF","description":"callTechnicianLeaveTasksNotificationWF","inputVarMap":{"openJobs":"openJobs"},"outputVarMap":{},"nodeType":"WORKFLOW"},"end":{"name":"end","description":"End","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"callNotificationWFAccordingToSchedulerType":{"connectors":[{"condition":"contextVar.schedulerLog[0].schedulerType === 'slaJeopardyTask'","exitPortType":"NextStep","nodeId":"callSLAJeopardyNotificationWF"},{"condition":"typeof contextVar.openJobs === 'undefined' || contextVar.openJobs.length === 0","exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"},{"condition":"contextVar.schedulerLog[0].schedulerType === 'technicianLeaveTasks'","exitPortType":"NextStep","nodeId":"callTechnicianLeaveTasksNotificationWF"},{"condition":"contextVar.schedulerLog[0].schedulerType==='missedSST'","exitPortType":"NextStep","nodeId":"callMissedSSTNotificationWF"},{"condition":"contextVar.schedulerLog[0].schedulerType==='longRunningTask'","exitPortType":"NextStep","nodeId":"callLongRunningTaskNotificationWF"},{"DefaultStep":true,"condition":"typeof contextVar.openJobs === 'undefined' || contextVar.openJobs.length === 0","exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"name":"callNotificationWFAccordingToSchedulerType","description":"callNotificationWFAccordingToSchedulerType","nodeType":"MULTIDECISION"},"processDataForSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"upsertIntoSchedulerLog"}],"contextChangePermitted":true,"name":"processDataForSchedulerLog ","description":"processDataForSchedulerLog","processRule":"{ contextVar.schedulerLog[0].endTime = new Date().toISOString().replace('T', ' ').replace('Z', ''); contextVar.schedulerLog[0].message = contextVar.message; if (typeof contextVar.data !== 'undefined' && contextVar.schedulerLogData[0] ?.context) { contextVar.schedulerLogData[0].context['notificationData'] = {}; contextVar.schedulerLogData[0].context.notificationData = contextVar.data; } }","nodeType":"PROCESS","jsEngine":"es6"},"flattenDataReceived":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchInProgressScheduler"}],"contextChangePermitted":true,"name":"flattenDataReceived","description":"flattenDataReceived","processRule":"{ if (typeof contextVar.data !== 'undefined') { for (const key in contextVar.data) { contextVar[key] = contextVar.data[key]; } } if (typeof contextVar.defaultInputContext !== 'undefined') { for (const key in contextVar.defaultInputContext) { contextVar[key] = contextVar.defaultInputContext[key]; } } }","nodeType":"PROCESS","jsEngine":"es6"}}