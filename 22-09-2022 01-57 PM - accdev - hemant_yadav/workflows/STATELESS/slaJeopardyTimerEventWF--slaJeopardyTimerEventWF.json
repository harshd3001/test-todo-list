{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"processRecommendationId"}],"multirecord":true,"name":"insertIntoAimlRecs","description":"insertIntoAimlRecs","inputVarMap":{"recData":"data"},"outputVarMap":{"data":"recommendationData"},"nodeType":"MODEL","operation":1},"callWorkOrderTaskRecommendationModelWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"workOrderTaskRecommendationModelWF","name":"callWorkOrderTaskRecommendationModelWF","description":"callWorkOrderTaskRecommendationModelWF","inputVarMap":{"workOrderTaskRecommendation":"workOrderTaskRecommendation"},"outputVarMap":{},"nodeType":"WORKFLOW"},"fetchNextTwentyFourHoursTask":{"models":["workOrderTask","taskType","taskScheduleBreakdown","workOrder"],"connectors":[{"exitPortType":"NextStep","nodeId":"areTasksPresent"}],"havingClause":"taskScheduleBreakdownCount < 2","columns":{"taskScheduleBreakdownCount":"COUNT({$taskScheduleBreakdown.id})","id":"workOrderTask.id","workOrderId":"workOrder.id"},"inputs":{"selectedTaskId":{"filter":"{$workOrderTaskRecommendation.recommendationType} = 'openReopenedDiscontinuedSlaJeopardySuccess' AND {$workOrderTaskRecommendation.sendFurtherRecommendation} = false","models":["workOrderTaskRecommendation"],"columns":{"id":"workOrderTaskRecommendation.workOrderTaskId"},"links":{},"groupBy":"id","selectColumns":["id"]}},"description":"fetchNextTwentyFourHoursTask","orderBy":"id","outerJoinOnModel":"workOrderTask","inputVarMap":{"currentTime":"currentTime","nextTwentyFourHours":"nextTwentyFourHours","nextTwentyFourHoursTaskStatus":"nextTwentyFourHoursTaskStatus"},"groupBy":"id","nodeType":"QUERY","filter":"{$workOrder.deadline} >= {@currentTime} AND {$workOrder.deadline} <= {@nextTwentyFourHours} AND {$workOrderTask.statusId} IN {@nextTwentyFourHoursTaskStatus} AND {$id} NOT IN ({@selectedTaskId}) AND {$taskType.webTask} = false AND {$taskType.crewTask} = false AND ({$workOrderTask.isLongDurationTask} = false OR {$workOrderTask.isLongDurationTask} IS NULL)","name":"fetchNextTwentyFourHoursTask","links":{"workOrder":"workOrderTask","workOrderTask":"taskType","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"nextTwentyFourHours"},"batchSize":1000,"getCount":true},"fetchNextOneHourTask":{"filter":"{$workOrder.deadline} >= {@currentTime} AND {$workOrder.deadline} <= {@nextOneHour} AND {$workOrderTask.statusId} IN {@nextOneHourTaskStatus}","models":["workOrderTask","workOrder","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchNextTwelveHoursTask"}],"columns":{"statusId":"workOrderTask.statusId","id":"workOrderTask.id","workOrderId":"workOrder.id","techinicanName":"User.name"},"name":"fetchNextOneHourTask","description":"fetchNextOneHourTask","inputVarMap":{"currentTime":"currentTime","nextOneHourTaskStatus":"nextOneHourTaskStatus","nextOneHour":"nextOneHour"},"links":{"workOrder":"workOrderTask","workOrderTask":"User"},"outputVarMap":{"data":"nextOneHourTask"},"batchSize":1000,"nodeType":"QUERY","getCount":true},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTime"}],"name":"start","description":"start","nodeType":"START"},"areTasksPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processRecommendationData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"areTasksPresent","description":"areTasksPresent","processRule":"(Array.isArray(contextVar.nextOneHourTask) || Array.isArray(contextVar.nextTwelveHoursTask) || Array.isArray(contextVar.nextTwentyFourHours))","nodeType":"DECISION"},"workflowNodes":["start","processTime","fetchNextOneHourTask","fetchNextTwelveHoursTask","fetchNextTwentyFourHoursTask","areTasksPresent","processRecommendationData","insertIntoAimlRecs","processRecommendationId","callWorkOrderTaskRecommendationModelWF","end"],"processTime":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchNextOneHourTask"}],"contextChangePermitted":true,"name":"processTime","description":"processTime","processRule":"{ contextVar.currentTime = new Date(); contextVar.currentTime = contextVar.currentTime.toISOString().replace('T', ' ').replace('Z', ''); contextVar.nextOneHour = new Date(); contextVar.nextOneHour.setHours(contextVar.nextOneHour.getHours() + 1); contextVar.nextOneHour = contextVar.nextOneHour.toISOString().replace('T', ' ').replace('Z', ''); contextVar.nextTwelveHours = new Date(); contextVar.nextTwelveHours.setHours(contextVar.nextTwelveHours.getHours() + 12); contextVar.nextTwelveHours = contextVar.nextTwelveHours.toISOString().replace('T', ' ').replace('Z', ''); contextVar.nextTwentyFourHours = new Date(); contextVar.nextTwentyFourHours.setHours(contextVar.nextTwentyFourHours.getHours() + 24); contextVar.nextTwentyFourHours = contextVar.nextTwentyFourHours.toISOString().replace('T', ' ').replace('Z', ''); }","nodeType":"PROCESS"},"fetchNextTwelveHoursTask":{"models":["workOrderTask","workOrder"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchNextTwentyFourHoursTask"}],"columns":{"id":"workOrderTask.id","workOrderId":"workOrder.id"},"inputs":{"selectedTaskId":{"filter":"{$workOrderTaskRecommendation.recommendationType} = 'scheduledSlaJeopardySuccess' AND {$workOrderTaskRecommendation.sendFurtherRecommendation} = false","models":["workOrderTaskRecommendation"],"columns":{"id":"workOrderTaskRecommendation.workOrderTaskId"},"links":{},"groupBy":"id","selectColumns":["id"]}},"description":"fetchNextTwelveHoursTask","inputVarMap":{"currentTime":"currentTime","nextTwelveHours":"nextTwelveHours"},"nodeType":"QUERY","filter":"{$workOrder.deadline} >= {@currentTime} AND {$workOrder.deadline} <= {@nextTwelveHours} AND {$workOrderTask.statusId} = 'workOrderTaskScheduled' AND {$id} NOT IN ({@selectedTaskId})","name":"fetchNextTwelveHoursTask","links":{"workOrder":"workOrderTask"},"outputVarMap":{"data":"nextTwelveHoursTask"},"batchSize":1000,"getCount":true},"workflowContext":{"payload":{"priorityModel":"AimlRecs","expired":false,"addDecisionToTraining":false,"rejected":false,"notified":false,"recommendContext":{},"accepted":false,"priority":10,"superseded":false,"done":false,"status":"recommended"},"scheduledSlaJeopardySuccess":{"aimlRecTypeId":"scheduledSlaJeopardySuccess","recommendation":"{@taskIdToBeReplaced} is nearing its SLA and has not been dispatched. Accept this recommendation to dispatch it now."},"nextOneHourTaskStatus":["workOrderTaskDispatched","workOrderTaskInTransit","workOrderTaskInProgress","workOrderTaskDelayed","workOrderTaskIncident","workOrderTaskPendingReview"],"dispatchedToInProgressSlaJeopardySuccess":{"aimlRecTypeId":"dispatchedToPendingReviewSlaJeopardySuccess","recommendation":"{@taskIdToBeReplaced} is nearing its SLA and has not been submitted for review. Follow up with the assignee: {@technicianNameToBeReplaced}"},"pendingReviewSlaJeopardySuccess":{"aimlRecTypeId":"dispatchedToPendingReviewSlaJeopardySuccess","recommendation":"{@taskIdToBeReplaced} is nearing its SLA and has not been approved. Attention is needed to review and approve this task."},"nextTwentyFourHoursTaskStatus":["workOrderTaskOpen","workOrderTaskReopened","workOrderTaskDiscontinued"],"openReopenedDiscontinuedSlaJeopardySuccess":{"aimlRecTypeId":"openReopenedDiscontinuedSlaJeopardySuccess","recommendation":"{@taskIdToBeReplaced} is nearing its SLA. Accept this recommendation to schedule and dispatch it now."}},"processRecommendationId":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderTaskRecommendationModelWF"}],"contextChangePermitted":true,"name":"processRecommendationId","description":"processRecommendationId","processRule":"{ if (Array.isArray(contextVar.recommendationData) && contextVar.recommendationData.length > 0) { for (var i = 0; i < contextVar.recommendationData.length; i++) { contextVar.workOrderTaskRecommendation[i].aimlRecsId = contextVar.recommendationData[i].id; } } }","nodeType":"PROCESS","jsEngine":"es6"},"end":{"name":"End","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"processRecommendationData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"processRecommendationData","description":"processRecommendationData","processRule":"{ contextVar.recData = []; contextVar.workOrderTaskRecommendation = []; function settingRecommendationData(element, recType, isTechNamePresent) { var recommendationType = JSON.parse(JSON.stringify(recType)); if (isTechNamePresent) { recommendationType.recommendation = recommendationType.recommendation.replace('{@taskIdToBeReplaced}', element.id).replace('{@technicianNameToBeReplaced}', element.techinicanName); } else { recommendationType.recommendation = recommendationType.recommendation.replace('{@taskIdToBeReplaced}', element.id); } return { ...contextVar.payload, ...recommendationType }; } if (Array.isArray(contextVar.nextOneHourTask) && contextVar.nextOneHourTask.length > 0) { contextVar.nextOneHourTask.forEach(function (element) { contextVar.workOrderTaskRecommendation.push({ 'id': '', 'sendFurtherRecommendation': true, 'workOrderTaskId': element.id, 'recommendationType': 'dispatchedToInProgressSlaJeopardySuccess', 'aimlRecsId': '' }); if (element.statusId === 'workOrderTaskPendingReview') { contextVar.recData.push(settingRecommendationData(element, contextVar.pendingReviewSlaJeopardySuccess, false)); } else { contextVar.recData.push(settingRecommendationData(element, contextVar.dispatchedToInProgressSlaJeopardySuccess, true)); } }); } if (Array.isArray(contextVar.nextTwelveHoursTask) && contextVar.nextTwelveHoursTask.length > 0) { contextVar.nextTwelveHoursTask.forEach(function (element) { var recommendationType = JSON.parse(JSON.stringify(contextVar.payload)); recommendationType.recommendContext.tasksDispatchData = [element.id]; contextVar.workOrderTaskRecommendation.push({ 'id': '', 'sendFurtherRecommendation': false, 'workOrderTaskId': element.id, 'recommendationType': 'scheduledSlaJeopardySuccess', 'aimlRecsId': '' }); contextVar.recData.push({ ...settingRecommendationData(element, contextVar.scheduledSlaJeopardySuccess, false), ...recommendationType }); }); } if (Array.isArray(contextVar.nextTwentyFourHours) && contextVar.nextTwentyFourHours.length > 0) { contextVar.nextTwentyFourHours.forEach(function (element) { var recommendationType = JSON.parse(JSON.stringify(contextVar.payload)); recommendationType.recommendContext.taskId = element.id; contextVar.workOrderTaskRecommendation.push({ 'id': '', 'sendFurtherRecommendation': false, 'workOrderTaskId': element.id, 'recommendationType': 'openReopenedDiscontinuedSlaJeopardySuccess', 'aimlRecsId': '' }); contextVar.recData.push({ ...settingRecommendationData(element, contextVar.openReopenedDiscontinuedSlaJeopardySuccess, false), ...recommendationType }); }); } }","nodeType":"PROCESS","jsEngine":"es6"}}