{"findNumberOfBatches":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTechsPresent"}],"contextChangePermitted":true,"name":"findNumberOfBatches","description":"findNumberOfBatches","processRule":"{contextVar.availabilityNoOfBatches = Math.ceil(contextVar.technicianArray.length / contextVar.customBatchSize); contextVar.availabilityNewBatchNumber = contextVar.availabilityTechBatchNumber + 1;contextVar.originalTechnicianArray = JSON.parse(JSON.stringify(contextVar.technicianArray));}","id":"findNumberOfBatches","nodeType":"PROCESS"},"areMoreTechsPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"technicianProcessData"},{"exitPortType":"FalseStep","nodeId":"isCalledFromCalendar"}],"name":"areMoreTechsPresent","description":"areMoreTechsPresent","processRule":"typeof contextVar.technicianArray !== 'undefined' && contextVar.technicianArray.length > 0 && contextVar.availabilityNoOfBatches >= contextVar.availabilityNewBatchNumber","id":"areMoreTechsPresent","nodeType":"DECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"setFilterForTechniciansData"}],"name":"start","description":"Start","id":"start","nodeType":"START"},"workflowNodes":["start","setFilterForTechniciansData","findNumberOfBatches","areMoreTechsPresent","technicianProcessData","fetchTechniciansAvailabilityEventCall","appendTechs","isCalledFromCalendar","getTechniciansShifts","processZRule","end"],"isCalledFromCalendar":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processZRule"},{"exitPortType":"FalseStep","nodeId":"getTechniciansShifts"}],"name":"isCalledFromCalendar","description":"isCalledFromCalendar","processRule":"typeof contextVar.workflowCall !== 'undefined' && contextVar.workflowCall !== '' && contextVar.workflowCall ==='fetchCalendarViewdata'","id":"isCalledFromCalendar","nodeType":"DECISION"},"appendTechs":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTechsPresent"}],"contextChangePermitted":true,"name":"appendTechs","description":"appendTechs","processRule":"{if (Array.isArray(contextVar.appendTechnicianTaskData) && contextVar.appendTechnicianTaskData.length > 0) { contextVar.technicianTaskData = contextVar.technicianTaskData.concat(contextVar.appendTechnicianTaskData); } if (Array.isArray(contextVar.appendTechnicianLeaveData) && contextVar.appendTechnicianLeaveData.length > 0) { contextVar.technicianLeaveData = contextVar.technicianLeaveData.concat(contextVar.appendTechnicianLeaveData); } if (Array.isArray(contextVar.appendTechnicianHolidayData) && contextVar.appendTechnicianHolidayData.length > 0) { contextVar.technicianHolidayData = contextVar.technicianHolidayData.concat(contextVar.appendTechnicianHolidayData); } if (Array.isArray(contextVar.appendTechnicianOvertimeData) && contextVar.appendTechnicianOvertimeData.length > 0) { contextVar.technicianOvertimeData = contextVar.technicianOvertimeData.concat(contextVar.appendTechnicianOvertimeData); } }","id":"appendTechs","nodeType":"PROCESS"},"workflowContext":{"availabilityNoOfBatches":0,"workforceStatus":"workforceActive","technicianTaskData":[],"technicianOvertimeData":[],"userStatus":"Deactivated","workOrderTaskStatusesNotRequired":["workOrderTaskCompleted","workOrderTaskCancelled","workOrderTaskDiscontinued","workOrderTaskAutoScheduling"],"availabilityTechBatchNumber":0,"technicianHolidayData":[],"customBatchSize":1000,"taskStartedStatuses":["workOrderTaskInProgress","workOrderTaskInTransit","workOrderTaskIncident","workOrderTaskDelayed"],"technicianShiftData":[],"newShiftBatchNumber":0,"technicianLeaveData":[]},"fetchTechniciansAvailabilityEventCall":{"eventId":"fetchTechnicianAvailabilityProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"appendTechs"}],"contextChangePermitted":true,"name":"fetchTechniciansAvailabilityEventCall","description":"fetchTechniciansAvailabilityEventCall","inputVarMap":{"overtimeFilter":"overtimeFilter","startDateFilter":"startDateFilter","endDate":"endDate","workflowCall":"workflowCall","loopArray":"loopArray","leavesFilter":"leavesFilter","holidayEndDateFilter":"holidayEndDateFilter","holidayStartDateFilter":"holidayStartDateFilter","workOrderTaskStatusesNotRequired":"workOrderTaskStatusesNotRequired","tasksFilter":"tasksFilter","displayOrderFilter":"displayOrderFilter","customBatchSize":"customBatchSize","taskStartedStatuses":"taskStartedStatuses","shiftsFilter":"shiftsFilter","endDateFilter":"endDateFilter","workOrderTaskId":"workOrderTaskId","newShiftBatchNumber":"newShiftBatchNumber","holidaysFilter":"holidaysFilter","startDate":"startDate"},"outputVarMap":{"data":"processEventData"},"nodeType":"PUBLISH","captureOutput":true},"technicianProcessData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTechniciansAvailabilityEventCall"}],"contextChangePermitted":true,"name":"technicianProcessData","description":"technicianProcessData","processRule":"{contextVar.loopArray = [];contextVar.loopArray = contextVar.technicianArray.splice(0,contextVar.customBatchSize);}","nodeType":"PROCESS"},"getTechniciansShifts":{"models":["calendar","weeklySchedule"],"connectors":[{"exitPortType":"NextStep","nodeId":"processZRule"}],"columns":{"weeklyScheduleSchedule":"weeklySchedule.schedule","weeklyScheduleDisplayOrder":"weeklySchedule.displayOrder","weeklyScheduleCalendarId":"weeklySchedule.calendarId","weeklyScheduleIsAllDay":"weeklySchedule.isAllDay"},"description":"getTechniciansShifts","distinct":true,"orderBy":"weeklyScheduleDisplayOrder ASC","inputVarMap":{"customBatchSize":"batchSize","displayOrderFilter":"displayOrderFilter"},"nodeType":"QUERY","filter":"{$calendar.calendarType}='shift' AND {$weeklyScheduleDisplayOrder} IN {@displayOrderFilter}","name":"getTechniciansShifts","links":{"calendar":"weeklySchedule"},"outputVarMap":{"data":"technicianShiftData"},"batchSize":"batchSize","getCount":true},"end":{"name":"end","description":"end","inputVarMap":{"techniciansData":"techniciansData"},"outputVarMap":{"techniciansData":"techniciansData"},"id":"end","nodeType":"END"},"setFilterForTechniciansData":{"connectors":[{"exitPortType":"NextStep","nodeId":"findNumberOfBatches"}],"contextChangePermitted":true,"name":"setFilterForTechniciansData","description":"setFilterForTechniciansData","processRule":"{ contextVar.availabilityFilter = '{$workforceUserId} IN {@loopArray}'; if ((Array.isArray(contextVar.dispatcherTechs) && contextVar.dispatcherTechs.length < 0) && contextVar.workflowCall === 'fetchCalendarViewdata') { contextVar.technicianArray = []; } if (typeof contextVar.workflowCall !== 'undefined' && contextVar.workflowCall === 'fetchCalendarViewdata') { contextVar.technicianArray = JSON.parse(JSON.stringify(contextVar.dispatcherTechs)); contextVar.leavesFilter = contextVar.availabilityFilter; contextVar.holidaysFilter = contextVar.availabilityFilter; contextVar.shiftsFilter = contextVar.availabilityFilter; contextVar.overtimeFilter = contextVar.availabilityFilter; contextVar.userFilter = contextVar.availabilityFilter; contextVar.tasksFilter = contextVar.availabilityFilter + ' AND {$workOrderTaskStatusId} NOT IN {@workOrderTaskStatusesNotRequired} AND {$workOrderTaskId} != {@workOrderTaskId}'; } else { contextVar.holidayStartDateFilter = new Date(contextVar.startDateFilter); contextVar.holidayStartDateFilter.setDate(contextVar.holidayStartDateFilter.getDate() - 1); contextVar.holidayStartDateFilter = contextVar.holidayStartDateFilter.toISOString().replace('T', ' ').replace('Z', ''); contextVar.holidayEndDateFilter = new Date(contextVar.endDateFilter).toISOString().replace('T', ' ').replace('Z', ''); contextVar.leavesFilter = '{$workforce.userId} IN {@loopArray} AND (({$workforceLeaveStartDate} BETWEEN {@startDate} AND {@endDate}) OR ({$workforceLeaveEndDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}) OR ({@endDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}))'; contextVar.holidaysFilter = '{$workforce.userId} IN {@loopArray} AND ({$holidayDate} >= {@holidayStartDateFilter} AND {$holidayDate} <= {@holidayEndDateFilter})'; contextVar.shiftsFilter = '{$workforce.userId} IN {@loopArray} AND {$weeklyScheduleDisplayOrder} IN {@displayOrderFilter}'; contextVar.overtimeFilter = '{$workforce.userId} IN {@loopArray} AND (({$workforceOvertimeStartDate} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({$workforceOvertimeEndDate} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({@startDateFilter} BETWEEN {$workforceOvertimeStartDate} AND  {$workforceOvertimeEndDate}) OR ({@endDateFilter} BETWEEN {$workforceOvertimeStartDate} AND  {$workforceOvertimeEndDate}))'; if (typeof contextVar.considerOnlyHighPriorityTasks !== 'undefined' && contextVar.considerOnlyHighPriorityTasks) { contextVar.tasksFilter = '{$workforceUserId} IN {@loopArray} AND (({$startTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({$endTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({@startDateFilter} BETWEEN {$startTime} AND  {$endTime}) OR ({@endDateFilter} BETWEEN {$startTime} AND  {$endTime}))AND {$workOrderTaskId} != {@workOrderTaskId} AND (({$workOrderTaskStatusId} NOT IN {@workOrderTaskStatusesNotRequired} AND {$workOrder.priorityPriority}<20) OR ({$workOrderTaskStatusId} IN {@taskStartedStatuses}))'; } else { contextVar.tasksFilter = '{$workforceUserId} IN {@loopArray} AND (({$startTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({$endTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({@startDateFilter} BETWEEN {$startTime} AND  {$endTime}) OR ({@endDateFilter} BETWEEN {$startTime} AND  {$endTime})) AND {$workOrderTaskStatusId} NOT IN {@workOrderTaskStatusesNotRequired} AND {$workOrderTaskId} != {@workOrderTaskId}'; } } contextVar.displayOrderFilter = []; var startDayDispOrder = (parseInt(contextVar.startDayDisplayOrder) !== 0) ? parseInt(contextVar.startDayDisplayOrder) - 1 : 6; if (startDayDispOrder < contextVar.endDayDisplayOrder) { for (var i = startDayDispOrder; i <= contextVar.endDayDisplayOrder; i++) contextVar.displayOrderFilter.push(i); } else { for (var i = startDayDispOrder; i <= 6; i++) contextVar.displayOrderFilter.push(i); for (var i = 0; i <= contextVar.endDayDisplayOrder; i++) contextVar.displayOrderFilter.push(i); } }","id":"setFilterForTechniciansData","nodeType":"PROCESS"},"processZRule":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processZRule","description":"zRule to calculate the technicians availability based on leaves, holidays, etc.","processRule":"@OZWO75A528","nodeType":"PROCESS","jsEngine":"es6"}}