{"processCapacityData":{"connectors":[{"exitPortType":"NextStep","nodeId":"processAppointmentData"}],"contextChangePermitted":true,"name":"processCapacityData","description":"processCapacityData","processRule":"{ if (contextVar.appendTechnicianLeaveData.length > 0) { contextVar.appendTechnicianLeaveData.forEach(function(value) { var obj = { 'workforceUserId': value.workforceUserId, 'endTime': value.endTime, 'startTime': value.startTime }; contextVar.calendarData.push(obj); }) } if (contextVar.appendTechnicianHolidayData.length > 0) { contextVar.appendTechnicianHolidayData.forEach(function(element) { var obj = { 'workforceUserId': element.workforceUserId, 'endTime': element.holidayEndDate, 'startTime': element.holidayDate }; contextVar.calendarData.push(obj); }) } if (contextVar.techData !== '' && typeof contextVar.techData !== 'undefined') { contextVar.techCapacity = contextVar.techData[0].acCapacity; } if (contextVar.appriaserCapacityData !== '' && typeof contextVar.appriaserCapacityData !== 'undefined') { contextVar.appriaserCapacity = contextVar.appriaserCapacityData[0].acCapacity; } }","nodeType":"PROCESS","jsEngine":"es6"},"isMobileTechnicianPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getSchedulerSettingData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isMobileTechnicianPresent","description":"isMobileTechnicianPresent","processRule":"(contextVar.isValid === true )","nodeType":"DECISION"},"processTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTechnician"}],"contextChangePermitted":true,"name":"processTaskData","description":"processTaskData","processRule":"{ if (contextVar.taskData !== '' && typeof contextVar.taskData !== 'undefined' && contextVar.taskData.length > 0) { contextVar.acPrimaryAppraiserId = contextVar.taskData[0].acPrimaryAppraiserId; contextVar.workOrderId = contextVar.taskData[0].workOrderId; contextVar.customerId = contextVar.taskData[0].customerId; contextVar.latitude = contextVar.taskData[0].latitude; contextVar.longitude = contextVar.taskData[0].longitude; contextVar.timeZone=contextVar.taskData[0].acTimeZone; contextVar.timestamp = +Math.floor(Date.now() / 1000); contextVar.location = contextVar.latitude + ' ' + contextVar.longitude; } }","nodeType":"PROCESS"},"getTimeZone":{"connectors":[{"exitPortType":"NextStep","nodeId":"getCalendarData"}],"processId":"FGWSS34F7Z","name":"getTimeZone","description":"getTimeZone","inputVarMap":{"latitude":"latitude","location":"location","longitude":"longitude","timestamp":"timestamp"},"outputVarMap":{"distance":"timeZoneOffsetData"},"nodeType":"WORKFLOW"},"getTechCapacity":{"filter":"{$userId} IN {@techId} ","models":["workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"getAppraiserCapacity"}],"columns":{"acCapacity":"workforce.acCapacity","userId":"workforce.userId"},"name":"getTechCapacity","description":"getTechCapacity","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","userList":"techId"},"outputVarMap":{"data":"techData"},"nodeType":"QUERY","getCount":true},"processShiftData":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfDataToBeUpsertedPresent"}],"contextChangePermitted":true,"name":"processShiftData","description":"processShiftData","processRule":"{ if (contextVar.day > 6) { contextVar.day = 0; } contextVar.appointmentWindowStartDate = ''; contextVar.appointmentWindowEndDate = ''; if (contextVar.entityData !== '' && typeof contextVar.entityData !== 'undefined') { contextVar.entityValue = contextVar.entityData[0].configValue; } var count = 1; for (var dayCount = 0; dayCount < contextVar.acPrebookDays; dayCount++) { for (var i = 0; i < contextVar.appointmentWindowData.length; i++) { var refer = '.000'; contextVar.appointmentWindowStartTime = contextVar.appointmentWindowData[i].appointmentWindowStartTime; contextVar.appointmentWindowId = contextVar.appointmentWindowData[i].appointmentWindowId; contextVar.appointmentWindowEndTime = contextVar.appointmentWindowData[i].appointmentWindowEndTime; if (contextVar.appointmentWindowEndTime == '00:00:00.000') { contextVar.appointmentWindowEndTime = '24:00:00.000'; } for (var j = 0; j < contextVar.shiftData.length; j++) { if (contextVar.day == contextVar.shiftData[j].displayOrder) { if (contextVar.shiftData[j].schedule !== '' && contextVar.shiftData[j].schedule.length > 0) { if (contextVar.shiftData[j].schedule[0].start <= contextVar.appointmentWindowStartTime + '.000' && contextVar.shiftData[j].schedule[0].end >= contextVar.appointmentWindowEndTime) { if (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)] != '' && typeof contextVar.shiftData[j][contextVar.startDate.slice(0, 10)] != 'undefined') { if (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskCapacityData'] !== '' && typeof contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskCapacityData'] !== 'undefined') { contextVar.taskCapacity = contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskCapacityData'].length; } else { contextVar.taskCapacity = 0; } if (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskAppraiserCapacityData'] !== '' && typeof contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskAppraiserCapacityData'] !== 'undefined') { contextVar.taskAppraiserCapacity = contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['taskAppraiserCapacityData'].length; } else { contextVar.taskAppraiserCapacity = 0; } } contextVar.appointmentWindowStartDate = contextVar.startDate.slice(0, 11).concat(contextVar.appointmentWindowStartTime); contextVar.appointmentWindowEndDate = contextVar.startDate.slice(0, 11).concat(contextVar.appointmentWindowEndTime); if (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)] != '' && typeof contextVar.shiftData[j][contextVar.startDate.slice(0, 10)] != 'undefined') { if (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'] !== '' && typeof contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'] !== 'undefined') { for (z = 0; z < contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'].length; z++) { if (((contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'][z].startTime < contextVar.appointmentWindowStartDate) && (contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'][z].endTime < contextVar.appointmentWindowStartDate) || ((contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'][z].startTime > contextVar.appointmentWindowEndDate) && contextVar.shiftData[j][contextVar.startDate.slice(0, 10)]['calendarData'][z].endTime > contextVar.appointmentWindowEndDate))) { if (contextVar.taskCapacity < contextVar.techCapacity) { if (contextVar.taskAppraiserCapacity < contextVar.appriaserCapacity) {} else { contextVar.appointmentWindowStartDate = ''; contextVar.appointmentWindowEndDate = ''; } } else { contextVar.appointmentWindowStartDate = ''; contextVar.appointmentWindowEndDate = ''; } } else { contextVar.appointmentWindowStartDate = ''; contextVar.appointmentWindowEndDate = ''; } } } } if (contextVar.appointmentWindowStartDate !== '' && contextVar.appointmentWindowEndDate !== '') { break; } } } } } if (contextVar.appointmentWindowStartDate !== '' && contextVar.appointmentWindowEndDate !== '') { break; } } if (contextVar.appointmentWindowStartDate !== '' && contextVar.appointmentWindowEndDate !== '') { break; } if (contextVar.startDate <= contextVar.endDate) { contextVar.day = contextVar.day + 1; contextVar.startDate = new Date(contextVar.startDate); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.startDate = new Date(contextVar.startDate.slice(0, 10)); contextVar.startDate.setDate(contextVar.startDate.getDate() + count); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); if (contextVar.day > 6) { contextVar.day = 0; } } } if (contextVar.endDate.slice(0,10) < contextVar.appointmentWindowStartDate.slice(0,10)) { contextVar.appointmentWindowStartDate = ''; contextVar.appointmentWindowEndDate = ''; } contextVar.startEndJson = []; contextVar.startEndJson.push({ 'start': contextVar.appointmentWindowStartDate, 'end': contextVar.appointmentWindowEndDate }) }","nodeType":"PROCESS","jsEngine":"es6"},"processAppointmentData":{"connectors":[{"exitPortType":"NextStep","nodeId":"processShiftData"}],"contextChangePermitted":true,"name":"processAppointmentData","description":"processAppointmentData","processRule":"{ var newdata = []; var temp = []; if (contextVar.calendarData !== '' && typeof contextVar.calendarData !== 'undefined') { contextVar.calendarData.sort((a, b) => { if (a.startTime < b.startTime) { return -1; } else { return 1; } }); var startDate = contextVar.calendarData[0].startTime; contextVar.calendarData.forEach(data => { if (data.startTime.slice(0, 10) == startDate.slice(0, 10)) { newdata.push(data); } else if (data.startTime.slice(0, 10) > startDate.slice(0, 10)) { temp.push(newdata); newdata = []; startDate = data.startTime; newdata.push(data); } if (data.startTime == contextVar.calendarData[contextVar.calendarData.length - 1].startTime) { temp.push(newdata); } }); contextVar.calendarData = temp; } if (contextVar.taskCapacityData !== '' && typeof contextVar.taskCapacityData !== 'undefined') { contextVar.taskCapacityData = contextVar.taskCapacityData.sort((a, b) => { if (a.startDate < b.startDate) { return -1; } else { return 1; } }); newdata = []; temp = []; startDate = contextVar.taskCapacityData[0].startDate; contextVar.taskCapacityData.forEach(data => { if (data.startDate.slice(0, 10) == startDate.slice(0, 10)) { newdata.push(data); } else if (data.startDate.slice(0, 10) > startDate.slice(0, 10)) { temp.push(newdata); newdata = []; startDate = data.startDate; newdata.push(data); } if (data.startDate == contextVar.taskCapacityData[contextVar.taskCapacityData.length - 1].startDate) { temp.push(newdata); } }); contextVar.taskCapacityData = temp; } if (contextVar.taskAppraiserCapacityData !== '' && typeof contextVar.taskAppraiserCapacityData !== 'undefined') { contextVar.taskAppraiserCapacityData = contextVar.taskAppraiserCapacityData.sort((a, b) => { if (a.startDate < b.startDate) { return -1; } else { return 1; } }); newdata = []; temp = []; startDate = contextVar.taskAppraiserCapacityData[0].startDate; contextVar.taskAppraiserCapacityData.forEach(data => { if (data.startDate.slice(0, 10) == startDate.slice(0, 10)) { newdata.push(data); } else if (data.startDate.slice(0, 10) > startDate.slice(0, 10)) { temp.push(newdata); newdata = []; startDate = data.startDate; newdata.push(data); } if (data.startDate == contextVar.taskAppraiserCapacityData[contextVar.taskAppraiserCapacityData.length - 1].startDate) { temp.push(newdata); } }); contextVar.taskAppraiserCapacityData = temp; } for (var i = 0; i < contextVar.shiftData.length; i++) { dates = []; var date; for (var j = 0; j < contextVar.calendarData.length; j++) { if (contextVar.shiftData[i].displayOrder == new Date(contextVar.calendarData[j][0].startTime).getDay()) { date = contextVar.calendarData[j][0].startTime.slice(0, 10); contextVar.shiftData[i][date] = {}; dates.push(date); contextVar.shiftData[i][date].calendarData = contextVar.calendarData[j]; } } for (var k = 0; k < contextVar.taskCapacityData.length; k++) { if (contextVar.shiftData[i].displayOrder == new Date(contextVar.taskCapacityData[k][0].startDate).getDay()) { for (m = 0; m < dates.length; m++) { if (dates[m] == contextVar.taskCapacityData[k][0].startDate.slice(0, 10)) { contextVar.shiftData[i][dates[m]].taskCapacityData = contextVar.taskCapacityData[k]; } } } } for (var l = 0; l < contextVar.taskAppraiserCapacityData.length; l++) { if (contextVar.shiftData[i].displayOrder == new Date(contextVar.taskAppraiserCapacityData[l][0].startDate).getDay()) { for (m = 0; m < dates.length; m++) { if (dates[m] == contextVar.taskAppraiserCapacityData[l][0].startDate.slice(0, 10)) { contextVar.shiftData[i][dates[m]].taskAppraiserCapacityData = contextVar.taskAppraiserCapacityData[l]; } } } } dates = []; } if (contextVar.timeZoneOffsetData.length > 0) { contextVar.status = contextVar.timeZoneOffsetData[0].status; if (contextVar.status == 'OK') { var timezoneoffsetRaw = contextVar.timeZoneOffsetData[0].rawOffset; var timezoneoffsetDst = contextVar.timeZoneOffsetData[0].dstOffset; if (timezoneoffsetDst > 0) { timezoneoffsetAdded = timezoneoffsetRaw + timezoneoffsetDst; } else { timezoneoffsetAdded = timezoneoffsetRaw; } var truncate = function(v) { return v < 0 ? Math.ceil(v) : Math.floor(v); }; function timeZoneFormat(duration) { var hrs = truncate(duration / 3600); var mins = truncate((duration % 3600) / 60); var newmins = mins.toString().replace('-', ''); if (hrs > -1) { hrs = '+'.concat(hrs); } var ret = ''; if (parseInt(newmins) > 0) { ret += '' + hrs + ':' + newmins; } else { ret += '' + hrs; } return ret; }; contextVar.timezoneoffset = timeZoneFormat(timezoneoffsetAdded); contextVar.timeZoneName = contextVar.timeZoneOffsetData[0].timeZoneName; } else { contextVar.timezoneoffset = 0; } } else { contextVar.timezoneoffset = 0; } contextVar.timeZone = contextVar.timezoneoffset; if (contextVar.timeZone !== '') { if (contextVar.timeZone.includes(':')) { contextVar.t = contextVar.timeZone.split(':'); contextVar.hrs = parseInt(contextVar.t[0]); contextVar.min = parseInt(contextVar.t[1]); } else { contextVar.t = parseInt(contextVar.timeZone); contextVar.hrs = contextVar.t; } contextVar.hrsMinutes = (contextVar.hrs * 60); if (typeof contextVar.min === 'undefined' || contextVar.min === '') { contextVar.min = 0; } contextVar.minMinutes = contextVar.hrsMinutes + contextVar.min; } if (contextVar.hrs > 0) { contextVar.minMinutes = contextVar.minMinutes * -1; } if (contextVar.t[0] > 0) { contextVar.minMinutes = contextVar.minMinutes * -1; } for (var i = 0; i < contextVar.shiftData.length; i++) { if (!isNaN(contextVar.minMinutes)) { contextVar.timezoneOffset1 = Number(contextVar.minMinutes); var addMinutes = function(date) { return (new Date(date.getTime() - (contextVar.timezoneOffset1 * 60000)).toISOString().replace('T', ' ').replace('Z', '')); }; if (contextVar.shiftData[i].schedule !== '' && contextVar.shiftData[i].schedule.length > 0) { contextVar.startTimeInUTC = addMinutes(new Date('2022-08-08 ' + contextVar.shiftData[i].schedule[0].start)); contextVar.endTimeInUTC = addMinutes(new Date('2022-08-08 ' + contextVar.shiftData[i].schedule[0].end)); contextVar.startDate2 = contextVar.startTimeInUTC.slice(11, 23); contextVar.endDate2 = contextVar.endTimeInUTC.slice(11, 23); if (contextVar.startDate2 == '00:00:00.000') { contextVar.startDate2 = '24:00:00.000'; } if (contextVar.endDate2 == '00:00:00.000') { contextVar.endDate2 = '24:00:00.000'; } contextVar.shiftData[i].schedule[0].start = contextVar.startDate2; contextVar.shiftData[i].schedule[0].end = contextVar.endDate2; } } } if (contextVar.taskAppointmentWindowData !== '' && typeof contextVar.taskAppointmentWindowData !== 'undefined') { contextVar.startDate = contextVar.taskAppointmentWindowData[0].startDate; contextVar.appointmentId = contextVar.taskAppointmentWindowData[0].id; contextVar.startDate = new Date(contextVar.startDate); contextVar.day = contextVar.startDate.getDay(); contextVar.startDate.setDate(contextVar.startDate.getDate()); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); } }","nodeType":"PROCESS","jsEngine":"es6"},"processTechData":{"connectors":[{"exitPortType":"NextStep","nodeId":"isMobileTechnicianPresent"}],"contextChangePermitted":true,"name":"processTechData","description":"processTechData","processRule":"{ if (Array.isArray(contextVar.technicianData) && contextVar.technicianData.length > 0) { contextVar.isValid = true; } }","nodeType":"PROCESS"},"checkTechnicianWorkGroupEligibility":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"checkTechnicianWorkGroupEligibility","description":"checkTechnicianWorkGroupEligibility","processRule":"{ contextVar.isValid = false; let objectMap = {}; let workGroupFilter = ['region', 'customer', 'workOrderType', 'taskType']; if (Array.isArray(contextVar.userWorkGroupFilterData) && contextVar.userWorkGroupFilterData.length > 0) { for (let value of contextVar.userWorkGroupFilterData) { if (value.filterMethod === 'all') { contextVar.isValid = true; break; } if (typeof objectMap[value.filterMethod] === 'undefined') { objectMap[value.filterMethod] = []; } objectMap[value.filterMethod].push(value.filterId); } if (!contextVar.isValid) { contextVar.isValid = true; for (let val of workGroupFilter) { if (val in objectMap) { if (!(objectMap[val].indexOf(contextVar[`${val}Id`]) > -1)) { contextVar.isValid = false; break; } } } } } }","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"customBatchSize":1000,"featureName":"batchScheduler","isValid":false,"extraMsg":"BASE CONSTRAINTS: taskSchedulingBatchSchedulerBaseConstraintsWF call"},"getTechnician":{"filter":"{$appraiserId} = {@acPrimaryAppraiserId} && {$clientId} = {@customerId} && {$analystId} = {@techId} ","models":["acClientApprovedWorkforce","workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTechData"}],"columns":{"availabilityWithOverTime":"workforce.userId","clientId":"acClientApprovedWorkforce.clientId","calendarId":"workforce.calendarId","id":"acClientApprovedWorkforce.id","analystId":"acClientApprovedWorkforce.analystId","appraiserId":"acClientApprovedWorkforce.appraiserId"},"name":"getTechnician","description":"getTechnician","distinct":true,"links":{"acClientApprovedWorkforce":"workforce"},"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","taskTypeMobileProcessId":"taskTypeMobileProcessId","customerId":"customerId","techId":"techId"},"outputVarMap":{"data":"technicianData"},"nodeType":"QUERY","getCount":true},"getTaskCapacity":{"filter":"{$workOrderId} != {@workOrderId} && {$workOrderTask.assignedToUserId} = {@techId} &&{$workOrderTask.scheduledDate} > {@startDate} && ({$workOrderTask.statusId} != 'workOrderTaskPendingReview' && {$workOrderTask.statusId} != 'workOrderTaskCompleted' && {$workOrderTask.statusId} != 'workOrderTaskCancelled')","models":["workOrderTask","workOrder"],"connectors":[{"exitPortType":"NextStep","nodeId":"getAppriaserTaskCapacity"}],"columns":{"statusId":"workOrderTask.statusId","id":"workOrderTask.id","workOrderId":"workOrderTask.workOrderId","startDate":"workOrderTask.scheduledDate"},"name":"getTaskCapacity","description":"getTaskCapacity","distinct":true,"inputVarMap":{"endDate":"endDate","workOrderId":"workOrderId","startDate":"startDate","techId":"techId"},"links":{"workOrderTask":"workOrder"},"outputVarMap":{"data":"taskCapacityData","count":"taskCapacity"},"nodeType":"QUERY","getCount":true},"getCalendarData":{"filter":"({$startTime} > {@startTime} || {$startTime} = {@startTime}) && ({$userId} IN {@userList} || {$userId} = {@acPrimaryAppraiserId}) ","models":["techCalendarV2"],"connectors":[{"exitPortType":"NextStep","nodeId":"getCalendarHolidays"}],"columns":{"workOrderTaskId":"techCalendarV2.workOrderTaskId","startTime":"techCalendarV2.startTime","endTime":"techCalendarV2.endTime","id":"techCalendarV2.id","userId":"techCalendarV2.userId"},"name":"getCalendarData","description":"getCalendarData","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","userList":"userList","startTime":"startTime"},"outputVarMap":{"data":"calendarData"},"nodeType":"QUERY","getCount":true},"getShifts":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTimeZone"}],"processId":"acFetchTechsAndSitesAvailabilityWF","name":"getShifts","description":"getShifts","inputVarMap":{"userList":"technicians","calendarId":"calendarId","endDate":"endDate","startDate":"startDate"},"outputVarMap":{},"nodeType":"WORKFLOW"},"processSkillLevelData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskAppointmentWindow"}],"contextChangePermitted":true,"name":"processSkillLevelData","description":"processSkillLevelData","processRule":"{ if (Array.isArray(contextVar.taskTypeSkill) && contextVar.taskTypeSkill.length > 0) { if (typeof contextVar.techniciansSkill !== 'undefined') { for (var element of contextVar.taskTypeSkill) { if (typeof contextVar.techniciansSkill[element.skillId] === 'undefined' || contextVar.techniciansSkill[element.skillId] < element.skillLevelRank) { contextVar.isValid = false; break; } } } else { contextVar.isValid = false; } } }","nodeType":"PROCESS","jsEngine":"es6"},"end":{"name":"end","description":"End","inputVarMap":{"appointmentWindowEndDate":"appointmentWindowEndDate","isValid":"isValid","appointmentWindowStartDate":"appointmentWindowStartDate"},"outputVarMap":{"isValid":"isValid"},"nodeType":"END"},"isSkillFilterApplicable":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processSkillLevelData"},{"exitPortType":"FalseStep","nodeId":"getEligibleTechnicianIds"}],"name":"isSkillFilterApplicable","description":"isSkillFilterApplicable","processRule":"(contextVar.schedulerSettingUseSkills === true )","nodeType":"DECISION"},"getTaskAppointmentWindow":{"filter":"{$workOrderTaskId} = {@workOrderTaskId}","models":["workOrderTaskAppointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"getAppointmentWindow"}],"columns":{"appointmentWindowId":"workOrderTaskAppointmentWindow.appointmentWindowId","recver":"recver","endDate":"workOrderTaskAppointmentWindow.endDate","workOrderTaskId":"workOrderTaskAppointmentWindow.workOrderTaskId","id":"workOrderTaskAppointmentWindow.id","startDate":"workOrderTaskAppointmentWindow.startDate"},"name":"getTaskAppointmentWindow","description":"getTaskAppointmentWindow","distinct":true,"inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"outputVarMap":{"data":"taskAppointmentWindowData"},"nodeType":"QUERY","getCount":true},"isAppointmentSkillPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getAppointmentWindow"},{"exitPortType":"FalseStep","nodeId":"isSkillPresent"}],"name":"isAppointmentSkillPresent","description":"isAppointmentSkillPresent","processRule":"( contextVar.isValid === true && contextVar.taskAppointmentWindowData.length == 0)","nodeType":"DECISION"},"getTechniciansLeaves":{"models":["workforceLeave","workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTechCapacity"}],"columns":{"workforceLeaveEndDate":"workforceLeave.endDate","startTime":"workforceLeave.startDate","endTime":"workforceLeave.endDate","workforceUserId":"workforceLeave.workforceUserId","workforceLeaveStartDate":"workforceLeave.startDate"},"orderBy":"workforceLeaveStartDate ASC","description":"getTechniciansLeaves","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","userList":"userList","endDate":"endDate","startTime":"startTime","startDate":"startDate"},"nodeType":"QUERY","filter":"({$workforceUserId} = {@acPrimaryAppraiserId} || {$workforce.userId} IN {@userList}) AND (({$workforceLeaveStartDate} BETWEEN {@startDate} AND {@endDate}) OR ({$workforceLeaveEndDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}) OR ({@endDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}))","name":"getTechniciansLeaves","links":{"workforce":"workforceLeave"},"outputVarMap":{"data":"appendTechnicianLeaveData","count":"leavesCount","batchSize":"techLeavesbatchSize","batchNumber":"techLeavesBatchNumber"},"batchSize":"batchSize","getCount":true},"getAppriaserTaskCapacity":{"filter":"{$workOrderId} != {@workOrderId} && {$workOrderTask.assignedToUserId} = {@techId} &&{$workOrderTask.scheduledDate} > {@startDate}  && ({$workOrderTask.statusId} != 'workOrderTaskPendingReview' && {$workOrderTask.statusId} != 'workOrderTaskCompleted' && {$workOrderTask.statusId} != 'workOrderTaskCancelled')","models":["workOrderTask","workOrder"],"connectors":[{"exitPortType":"NextStep","nodeId":"processCapacityData"}],"columns":{"eventType":"workOrderTask.eventType","id":"workOrderTask.id","workOrderId":"workOrderTask.workOrderId","startDate":"workOrderTask.scheduledDate"},"name":"getAppriaserTaskCapacity","description":"getAppriaserTaskCapacity","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"techId","endDate":"endDate","workOrderId":"workOrderId","startDate":"startDate"},"links":{"workOrderTask":"workOrder"},"outputVarMap":{"data":"taskAppraiserCapacityData","count":"taskAppraiserCapacity"},"nodeType":"QUERY","getCount":true},"getTaskData":{"filter":"{$id} = {@workOrderTaskId}","models":["workOrderTask","workOrder","site"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskData"}],"columns":{"acPrimaryAppraiserId":"workOrder.acPrimaryAppraiserId","latitude":"site.latitude","customerId":"workOrder.customerId","workOrderId":"workOrder.id","id":"workOrderTask.id","acTimeZone":"site.acTimeZone","longitude":"site.longitude"},"name":"getTaskData","description":"getTaskData","distinct":true,"outerJoinOnModel":"workOrderTask","inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"outputVarMap":{"data":"taskData"},"nodeType":"QUERY","getCount":true},"getCalendarHolidays":{"models":["workforce","calendar","calendarHoliday","holiday"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTechniciansLeaves"}],"columns":{"holidayEndDate":"CONCAT(DATE_ADD({$holiday.date}, INTERVAL CAST(1439 AS UNSIGNED) MINUTE), '.000')","workforceUserId":"workforce.userId","holidayDate":"holiday.date"},"description":"getCalendarHolidays","distinct":true,"orderBy":"holidayDate ASC","inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","userList":"userList","startTime":"startTime"},"nodeType":"QUERY","filter":"({$workforceUserId} = {@acPrimaryAppraiserId} || {$workforceUserId} IN {@userList}) && {$holidayDate} > {@startTime}","name":"getCalendarHolidays","links":{"calendar":"calendarHoliday","workforce":"calendar","calendarHoliday":"holiday"},"outputVarMap":{"data":"appendTechnicianHolidayData","count":"holidaysCount","batchSize":"techHolidaysbatchSize","batchNumber":"techHolidaysBatchNumber"},"batchSize":"batchSize","getCount":true},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"name":"start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"processData"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"checkIfDataToBeUpsertedPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"upsertWorkOrderTaskAppointmentWindow"},{"exitPortType":"FalseStep","nodeId":"checkTechnicianWorkGroupEligibility"}],"name":"checkIfDataToBeUpsertedPresent","description":"checkIfDataToBeUpsertedPresent","processRule":"contextVar.appointmentWindowStartDate !== '' && typeof contextVar.appointmentWindowStartDate !== 'undefined' ","nodeType":"DECISION"},"getAppraiserCapacity":{"filter":"{$userId} = {@acPrimaryAppraiserId} ","models":["workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskCapacity"}],"columns":{"acCapacity":"workforce.acCapacity","userId":"workforce.userId"},"name":"getAppraiserCapacity","description":"getAppraiserCapacity","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId"},"outputVarMap":{"data":"appriaserCapacityData"},"nodeType":"QUERY","getCount":true},"processSchedulerSettingData":{"connectors":[{"exitPortType":"NextStep","nodeId":"isSkillFilterApplicable"}],"contextChangePermitted":true,"name":"processSchedulerSettingData","description":"processSchedulerSettingData ","processRule":"{ if (typeof contextVar.schedulerSettingData != 'undefined' && contextVar.schedulerSettingData.length > 0) { contextVar.schedulerSettingUseSkills = contextVar.schedulerSettingData[0].schedulerSettingUseSkills; contextVar.acPrebookDays = contextVar.schedulerSettingData[0].acPrebookDays; } else { contextVar.schedulerSettingUseSkills = false; } contextVar.startDate = new Date(); contextVar.day = contextVar.startDate.getDay() + 1; contextVar.startDate.setDate(contextVar.startDate.getDate() + 1); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.startTime = contextVar.startDate.slice(0, 10); contextVar.endDate = new Date(); contextVar.endDate.setDate(contextVar.endDate.getDate() + contextVar.acPrebookDays); contextVar.endDate = contextVar.endDate.toISOString().replace('T', ' ').replace('Z', ''); }","nodeType":"PROCESS"},"workflowNodes":["start","logContextVar","processData","getTaskData","processTaskData","getTechnician","processTechData","isMobileTechnicianPresent","getSchedulerSettingData","processSchedulerSettingData","isSkillFilterApplicable","processSkillLevelData","getTaskAppointmentWindow","isAppointmentSkillPresent","getAppointmentWindow","getEntityData","getShifts","getTimeZone","getCalendarData","getCalendarHolidays","getTechniciansLeaves","getTechCapacity","getAppraiserCapacity","getTaskCapacity","getAppriaserTaskCapacity","processCapacityData","processAppointmentData","processShiftData","checkIfDataToBeUpsertedPresent","upsertWorkOrderTaskAppointmentWindow","isSkillPresent","getEligibleTechnicianIds","checkTechnicianWorkGroupEligibility","end"],"getSchedulerSettingData":{"models":["schedulerSetting"],"connectors":[{"exitPortType":"NextStep","nodeId":"processSchedulerSettingData"}],"columns":{"schedulerSettingUseSkills":"schedulerSetting.useSkills","acPrebookDays":"schedulerSetting.acPrebookDays"},"name":"getSchedulerSettingData","description":"getSchedulerSettingData","distinct":true,"inputVarMap":{},"outputVarMap":{"data":"schedulerSettingData"},"nodeType":"QUERY","getCount":true},"getAppointmentWindow":{"filter":"{$accTimeZone}={@timeZone}","models":["appointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"getEntityData"}],"columns":{"appointmentWindowId":"appointmentWindow.id","appointmentWindowStartTime":"appointmentWindow.startTime","appointmentWindowMaxTasks":"appointmentWindow.maxTasks","appointmentWindowName":"appointmentWindow.name","accTimeZone":"appointmentWindow.accTimeZone","appointmentWindowEndTime":"appointmentWindow.endTime","appointmentWindowRecver":"appointmentWindow.recver","appointmentWindowDescription":"appointmentWindow.description"},"name":"getAppointmentWindow","orderBy":"appointmentWindowStartTime","description":"getAppointmentWindow","distinct":true,"inputVarMap":{"timeZone":"timeZone"},"outputVarMap":{"data":"appointmentWindowData"},"nodeType":"QUERY","getCount":true},"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskData"}],"contextChangePermitted":true,"name":"processData","description":"processData","processRule":"{ contextVar.userList = []; contextVar.userList.push(contextVar.tech.id); contextVar.techId = contextVar.tech.id; contextVar.workOrderTaskId = contextVar.taskDetail.id; contextVar.techniciansSkill = contextVar.tech.techniciansSkill; for (var key in contextVar.taskDetail) { contextVar[key] = contextVar.taskDetail[key]; } }","nodeType":"PROCESS"},"isSkillPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getEligibleTechnicianIds"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isSkillPresent","description":"isSkillPresent","processRule":"( contextVar.isValid === true )","nodeType":"DECISION"},"upsertWorkOrderTaskAppointmentWindow":{"modelName":"workOrderTaskAppointmentWindow","connectors":[{"exitPortType":"NextStep","nodeId":"isSkillPresent"}],"name":"upsertWorkOrderTaskAppointmentWindow","description":"upsertModel","inputVarMap":{"appointmentWindowId":"appointmentWindowId","appointmentWindowEndDate":"endDate","appointmentId":"id","appointmentWindowStartDate":"startDate","workOrderTaskId":"workOrderTaskId","startEndJson":"startEndJson"},"outputVarMap":{"data":"workOrderTaskAppointmentWindowUpsertedData"},"nodeType":"MODEL","operation":4},"getEligibleTechnicianIds":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkTechnicianWorkGroupEligibility"}],"processId":"userWorkGroupFilterWF","name":"getEligibleTechnicianIds","description":"getEligibleTechnicianIds","inputVarMap":{"userList":"userList"},"outputVarMap":{},"nodeType":"WORKFLOW"},"getEntityData":{"filter":"( {$configKey}  =  'acApptWdwBuffer')","models":["EntityConfig"],"connectors":[{"exitPortType":"NextStep","nodeId":"getShifts"}],"columns":{"configKey":"EntityConfig.configKey","encrypted":"EntityConfig.encrypted","recver":"EntityConfig.recver","valueType":"EntityConfig.valueType","configScope":"EntityConfig.configScope","configValue":"EntityConfig.configValue"},"name":"getEntityData","description":"getEntityData","distinct":true,"inputVarMap":{},"outputVarMap":{"data":"entityData"},"nodeType":"QUERY","getCount":true}}