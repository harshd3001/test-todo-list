{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"multirecord":true,"name":"insertAimlRecs","description":"insertAimlRecs","inputVarMap":{"recommendations":"data"},"id":"insertIntoAimlRecs","outputVarMap":{"data":"retAimlId"},"nodeType":"MODEL","operation":4},"workflowContext":{"payload":{"aimlRecTypeId":"bumpedOutTaskAssignmentFailed","priorityModel":"AimlRecs","rejected":false,"notified":false,"accepted":false,"recommendation":"{@taskToBeReplaced} has been moved to make room for {@criticalTaskToBeReplaced}. No availability was found for the next three days so the task has been moved to Open status and needs to be manually scheduled and assigned.","priority":20,"done":false,"expired":false,"addDecisionToTraining":false,"recommendContext":{},"superseded":false,"status":"recommended"},"recommendations":[]},"formRecommendationData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"formRecommendationData","description":"formRecommendationData","processRule":"{ let payload = JSON.parse(JSON.stringify(contextVar.payload)); if (typeof contextVar.openJobs !== 'undefined' && contextVar.openJobs.length > 0) { contextVar.openJobs.forEach(function (job) { let criticalTaskId = contextVar.schedulerLogData[0].context.bumpedTaskToCriticalTaskMap[job]; payload.recommendation = contextVar.payload.recommendation.replace('{@taskToBeReplaced}', job).replace('{@criticalTaskToBeReplaced}', criticalTaskId); contextVar.recommendations.push(payload); }); } }","nodeType":"PROCESS","jsEngine":"es6"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"formRecommendationData"}],"name":"start","description":"start","nodeType":"START"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"workflowNodes":["start","formRecommendationData","insertIntoAimlRecs","end"]}