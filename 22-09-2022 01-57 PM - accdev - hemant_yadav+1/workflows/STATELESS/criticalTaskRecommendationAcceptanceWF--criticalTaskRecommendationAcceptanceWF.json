{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"multirecord":true,"name":"insertAimlRecs","description":"insertAimlRecs","inputVarMap":{"recommendations":"data"},"id":"insertIntoAimlRecs","outputVarMap":{"data":"retAimlId"},"nodeType":"MODEL","operation":4},"checkIfTaskOpenAndHasScheduledDateOrNot":{"connectors":[{"condition":"typeof contextVar.taskDataToCheckStatus === 'undefined' || contextVar.taskDataToCheckStatus.length === 0 || ['workOrderTaskOpen','workOrderTaskReopened'].indexOf(contextVar.taskDataToCheckStatus[0].statusId) === -1","exitPortType":"NextStep","nodeId":"end"},{"condition":"typeof contextVar.taskDataToCheckStatus[0].workOrderTaskScheduledDate !=='undefined'","exitPortType":"NextStep","nodeId":"setSchedulerConfigsForTaskWithSST"},{"DefaultStep":true,"condition":"typeof contextVar.taskDataToCheckStatus[0].workOrderTaskScheduledDate ==='undefined'","exitPortType":"NextStep","nodeId":"setSchedulerConfigsForTaskWithoutSST"}],"name":"checkIfTaskOpenAndHasScheduledDateOrNot","description":"checkIfTaskOpenAndHasScheduledDateOrNot","nodeType":"MULTIDECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetails"}],"name":"start","description":"start","nodeType":"START"},"setSchedulerLogData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callSchedulerUpsertWF"}],"contextChangePermitted":true,"name":"setSchedulerLogData","description":"setSchedulerLogData","processRule":"@S8LLK1O3B5","nodeType":"PROCESS","jsEngine":"es6"},"callSchedulerUpsertWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"schedulerLogModelWF","name":"callSchedulerUpsertWF","description":"callSchedulerUpsertWF","inputVarMap":{"schedulerLog":"schedulerLog"},"nodeType":"WORKFLOW"},"setSchedulerConfigsForTaskWithSST":{"connectors":[{"exitPortType":"NextStep","nodeId":"callReassignAndRescheduleTasksBasedOnPriorityWF"}],"contextChangePermitted":true,"name":"setSchedulerConfigsForTaskWithSST","description":"setSchedulerConfigsForTaskWithSST","processRule":"{ for (let key in contextVar.taskWithSSTSchedulerConfig) { contextVar[key] = contextVar.taskWithSSTSchedulerConfig[key]; }; contextVar.criticalWorkOrderTaskId = contextVar.workOrderTaskId; }","nodeType":"PROCESS","jsEngine":"es6"},"workflowNodes":["start","fetchTaskDetails","checkIfTaskOpenAndHasScheduledDateOrNot","setSchedulerConfigsForTaskWithSST","callReassignAndRescheduleTasksBasedOnPriorityWF","setRecommendationData","insertIntoAimlRecs","setSchedulerConfigsForTaskWithoutSST","setSchedulerLogData","callSchedulerUpsertWF","end"],"setSchedulerConfigsForTaskWithoutSST":{"connectors":[{"exitPortType":"NextStep","nodeId":"setSchedulerLogData"}],"contextChangePermitted":true,"name":"setSchedulerConfigsForTaskWithoutSST","description":"setSchedulerConfigsForTaskWithoutSST","processRule":"{ contextVar.workOrderTaskDataToAutoSchedule = contextVar.taskDataToCheckStatus; for(let key in contextVar.taskWithNoSSTSchedulerConfig){ contextVar[key]=contextVar.taskWithNoSSTSchedulerConfig[key]; } contextVar.filter='({$workOrderTask.scheduledDate} IS NULL)'; }","nodeType":"PROCESS","jsEngine":"es6"},"fetchTaskDetails":{"models":["workOrderTask","taskScheduleBreakdown","workOrder","site"],"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfTaskOpenAndHasScheduledDateOrNot"}],"havingClause":"taskScheduleBreakdownCount < 2","columns":{"workOrderTaskDueDate":"workOrderTask.dueDate","workOrderTaskTypeId":"workOrderTask.taskTypeId","statusId":"workOrderTask.statusId","slaDeadline":"workOrder.deadline","taskScheduleBreakdownCount":"COUNT({$taskScheduleBreakdown.id})","workOrderTaskId":"workOrderTask.id","workOrderTaskScheduledDate":"workOrderTask.scheduledDate","workOrderTaskRegionId":"site.regionId","workOrderTaskCustomerId":"workOrder.customerId","workOrderTaskWorkOrderTypeId":"workOrder.workOrderTypeId"},"distinct":true,"description":"fetchTaskDetails","outerJoinOnModel":"workOrderTask","inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"groupBy":"workOrderTaskId","nodeType":"QUERY","filter":"{$workOrderTaskId}={@workOrderTaskId}","name":"fetchTaskDetails","links":{"workOrderTask":"workOrder","site":"workOrderTask","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"taskDataToCheckStatus"},"getCount":true},"workflowContext":{"modelName":"BatchScheduler","taskWithNoSSTSchedulerConfig":{"noOfDaysSchedulerWillSearch":1,"schedulerId":"TGIZ00OMES","schedulerType":"criticalTask"},"statusTargetModel":"schedulerLog","criticalTaskFailedRecommendation":{"aimlRecTypeId":"criticalPriorityTaskAssignmentFailed","text":"Critical task taskIdToBeReplaced could not be assigned since no technicians are available. The task has been moved to Open status and will need to be manually scheduled and assigned."},"schedulerId":"TGIZ00OMES","criticalTaskSuccessRecommendation":{"aimlRecTypeId":"criticalPriorityTaskAssignmentSuccess","text":"Critical task taskIdToBeReplaced is now scheduled for scheduledDateToBeReplaced and is assigned to assigneeNameToBeReplaced."},"taskWithSSTSchedulerConfig":{"noOfDaysSchedulerWillSearch":3,"schedulerId":"TGIZ00OMES","schedulerType":"criticalTasksBumpedOutTasks"},"schedulerType":"criticalTasksBumpedOutTasks","schedulerLog":[],"recommendations":[{"priorityModel":"AimlRecs","expired":false,"addDecisionToTraining":false,"rejected":false,"notified":false,"recommendContext":{},"accepted":false,"priority":10,"superseded":false,"done":false,"status":"recommended"}],"status":"schedulerLogQueued"},"setRecommendationData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"setRecommendationData","description":"setRecommendationData","processRule":"{ if (typeof contextVar.criticalTaskAssigneeName !== 'undefined' && contextVar.criticalTaskAssigneeName !== '') { contextVar.recommendations[0].recommendation = contextVar.criticalTaskSuccessRecommendation.text.replace('taskIdToBeReplaced', contextVar.criticalWorkOrderTaskId).replace('scheduledDateToBeReplaced', contextVar.workOrderTaskScheduledDate).replace('assigneeNameToBeReplaced', contextVar.criticalTaskAssigneeName); contextVar.recommendations[0].aimlRecTypeId = contextVar.criticalTaskSuccessRecommendation.aimlRecTypeId; } else { contextVar.recommendations[0].recommendation = contextVar.criticalTaskFailedRecommendation.text.replace('taskIdToBeReplaced', contextVar.criticalWorkOrderTaskId); contextVar.recommendations[0].aimlRecTypeId = contextVar.criticalTaskFailedRecommendation.aimlRecTypeId; } }","nodeType":"PROCESS","jsEngine":"es6"},"callReassignAndRescheduleTasksBasedOnPriorityWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"setRecommendationData"}],"processId":"reassignAndRescheduleTasksBasedOnPriorityWF","ignoreSubContext":true,"name":"callReassignAndRescheduleTasksBasedOnPriorityWF","description":"callReassignAndRescheduleTasksBasedOnPriorityWF","inputVarMap":{"criticalWorkOrderTaskId":"mainTaskIdToSchedule","schedulerId":"schedulerId","schedulerType":"schedulerType"},"outputVarMap":{"criticalTaskAssigneeName":"criticalTaskAssigneeName","workOrderTaskScheduledDate":"workOrderTaskScheduledDate"},"nodeType":"WORKFLOW"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"}}