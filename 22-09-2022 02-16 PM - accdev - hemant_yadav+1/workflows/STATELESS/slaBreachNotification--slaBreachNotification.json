{"isEventPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processWorkOrderTaskLogData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isEventPresent","description":"isEventPresent","processRule":"contextVar.localizedData !== ''  && contextVar.localizedData.length > 0","nodeType":"DECISION"},"forEachInstance":{"connectors":[{"exitPortType":"NextStep","nodeId":"isUserPresent"}],"contextChangePermitted":true,"name":"forEachInstance","description":"forEachInstance","processRule":"contextVar.shortText = contextVar.overDueShortText.replace('{@taskId}', contextVar.loopThroughTasksList_currentElement.taskId); contextVar.longText = contextVar.overDueLongText.replace('{@taskId}', contextVar.loopThroughTasksList_currentElement.taskId).replace('{@taskType}', contextVar.loopThroughTasksList_currentElement.taskTypeName).replace('{@customerSite}', contextVar.loopThroughTasksList_currentElement.siteName); contextVar.userId = contextVar.loopThroughTasksList_currentElement.assignedToUserId; contextVar.workOrderTaskId = contextVar.loopThroughTasksList_currentElement.taskId;","nodeType":"PROCESS"},"processTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskLogData"}],"contextChangePermitted":true,"name":"processTaskData","description":"processTaskData","processRule":"{ contextVar.taskArray = []; for (var i = 0; i < contextVar.tasksData.length; i++) { contextVar.taskArray.push(contextVar.tasksData[i].workOrderTaskId) } }","nodeType":"PROCESS"},"getTaskLogData":{"filter":"{$taskId} IN {@taskLogArray}","models":["taskLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskLogData"}],"columns":{"taskLogCreatedDate":"taskLog.createdDate","log":"taskLog.log","eventType":"taskLog.eventType","taskId":"taskLog.taskId"},"name":"getTaskLogData","description":"getTaskLogData","orderBy":"taskLogCreatedDate DESC","inputVarMap":{"taskArray":"taskLogArray"},"outputVarMap":{"data":"taskLogData"},"groupBy":"taskId","nodeType":"QUERY","getCount":true},"fetchLocalizedKeys":{"filter":"{$listOptionAnswerId} = {@eventType}","models":["listOptionAnswer"],"connectors":[{"exitPortType":"NextStep","nodeId":"isEventPresent"}],"columns":{"listOptionAnswerId":"listOptionAnswer.id","listOptionAnswerAnswerOptionText":"listOptionAnswer.answerOptionText"},"name":"fetchLocalizedKeys","description":"fetchLocalizedKeys","inputVarMap":{"eventType":"eventType"},"outputVarMap":{"data":"localizedData"},"nodeType":"QUERY"},"isTasksData":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTaskData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isTasksData","description":"isTasksData","processRule":"contextVar.tasksData != ''","nodeType":"DECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTasksData"}],"name":"start","description":"start","nodeType":"START"},"callWorkOrderTaskLogWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"workOrderTaskLogsWF","multirecord":true,"name":"callWorkOrderTaskLogWF","description":"callWorkOrderTaskLogWF","inputVarMap":{"workOrderTaskLog":"workOrderTaskLog"},"outputVarMap":{},"nodeType":"WORKFLOW"},"workflowNodes":["start","getTasksData","processTaskData","isTasksData","getTaskLogData","processTaskLogData","loopThroughTasksList","forEachInstance","updateTaskLogs","isUserPresent","notifyTechnicianNode","fetchLocalizedKeys","isEventPresent","processWorkOrderTaskLogData","callWorkOrderTaskLogWF","end"],"loopThroughTasksList":{"connectors":[{"exitPortType":"TrueStep","nodeId":"forEachInstance"},{"exitPortType":"FalseStep","nodeId":"end"}],"data":"taskLogData","name":"loopThroughTasksList","description":"loopThroughTasksList","inputVarMap":{},"outputVarMap":{},"nodeType":"FOREACHLOOP"},"workflowContext":{"overDueShortText":"Overdue Task: {@taskId}","deadlineTemplate":"@lang.['d4','Deadline']","dataPayload":{"targetType":"Task"},"overDueLongText":"Deadline has passed for {@taskId} - {@taskType} at {@customerSite}. Consider reporting a task delay from your Task, using the : menu in the top right. ","workOrderIdTemplate":"@lang.['WorkOrderId','Work Order ID']","eventType":"workOrderTaskSlaBreached"},"processWorkOrderTaskLogData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderTaskLogWF"}],"contextChangePermitted":true,"name":"processWorkOrderTaskLogData","description":"processWorkOrderTaskLogData","processRule":"{ contextVar.workOrderTaskLog = []; const currentDate = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, ''); function convertUTCDateToLocalDate(date , timezoneOffset) { var newDate = new Date(date); var minutes = newDate.getMinutes(); newDate.setMinutes(minutes - timezoneOffset); newDate = newDate.getFullYear() + '-' + (newDate.getMonth() + 1) + '-' + newDate.getDate() + ' ' + newDate.toString().split(' ')[4]; return newDate; } contextVar.tasksData.forEach(function(element, index) { contextVar.workOrderTaskLog.push({ 'logDate': currentDate, 'event': contextVar.eventType, 'workOrderTaskId': element.workOrderTaskId, 'details': contextVar.deadlineTemplate + ':' + convertUTCDateToLocalDate(element.workOrderDeadline,element.timezoneOffset) + '(' + contextVar.workOrderIdTemplate + ':' + element.workOrderId + ')' }) }); }","nodeType":"PROCESS","jsEngine":"es6"},"updateTaskLogs":{"modelName":"taskLog","connectors":[{"exitPortType":"NextStep","nodeId":"fetchLocalizedKeys"}],"multirecord":true,"name":"updateTaskLogs","description":"updateTaskLogs","inputVarMap":{"taskLogDataForUpdate":"data"},"id":"updateTaskStatus","outputVarMap":{"data":"data"},"nodeType":"MODEL","operation":1},"end":{"name":"End","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"getTasksData":{"connectors":[{"exitPortType":"NextStep","nodeId":"isTasksData"}],"processId":"fetchAllTasks","name":"getTasksData","description":"changeProcessInstance","inputVarMap":{"taskArray":"taskArray"},"outputVarMap":{"tasksData":"tasksData"},"nodeType":"WORKFLOW"},"isUserPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"notifyTechnicianNode"},{"exitPortType":"FalseStep","nodeId":"loopThroughTasksList"}],"name":"isUserPresent","description":"isUserPresent","processRule":"typeof contextVar.userId !== 'undefined' && contextVar.userId != ''","id":"isUserPresent","nodeType":"DECISION"},"notifyTechnicianNode":{"connectors":[{"exitPortType":"NextStep","nodeId":"loopThroughTasksList"}],"name":"notifyTechnicianNode","description":"notifyTechnicianNode","inputVarMap":{"longText":"longText","dataPayload":"dataPayload","shortText":"shortText","userId":"userId"},"targetType":"user","id":"notifyTechnicianNode","outputVarMap":{},"notificationType":"push","nodeType":"NOTIFY"},"processTaskLogData":{"connectors":[{"exitPortType":"NextStep","nodeId":"updateTaskLogs"}],"contextChangePermitted":true,"name":"processTaskLogData","description":"processTaskLogData","processRule":"if(contextVar.taskLogData) {contextVar.taskLogDataForUpdate = contextVar.taskLogData; contextVar.taskLogDataForUpdate.forEach(function(element) { element.eventType = contextVar.eventType; }); contextVar.taskLogData.forEach(function(element,index) { element.eventType = contextVar.eventType; element['siteName'] = contextVar.tasksData[index].siteName; element['taskTypeName'] = contextVar.tasksData[index].taskTypeName; element['assignedToUserId'] = contextVar.tasksData[index].assignedToUserId;}); }","nodeType":"PROCESS"}}