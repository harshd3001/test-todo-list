{"insertToTaskLog":{"modelName":"taskLog","connectors":[{"exitPortType":"NextStep","nodeId":"updateTechCalendar"}],"multirecord":true,"name":"insertToTaskLog","description":"Save task log on status change","inputVarMap":{"taskLogData":"data"},"outputVarMap":{},"nodeType":"MODEL","operation":4},"updateTechCalendar":{"eventId":"KX0A3A8ST4","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"updateTechCalendar","description":"updateTechCalendar","inputVarMap":{},"outputVarMap":{},"nodeType":"PUBLISH"},"workflowContext":{"insertTotaskLog":true},"processLatestRecord":{"connectors":[{"exitPortType":"NextStep","nodeId":"shouldIInsertTheRecord"}],"contextChangePermitted":true,"name":"processLatestRecord","description":"processLatestRecord","processRule":"var taskLogPrevData = []; if (Array.isArray(contextVar.taskLogPrevData) && contextVar.taskLogPrevData.length > 0) { try { taskLogPrevData = JSON.parse(contextVar.taskLogPrevData[0].log); } catch (e) { contextVar.error = e.toString(); } var status = taskLogPrevData[0].statusId ? taskLogPrevData[0].statusId : ''; var userId = taskLogPrevData[0].assignedToUserId ? taskLogPrevData[0].assignedToUserId : ''; var scheduledDate = taskLogPrevData[0].scheduledDate ? taskLogPrevData[0].scheduledDate : ''; var instanceId = taskLogPrevData[0].processInstanceId ? taskLogPrevData[0].processInstanceId : ''; if (status == contextVar.workOrderTaskStatusId) { if (contextVar.workOrderTaskStatusId == 'workOrderTaskdispatched') { if (contextVar.workOrderTaskProcessInstanceId) { contextVar.taskLogData[0].id = contextVar.taskLogPrevData[0].id; contextVar.taskLogData[0].log[0].processInstanceId = contextVar.workOrderTaskProcessInstanceId; contextVar.taskLogData[0].recver = contextVar.taskLogPrevData[0].recver; } } else { if (scheduledDate && contextVar.workOrderTaskScheduledDate) { if (scheduledDate == contextVar.workOrderTaskScheduledDate) { contextVar.insertTotaskLog = false; } } } } } ","jsengine":"es6","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertToTaskLog"}],"name":"start","description":"Start","nodeType":"START"},"end":{"name":"end","description":"End","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"fetchLatestInsertedRecord":{"filter":"{$taskId}={@workOrderTaskId}","models":["taskLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"processLatestRecord"}],"columns":{"createdDate":"createdDate","log":"log","taskId":"taskId"},"name":"fetchLatestInsertedRecord","orderBy":"createdDate DESC","description":"fetchLatestInsertedRecord","inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"outputVarMap":{"data":"taskLogPrevData"},"batchSize":1,"nodeType":"QUERY"},"workflowNodes":["start","fetchLatestInsertedRecord","processLatestRecord","shouldIInsertTheRecord","insertToTaskLog","updateTechCalendar","end"],"shouldIInsertTheRecord":{"connectors":[{"exitPortType":"TrueStep","nodeId":"insertToTaskLog"},{"exitPortType":"FalseStep","nodeId":"updateTechCalendar"}],"name":"shouldIInsertTheRecord","description":"shouldIInsertTheRecord","processRule":"(contextVar.insertTotaskLog)","nodeType":"DECISION"}}