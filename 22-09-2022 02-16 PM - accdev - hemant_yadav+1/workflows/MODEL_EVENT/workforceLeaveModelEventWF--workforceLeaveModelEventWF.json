{"getTechnicianDetails":{"filter":"{$workforce.userId} = {@workforceUserId}","models":["workforce","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTasksOnLeaveDates"}],"columns":{"workforceTimezoneOffset":"workforce.timezoneOffset","workforceName":"User.name"},"name":"getTechnicianDetails","description":"getTechnicianDetails","inputVarMap":{"workforceUserId":"workforceUserId"},"links":{"workforce":"User"},"outputVarMap":{"data":"workforceData"},"nodeType":"QUERY"},"workforceLeaveDetails":{"filter":"{$workforceLeave.id} = {@id}","models":["workforceLeave"],"connectors":[{"exitPortType":"NextStep","nodeId":"checkForRecommendation"}],"columns":{"workforceLeaveEndDate":"workforceLeave.endDate","workforceLeaveStartDate":"workforceLeave.startDate"},"name":"workforceLeaveDetails","description":"workforceLeaveDetails","inputVarMap":{"id":"id"},"links":{},"outputVarMap":{"data":"workforceLeaveData"},"nodeType":"QUERY"},"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"multirecord":true,"name":"insertIntoAimlRecs","description":"insertIntoAimlRecs","inputVarMap":{"recData":"data"},"outputVarMap":{"data":"recommendationData"},"nodeType":"MODEL","operation":1},"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"workforceLeaveDetails"}],"contextChangePermitted":true,"name":"processData","description":"processData","processRule":"{ if (typeof contextVar.data !== 'undefined') { for (var key in contextVar.data) { contextVar[key] = contextVar.data[key]; } } }","nodeType":"PROCESS"},"processFetchedData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"processFetchedData","description":"processFetchedData","processRule":"{ var startDate = new Date(contextVar.startDate); startDate.setMinutes(startDate.getMinutes() - Number(contextVar.workforceData[0].workforceTimezoneOffset)); startDate = startDate.toISOString().replace('T', ' ').replace('Z', ''); var endDate = new Date(contextVar.endDate); endDate.setMinutes(endDate.getMinutes() - Number(contextVar.workforceData[0].workforceTimezoneOffset)); endDate = endDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.payload.recommendation = contextVar.payload.recommendation.replace('{@technicianName}', contextVar.workforceData[0].workforceName).replace('{@startDate}', startDate).replace('{@endDate}', endDate); contextVar.recData = []; contextVar.payload.recommendContext.workforceLeaveId = contextVar.id; contextVar.recData.push(contextVar.payload); }","nodeType":"PROCESS"},"workflowContext":{"payload":{"aimlRecTypeId":"leaveRecommendation","priorityModel":"AimlRecs","rejected":false,"notified":false,"accepted":false,"recommendation":"{@technicianName} is on leave from {@startDate} to {@endDate}. Do you want to reassign their tasks?","priority":10,"done":false,"expired":false,"addDecisionToTraining":false,"recommendContext":{},"superseded":false,"status":"recommended"},"workOrderTaskStatuses":["workOrderTaskScheduled","workOrderTaskDispatched"]},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processData"}],"name":"start","description":"start","nodeType":"START"},"getTasksOnLeaveDates":{"filter":"{$workOrderTask.assignedToUserId} = {@workforceUserId} AND (({$scheduledDate} <= {@startDate} AND {$dueDate} >= {@startDate}) || ({$scheduledDate} <= {@endDate} AND {$dueDate} >= {@endDate}) || ( {@startDate} <= {$scheduledDate} AND {$scheduledDate} <= {@endDate}) || ({@startDate} <= {$dueDate} AND {$dueDate} <= {@endDate})) && {$workOrderTaskStatusId} IN {@workOrderTaskStatuses}","models":["workOrderTask"],"connectors":[{"exitPortType":"NextStep","nodeId":"areTasksPresent"}],"columns":{"workOrderTaskStatusId":"workOrderTask.statusId","dueDate":"workOrderTask.dueDate","scheduledDate":"workOrderTask.scheduledDate","id":"workOrderTask.id"},"name":"getTasksOnLeaveDates","description":"getTasksOnLeaveDates","inputVarMap":{"endDate":"endDate","workforceUserId":"workforceUserId","startDate":"startDate","workOrderTaskStatuses":"workOrderTaskStatuses"},"outputVarMap":{"data":"workOrderTaskData"},"nodeType":"QUERY"},"checkForRecommendation":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getTechnicianDetails"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"checkForRecommendation","description":"checkForRecommendation","processRule":"contextVar.createdDate === contextVar.modifiedDate || contextVar.startDate !== contextVar.workforceLeaveData[0].workforceLeaveStartDate.replace('.000','') || contextVar.endDate !== contextVar.workforceLeaveData[0].workforceLeaveEndDate.replace('.000','')","nodeType":"DECISION"},"end":{"name":"end","description":"End","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"areTasksPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processFetchedData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"areTasksPresent","description":"areTasksPresent","processRule":"Array.isArray(contextVar.workOrderTaskData) && contextVar.workOrderTaskData.length > 0","nodeType":"DECISION"},"workflowNodes":["start","processData","workforceLeaveDetails","checkForRecommendation","getTechnicianDetails","getTasksOnLeaveDates","areTasksPresent","processFetchedData","insertIntoAimlRecs","end"]}