{"fetchTaskReviewLogData":{"filter":"{$taskReviewLog.workOrderTaskId} = {@id}","models":["taskReviewLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchUserData"}],"columns":{"taskLogCreatedDate":"taskReviewLog.createdDate","taskReviewLogListOptionAnswerId":"taskReviewLog.listOptionAnswerId"},"name":"fetchTaskReviewLogData","description":"fetchTaskReviewLogData","orderBy":"taskLogCreatedDate DESC","inputVarMap":{"id":"id"},"outputVarMap":{"data":"taskReviewLogData"},"batchSize":1,"nodeType":"QUERY"},"fetchTaskLogData":{"filter":"{$taskLog.taskId} = {@id}","models":["taskLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfReviewLogNeeded"}],"columns":{"taskLogId":"taskLog.id","taskLogEventType":"taskLog.eventType","taskLogCreatedDate":"taskLog.createdDate","taskLogLog":"taskLog.log","taskLogTaskId":"taskLog.taskId"},"name":"fetchTaskLogData","description":"fetchTaskLogData","orderBy":"taskLogCreatedDate DESC","inputVarMap":{"id":"id"},"outputVarMap":{"data":"taskLogData"},"batchSize":1,"nodeType":"QUERY"},"fetchCrewName":{"filter":"{$workOrderTask.id} = {@id}","models":["workOrderTask","crew"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchLocalizedKeys"}],"columns":{"crewName":"crew.name"},"name":"fetchCrewName","description":"fetchCrewName","inputVarMap":{"id":"id"},"outputVarMap":{"data":"crewData"},"nodeType":"QUERY"},"fetchLocalizedKeys":{"filter":"{$listOptionAnswer.listOptionId} IN {@listOptionIds}","models":["listOptionAnswer"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskLogData"}],"columns":{"listOptionAnswerId":"listOptionAnswer.id","listOptionAnswerAnswerOptionText":"listOptionAnswer.answerOptionText"},"name":"fetchLocalizedKeys","description":"fetchLocalizedKeys","inputVarMap":{"listOptionIds":"listOptionIds"},"outputVarMap":{"data":"localizedData"},"nodeType":"QUERY"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processInputData"}],"name":"start","description":"start","nodeType":"START"},"checkTypeOfModelEvent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processDataForWorkOrderLog"},{"exitPortType":"FalseStep","nodeId":"fetchTaskLogData"}],"name":"checkTypeOfModelEvent","description":"checkTypeOfModelEvent","processRule":"contextVar.eventType === 'AFTER_INSERT' ","nodeType":"DECISION"},"callWorkOrderLogWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfDataPresentForInsertingWorkOrderTaskLog"}],"processId":"workOrderLogWF","multirecord":true,"name":"callWorkOrderLogWF","description":"callWorkOrderLogWF","inputVarMap":{"workOrderLog":"workOrderLog"},"outputVarMap":{},"nodeType":"WORKFLOW"},"checkIfReviewLogNeeded":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchTaskReviewLogData"},{"exitPortType":"FalseStep","nodeId":"fetchUserData"}],"name":"checkIfReviewLogNeeded","description":"checkIfReviewLogNeeded","processRule":"(contextVar.data.eventType === 'workOrderTaskRejected' || contextVar.data.eventType === 'workOrderTaskRecalled' || contextVar.data.eventType === 'workOrderTaskReopened')","nodeType":"DECISION"},"callWorkOrderTaskLogWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"workOrderTaskLogsWF","multirecord":true,"name":"callWorkOrderTaskLogWF","description":"callWorkOrderTaskLogWF","inputVarMap":{"workOrderTaskLog":"workOrderTaskLog"},"outputVarMap":{},"nodeType":"WORKFLOW"},"checkIfCrewTask":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchCrewName"},{"exitPortType":"FalseStep","nodeId":"fetchLocalizedKeys"}],"name":"checkIfCrewTask","description":"checkIfCrewTask","processRule":"(typeof contextVar.latestTaskData !== 'undefined' && Array.isArray(contextVar.latestTaskData) && contextVar.latestTaskData.length > 0 && contextVar.latestTaskData[0].taskTypeCrewTask == true)","nodeType":"DECISION","jsEngine":"es6"},"workflowNodes":["start","processInputData","checkTypeOfModelEvent","processDataForWorkOrderLog","callWorkOrderLogWF","checkIfDataPresentForInsertingWorkOrderTaskLog","callWorkOrderTaskLogWF","fetchTaskLogData","checkIfReviewLogNeeded","fetchTaskReviewLogData","fetchUserData","fetchLatestTaskData","checkIfCrewTask","fetchCrewName","fetchLocalizedKeys","processTaskLogData","end"],"processInputData":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkTypeOfModelEvent"}],"contextChangePermitted":true,"name":"processInputData","description":"processInputData","processRule":"{for (const key in contextVar.data) {if(key !== 'eventType') {contextVar[key] = contextVar.data[key];}} if (contextVar.eventType === 'AFTER_INSERT') { contextVar.workOrderTaskLog = [{ 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': 'workOrderTaskCreated', 'workOrderTaskId': contextVar.id, 'details':'-'}]; }}","nodeType":"PROCESS","jsEngine":"es6"},"checkIfDataPresentForInsertingWorkOrderTaskLog":{"connectors":[{"exitPortType":"TrueStep","nodeId":"callWorkOrderTaskLogWF"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"checkIfDataPresentForInsertingWorkOrderTaskLog","description":"checkIfDataPresentForInsertingWorkOrderTaskLog","processRule":"contextVar.workOrderTaskLog.length > 0  ","nodeType":"DECISION"},"workflowContext":{"listOptionIds":["workOrderTaskLogEvents","workOrderTaskLogDetails","incidentType","cancellationReasons","318T9O8KGV"]},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"processDataForWorkOrderLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderLogWF"}],"contextChangePermitted":true,"name":"processDataForWorkOrderLog","description":"processDataForWorkOrderLog","processRule":"{contextVar.workOrderLog = [{ 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': 'taskCreated', 'workOrderId': contextVar.workOrderId, 'details': contextVar.id }];}","nodeType":"PROCESS","jsEngine":"es6"},"fetchLatestTaskData":{"filter":"{$workOrderTask.id} = {@id}","models":["workOrderTask","taskType"],"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfCrewTask"}],"columns":{"workOrderTaskCancellationReason":"workOrderTask.cancellationReason","workOrderTaskIncidentDetails":"workOrderTask.incidentDetails","workOrderTaskAssignedToCrewId":"workOrderTask.assignedToCrewId","taskTypeCrewTask":"taskType.crewTask"},"name":"fetchLatestTaskData","description":"fetchLatestTaskData","inputVarMap":{"id":"id"},"outputVarMap":{"data":"latestTaskData"},"nodeType":"QUERY"},"processTaskLogData":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfDataPresentForInsertingWorkOrderTaskLog"}],"contextChangePermitted":true,"name":"processTaskLogData","description":"processTaskLogData","processRule":"{ function getUserName(userId, userData) { let userName; for (var i = 0; i < userData.length; i++) { if (userData[i].userId == userId) { userName = userData[i].userName; break; } } return userName; } function getTemplate(key, localizedData) { let template; for (var i = 0; i < localizedData.length; i++) { if (localizedData[i].listOptionAnswerId == key) { template = localizedData[i].listOptionAnswerAnswerOptionText; break; } } return template; } function compare(a, b) { let isChanged = false; if (a.length !== b.length) { isChanged = true; } else { let services = []; a.forEach(element => { services.push(element.catalogId); }); for (i = 0; i < b.length; i++) { if (services.indexOf(b[i].catalogId) == -1) { isChanged = true; break; } } } return isChanged; } contextVar.eventType = contextVar.data.eventType; contextVar.workOrderTaskLog = []; var isServicesChanged = false; var localizedKeys = {}; if (typeof contextVar.localizedData !== 'undefined' && contextVar.localizedData !== '') { contextVar.localizedData.forEach(function(element) { localizedKeys[element.listOptionAnswerId] = element.listOptionAnswerAnswerOptionText; }); } if (typeof localizedKeys[contextVar.eventType] !== 'undefined' || contextVar.eventType === 'workOrderTaskUpdated') { const logData = contextVar.taskLogData[0].taskLogLog ? contextVar.taskLogData[0].taskLogLog : [{}]; if (contextVar.eventType === 'workOrderTaskUpdated') { contextVar.assignedToUserId = contextVar.assignedToUserId ? contextVar.assignedToUserId : ''; contextVar.scheduledDate = contextVar.scheduledDate ? contextVar.scheduledDate : ''; if (typeof logData[0].scheduledDate == 'undefined') { logData[0].scheduledDate = ''; } const isDurationChanged = contextVar.estimatedDuration == logData[0].estimatedDuration ? false : true; const isScheduledDateChanged = contextVar.scheduledDate === logData[0].scheduledDate ? false : true; if (contextVar.services.length == 0) { contextVar.services.push({ 'catalogId': '-' }) } if (logData[0].services.length == 0) { logData[0].services.push({ 'catalogId': '-' }) } isServicesChanged = compare(contextVar.services, logData[0].services); if (isDurationChanged) { let obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': 'workOrderTaskEdited', 'workOrderTaskId': contextVar.id, 'details': getTemplate('estimatedDurationUpdated', contextVar.localizedData) }; contextVar.workOrderTaskLog.push(obj); } if (isScheduledDateChanged) { let obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': 'workOrderTaskEdited', 'workOrderTaskId': contextVar.id, 'details': getTemplate('scheduleUpdated', contextVar.localizedData) }; contextVar.workOrderTaskLog.push(obj); } if (isServicesChanged) { let obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': 'workOrderTaskEdited', 'workOrderTaskId': contextVar.id, 'details': getTemplate('servicesUpdated', contextVar.localizedData) }; contextVar.workOrderTaskLog.push(obj); } } else { let obj = {}; if (contextVar.eventType !== logData[0].eventType) { if (contextVar.eventType === 'workOrderTaskAssigned' || contextVar.eventType === 'workOrderTaskScheduled') { contextVar.assignedToUserId = contextVar.assignedToUserId ? contextVar.assignedToUserId : ''; if (contextVar.latestTaskData[0].taskTypeCrewTask) { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': contextVar.crewData[0] ? contextVar.crewData[0].crewName : '-' }; } else { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': getUserName(contextVar.assignedToUserId, contextVar.userData) }; } } else if (contextVar.eventType == 'workOrderTaskUnassigned') { if (contextVar.latestTaskData[0].taskTypeCrewTask) { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': contextVar.crewData[0] ? contextVar.crewData[0].crewName : '-' }; } else { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': getUserName(logData[0].assignedToUserId, contextVar.userData) }; } } else if (contextVar.eventType == 'workOrderTaskDiscontinued' || contextVar.eventType == 'workOrderTaskDelayed' || contextVar.eventType == 'workOrderTaskIncident') { let incidentArrayLength = contextVar.latestTaskData[0].workOrderTaskIncidentDetails.length; obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': getTemplate(contextVar.latestTaskData[0].workOrderTaskIncidentDetails[incidentArrayLength - 1].incidentTypeValue, contextVar.localizedData) }; } else if (contextVar.eventType == 'workOrderTaskCancelled') { let details = contextVar.latestTaskData[0].workOrderTaskCancellationReason; obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': details }; } else if (contextVar.eventType == 'workOrderTaskRejected' || contextVar.eventType == 'workOrderTaskReopened') { let listOptionId = contextVar.taskReviewLogData[0].taskReviewLogListOptionAnswerId; obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': getTemplate(listOptionId, contextVar.localizedData) }; } else { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': '-' }; } contextVar.workOrderTaskLog.push(obj); } else if (contextVar.eventType === 'workOrderTaskAssigned' || contextVar.eventType === 'workOrderTaskScheduled') { contextVar.assignedToUserId = contextVar.assignedToUserId ? contextVar.assignedToUserId : ''; if (contextVar.latestTaskData[0].taskTypeCrewTask) { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': contextVar.crewData[0] ? contextVar.crewData[0].crewName : '-' }; } else { obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': getUserName(contextVar.assignedToUserId, contextVar.userData) }; } contextVar.workOrderTaskLog.push(obj); } } } if (typeof localizedKeys[contextVar.eventType] !== 'undefined' || contextVar.eventType === 'workOrderTaskCompletedInAnow') { const logData = contextVar.taskLogData[0].taskLogLog ? contextVar.taskLogData[0].taskLogLog : [{}]; if (contextVar.eventType === 'workOrderTaskCompletedInAnow') { contextVar.assignedToUserId = contextVar.assignedToUserId ? contextVar.assignedToUserId : ''; contextVar.scheduledDate = contextVar.scheduledDate ? contextVar.scheduledDate : ''; if (typeof logData[0].scheduledDate == 'undefined') { logData[0].scheduledDate = ''; } const isDurationChanged = contextVar.estimatedDuration == logData[0].estimatedDuration ? false : true; const isScheduledDateChanged = contextVar.scheduledDate === logData[0].scheduledDate ? false : true; obj = { 'logDate': contextVar.modifiedDate, 'loggedByUserId': contextVar.modifiedByUser, 'event': contextVar.eventType, 'workOrderTaskId': contextVar.id, 'details': '-' }; contextVar.workOrderTaskLog.push(obj); } } }","nodeType":"PROCESS","jsEngine":"es6"},"fetchUserData":{"models":["User"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchLatestTaskData"}],"columns":{"userName":"User.name","userId":"User.id"},"name":"fetchUserData","description":"fetchUserData","inputVarMap":{},"outputVarMap":{"data":"userData"},"nodeType":"QUERY"}}