{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"processAimlRecsId"}],"multirecord":true,"name":"insertIntoAimlRecs","description":"insertIntoAimlRecs","inputVarMap":{"recommendationData":"data"},"id":"insertIntoAimlRecs","outputVarMap":{"data":"recommendationDataAimlRecs"},"nodeType":"MODEL","operation":1},"callWorkOrderTaskRecommendationModelWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"workOrderTaskRecommendationModelWF","name":"callWorkOrderTaskRecommendationModelWF","description":"callWorkOrderTaskRecommendationModelWF","inputVarMap":{"workOrderTaskRecommendation":"workOrderTaskRecommendation"},"outputVarMap":{},"nodeType":"WORKFLOW"},"workflowContext":{"payload":{"aimlRecTypeId":"longRunningTaskAlert","priorityModel":"AimlRecs","expired":false,"addDecisionToTraining":false,"rejected":false,"notified":false,"recommendContext":{},"accepted":false,"priority":10,"superseded":false,"done":false,"status":"recommended"},"recommendationData":[]},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processRecommendationData"}],"name":"start","description":"start","nodeType":"START"},"processAimlRecsId":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderTaskRecommendationModelWF"}],"contextChangePermitted":true,"name":"processAimlRecsId","description":"processAimlRecsId","processRule":"{ if (Array.isArray(contextVar.recommendationDataAimlRecs) && contextVar.recommendationDataAimlRecs.length > 0) { for (var i = 0; i < contextVar.recommendationDataAimlRecs.length; i++) { contextVar.workOrderTaskRecommendation[i].aimlRecsId = contextVar.recommendationDataAimlRecs[i].id; } } }","nodeType":"PROCESS","jsEngine":"es6"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"workflowNodes":["start","processRecommendationData","insertIntoAimlRecs","processAimlRecsId","callWorkOrderTaskRecommendationModelWF","end"],"processRecommendationData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"processRecommendationData","description":"processRecommendationData","processRule":"{ contextVar.workOrderTaskRecommendation = []; contextVar.workOrderTaskData.forEach(element => { var reccData = Object.assign({}, contextVar.payload); reccData.recommendation = element.workOrderTaskId + ' (' + element.userName + ') has passed its scheduled end time and is still in progress. Accept this recommendation to extend the task duration and reassign impacted tasks.'; reccData.recommendContext = { 'workOrderTask': { 'scheduledDate': element.workOrderTaskStartDate, 'taskId': element.workOrderTaskId, 'duration': element.workOrderTaskDuration, 'assignee': element.assignee, 'dueDate': element.workOrderTaskDueDate }, 'statusIds': contextVar.statusIds, 'currentDate': contextVar.currentDate }; contextVar.recommendationData.push(reccData); contextVar.workOrderTaskRecommendation.push({ id: '', sendFurtherRecommendation: false, workOrderTaskId: element.workOrderTaskId, recommendationType: 'longRunningTask', aimlRecsId: '' }); }); }","nodeType":"PROCESS","jsEngine":"es6"}}