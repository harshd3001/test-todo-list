{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"multirecord":true,"name":"insertAimlRecs","description":"insertAimlRecs","inputVarMap":{"recommendations":"data"},"id":"insertIntoAimlRecs","outputVarMap":{"data":"retAimlId"},"nodeType":"MODEL","operation":4},"workflowContext":{"criticalTaskFailedRecommendationText":"Critical task {@taskIdToBeReplaced} could not be assigned since no technicians are available. The task has been moved to Open status and will need to be manually scheduled and assigned.","payload":{"priorityModel":"AimlRecs","expired":false,"addDecisionToTraining":false,"aimlRecTypeId":"criticalPriorityTaskAssignmentFailed","rejected":false,"notified":false,"recommendContext":{},"accepted":false,"priority":10,"superseded":false,"done":false,"status":"recommended"},"recommendations":[]},"formRecommendationData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertIntoAimlRecs"}],"contextChangePermitted":true,"name":"formRecommendationData","description":"formRecommendationData","processRule":"{ let payload = JSON.parse(JSON.stringify(contextVar.payload)); if (typeof contextVar.openJobs !== 'undefined' && contextVar.openJobs.length > 0) { contextVar.openJobs.forEach((job) => { payload.recommendation = contextVar.criticalTaskFailedRecommendationText.replace('{@taskIdToBeReplaced}', job); contextVar.recommendations.push(payload); }); } }","nodeType":"PROCESS","jsEngine":"es6"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"formRecommendationData"}],"name":"start","description":"start","nodeType":"START"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"workflowNodes":["start","formRecommendationData","insertIntoAimlRecs","end"]}