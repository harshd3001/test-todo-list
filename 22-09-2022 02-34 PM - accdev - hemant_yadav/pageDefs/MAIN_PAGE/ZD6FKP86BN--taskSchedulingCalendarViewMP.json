{"columns":[{"filterable":true,"field":"name","text":"@lang.['navT','Technicians']","sortable":true,"type":"text"}],"autoRefreshTime":5,"customErrorMessage":{"workflowUpdateErrorMsg":"@lang.['workflowUpdateError',\"Update workflow Failed Test\"]","technicianUnavailableErrorMsg":"@lang.['technicianUnavailableError',\" technician Unavaialable Test msg\"]","pastDateErrorMsg":"@lang.['cmttpd','Cannot move task to past date.']"},"dataForTaskList":{"dataSourceId":"process/start","sourceType":"api","dataToBeSent":{"inputVar":{},"processId":"fetchTasksListForCalendar","apiResponseFormat":true,"contextVar":{"filter":"( {$statusName} like '%%' || {$workOrderId} like '%%' || {$workOrderTaskId} like '%%' || {$taskTypeName} like '%%' || {$siteName} like '%%' || {$regionName} like '%%' )","statusFilter":["workOrderTaskOpen","workOrderTaskReopened"],"timezoneOffset":"@pageContext.timezoneOffset","orderBy":"","getCount":true,"selectedUserId":"@pageContext.id"},"apiResponseObject":"openTasksList"}},"dropSchedulerTaskAction":["@actions.setTaskData","@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskDueDate","@actions.decisionActionForTaskStatus"],"actionOnLoad":["@actions.getTimeZone"],"dataSourceId":"process/start","jslib":{"isPastTimeFrame":"function(pageContext) { const currentDate = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, ''); const selectedDate = new Date(pageContext.startDate).toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, ''); if (selectedDate > currentDate) { return true } else { return false } }","showForInProgressStatus":"function(pageContext){return !(pageContext.statusId==='workOrderTaskInProgress'||pageContext.statusId==='workOrderTaskInTransit'||pageContext.statusId==='workOrderTaskIncident'||pageContext.statusId==='workOrderTaskDelayed');}","showForDispatchedStatus":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskDispatched'){return true;}return false}","showForPendingReviewStatus":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskPendingReview' ){return true;}return false}","invalidTaskStatusMessage":"function(pageContext) { if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { if (pageContext.workOrderTaskStatusId === 'workOrderTaskInProgress' || pageContext.workOrderTaskStatusId === 'workOrderTaskInTransit' || pageContext.workOrderTaskStatusId === 'workOrderTaskDelayed' || pageContext.workOrderTaskStatusId === 'workOrderTaskDiscontinued' || pageContext.workOrderTaskStatusId === 'workOrderTaskPendingReview' || pageContext.workOrderTaskStatusId === 'workOrderTaskIncident') { return ('@lang.[\"ttcbraiiip\",\"The task cannot be rescheduled as it is in progress.\"]'); } else if (pageContext.workOrderTaskStatusId === 'workOrderTaskCompleted') { return ('@lang.[\"ttcbraiic\",\"The task cannot be rescheduled as it is completed.\"]'); } else { return ('@lang.[\"ttcbr\",\"The task cannot be rescheduled.\"]'); } } }","isActualTimeHidden":"function(pageContext){ return true;/* remove the line before this comment when the UTC to local time fixes are done by platform*/ if(pageContext.statusId !== 'workOrderTaskCompleted' && pageContext.statusId !== 'workOrderTaskPendingReview'){return true;}return false}","showForCompletedStatus":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskCompleted'){return true;}return false}","showForDiscontinuedReviewStatus":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskDiscontinued'){return true;}return false}","isAlertHidden":"function(pageContext){ return !pageContext.taskAtRisk; }","isDispatchButtonHidden":"function(pageContext) { let currentDate = new Date(); var offset = currentDate.getTimezoneOffset(); var minutes = currentDate.getMinutes(); currentDate.setMinutes(minutes + (offset)); let selectedDate = new Date(pageContext.startDate); var offset = selectedDate.getTimezoneOffset(); var minutes = selectedDate.getMinutes(); selectedDate.setMinutes(minutes + (offset)); if (selectedDate.getTime() < currentDate.getTime() || pageContext.statusId !== 'workOrderTaskScheduled' || (typeof pageContext.crewTask !== 'undefined' && pageContext.crewTask)) { return true; } else { return false; } }","isWarningHidden":"function(pageContext){ if(typeof pageContext.alert === 'undefined' || pageContext.alert === ''){return true;}return false}","getCustomHeader":"function(pageContext){ return pageContext.tooltipHeader; }","isFutureTimeFrame":"function(pageContext) { const currentDate = new Date().toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, ''); const selectedDate = new Date(pageContext.startDate).toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, ''); if (selectedDate < currentDate) { return true } else { return false } }","showForScheduledStatus":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskScheduled'){return true;}return false}","isRegionHidden":"function(pageContext){ if(pageContext.statusId !== 'workOrderTaskScheduled' || pageContext.statusId !== 'workOrderTaskDispatched'){return true;}return false}"},"id":"taskSchedulingCalendar","stripeFeature":false,"hoverTooltip":[{"staticValue":"Not Completed Yet","hidden":"@jslib.isAlertHidden","icon":"@iconlib.CornWarning","type":"alert","value":"alert"},{"label":"","type":"text","value":"tooltipHeader"},{"icon":"@iconlib.ActionsClockPurple","label":"@lang.['sd','Start Date']","type":"time","value":"startDate"},{"icon":"@iconlib.ActionsClockPurple","label":"@lang.['ed','End Date']","type":"time","value":"endDate"}],"searchKeys":["statusName","workOrderTaskId","taskTypeName","priorityName"],"taskBarClickAction":{"name":"edit","actionOnClick":["@actions.openFilterTechniciansSP"]},"componentType":"DispatchSchedulerPro","customTooltip":{"task":{"footer":[{"buttonType":"primary","hidden":"@jslib.isDispatchButtonHidden","actionOnClick":["@actions.setTaskStatusToDispatched","@actions.fetchTaskDependencyDataForDispatch","@actions.processDependencyDataForDispatch","@actions.fetchTechnicianOnCrew","@actions.decisionActionForTechnicianOnCrew","@actions.refreshSchedulerPro"],"type":"button","title":"@lang.['dtt1','Dispatch to Technician']"},{"buttonType":"primary","hidden":"@jslib.showForScheduledStatus","actionOnClick":["@actions.setInitialLoad","@actions.setActionOpenTask","@actions.openScheduleAndAssignSidePanel"],"type":"button","title":"@lang.['vtd','View Task Details']"},{"buttonType":"primary","hidden":"@jslib.showForDispatchedStatus","actionOnClick":["@actions.setInitialLoad","@actions.setActionDispatch","@actions.openScheduleAndAssignSidePanel"],"type":"button","title":"@lang.['vtd','View Task Details']"},{"buttonType":"primary","hidden":"@jslib.showForInProgressStatus","actionOnClick":["@actions.setInitialLoad","@actions.setActionView","@actions.openScheduleAndAssignSidePanel"],"type":"button","title":"@lang.['vtd','View Task Details']"},{"buttonType":"primary","hidden":"@jslib.showForDiscontinuedReviewStatus","actionOnClick":["@actions.setActionPendingReview","@actions.openIncidentReviewSidePanel"],"type":"button","title":"@lang.['ir','Incident Review']"},{"buttonType":"primary","hidden":"@jslib.showForPendingReviewStatus","actionOnClick":["@actions.setActionPendingReview","@actions.setPendingReviewTaskPageId","@actions.openTaskViewSidePanel"],"type":"button","title":"@lang.['tr1','Task Review']"},{"buttonType":"primary","hidden":"@jslib.showForCompletedStatus","actionOnClick":["@actions.setActionCompleted","@actions.setCompletedTaskPageId","@actions.openTaskViewSidePanel"],"type":"button","title":"@lang.['vtd','View Task Details']"}],"header":{"title":"@jslib.getCustomHeader"},"body":[{"hidden":"@jslib.isWarningHidden","type":"alert","value":"alert"},{"statusColor":"statusColor","label":"@lang.['ts2','Task Status']","type":"status","value":"status"},{"label":"@lang.['c16','Customer']","type":"text","value":"customerCompanyName"},{"label":"@lang.['cs','Customer Site']","type":"text","value":"siteName"},{"label":"@lang.['r1','Region']","type":"text","value":"regionName"},{"hidden":true,"showStartDate":true,"startTime":"scheduledStartTime","label":"@lang.['sset','Scheduled Start & End Time']","endTime":"scheduledEndTime","type":"timeSlot"},{"hidden":"@jslib.isActualTimeHidden","showStartDate":true,"startTime":"actualStartTime","label":"@lang.['aset','Actual Start & End Time']","endTime":"actualEndTime","type":"timeSlot"}]}},"gridColumns":[{"filterable":true,"field":"workOrderTaskId","text":"@lang.['navOT','Open Tasks']","sortable":true,"subField":"taskTypeName","type":"taskInfo"},{"filterable":true,"field":"priority","text":"@lang.['priority','Priority']","sortable":true,"type":"status"},{"field":"workOrderTaskAppointmentWindow","options":{"dateRangeType":"dateTime","sortable":true,"type":"dateRange","showLabel":true},"text":"@lang.['navAW','Appointment Window']","sortable":true},{"field":"deadline","options":{"type":"dateTime"},"text":"@lang.['d4','Deadline']","sortable":true},{"filterable":true,"field":"customer","text":"@lang.['ccs','Customer/Customer Site']","sortable":true,"subField":"siteName","type":"taskInfo"}],"autoRefresh":true,"weekViewHidden":false,"enableSchedulerProFilter":true,"filterIconClick":["@actions.openFilterTechniciansSP"],"timelineView":"day","dataToBeSent":{"processId":"processTaskSchedulingCalendarDataForBryntum","apiResponseFormat":true,"contextVar":{"filter":"( {$status} like '%%' || {$workOrderTaskId} like '%%' || {$taskTypeName} like '%%' || {$ZPriorityName} like '%%')","assignedToUserId":"bryntumCalendar"},"apiResponseObject":"bryntumSchedulerData"},"endHour":"23:59","fetchDataOnDateChange":true,"dragAllow":true,"sourceType":"api","allowOverlap":true,"startHour":"00:00","monthViewHidden":false,"header":{"subHeaderText":"@lang.['navT','Technicians']","headerText":"@lang.['c8','Calendar']"},"dropGridTaskAction":["@actions.setTaskData","@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskDueDate","@actions.decisionActionForTaskStatus"],"enableDragAndDropFromGrid":true,"actions":[{"name":"writeLogScheduler","type":"script","actionDef":"function(pageContext){console.log('Drag and Drop within the Grid ---> ' + JSON.stringify(pageContext))}"},{"name":"writeLogGrid","type":"script","actionDef":"function(pageContext){console.log('Drag and Drop from the Open Task List ---> ' +JSON.stringify(pageContext))}"},{"name":"refreshScheduler","type":"refreshScheduler"},{"name":"refreshSchedulerPro","schedulerId":["taskSchedulingCalendar"],"type":"refreshSchedulerPro"},{"name":"getTimeZone","type":"script","actionDef":"function(pageContext){pageContext.timezoneOffset=new Date().getTimezoneOffset();}"},{"name":"openTaskReviewSidePanel","type":"openPanel","pageId":"PORTE48LUB"},{"name":"openWorkforceTechnicianSP","type":"openPanel","pageId":"PFFMZV6SKT"},{"name":"openFilterTechniciansSP","type":"openPanel","pageId":"I0QB1R8NCE"},{"name":"openAllOpenTaksSP","type":"openPanel","pageId":"Q9RC6198JY"},{"name":"setViewTaskParams","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskAction='completed'; pageContext.subAction= 'calendarViewTask';}"},{"name":"setInitialLoad","type":"script","actionDef":"function(pageContext){pageContext.initialLoad=true;pageContext.statusName=pageContext.status;pageContext.status=pageContext.statusId;}"},{"name":"setActionOpenTask","type":"script","actionDef":"function(pageContext){pageContext.action='openTask';}"},{"name":"openScheduleAndAssignSidePanel","type":"openPanel","pageId":"NTX9P88A3P"},{"name":"openIncidentReviewSidePanel","type":"openPanel","pageId":"FLHOCXCBSP"},{"name":"setActionDispatch","type":"script","actionDef":"function(pageContext){pageContext.action='dispatch';}"},{"name":"setActionView","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskAction='view';}"},{"name":"setActionPendingReview","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskAction='pendingReview';pageContext.status=pageContext.statusId;}"},{"name":"setActionCompleted","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskAction='completed';pageContext.actionHeader = 'completed';pageContext.status=pageContext.statusId;}"},{"name":"openTaskViewSidePanel","type":"openPanel","pageId":"@pageContext.workOrderTaskPageId"},{"name":"setCompletedTaskPageId","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskPageId=pageContext.resultWebPageId;}"},{"name":"setPendingReviewTaskPageId","type":"script","actionDef":"function(pageContext){pageContext.workOrderTaskPageId=pageContext.resultWebPageId;}"},{"name":"closePanel","type":"closePanel"},{"name":"fetchTechnicianOnCrew","outputVarMap":{"data":"@pageContext.techCrewData"},"type":"query","actionDef":{"filter":"((({$crew.startDate} BETWEEN {@startDate} AND {@endDate}) OR ({$crew.endDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$crew.startDate} AND {$crew.endDate}) OR ({@endDate} BETWEEN {$crew.startDate} AND {$crew.endDate})) AND {$workforceCrew.statusId}=\"workforceCrewOnCrew\" AND {$crew.statusId}!=\"crewDeactivated\")AND {$workforceCrew.workforceUserId} ={@workforceUserId}","models":["workforceCrew","crew"],"inputs":{"endDate":"@pageContext.scheduledEndTime","workforceUserId":"@pageContext.resourceId","startDate":"@pageContext.scheduledStartTime"},"columns":{"crewId":"workforceCrew.crewId"},"links":{"workforceCrew":"crew"}}},{"falseStep":["@actions.openModalInvalidTaskStatus"],"trueStep":["@actions.decisionActionForTaskDeadline"],"name":"decisionActionForTaskStatus","type":"decision","actionDef":"function(pageContext) { if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { if (typeof pageContext.workOrderTaskStatusId !== 'undefined' && (pageContext.workOrderTaskStatusId === 'workOrderTaskOpen' || pageContext.workOrderTaskStatusId === 'workOrderTaskScheduled' || pageContext.workOrderTaskStatusId === 'workOrderTaskDispatched' || pageContext.workOrderTaskStatusId === 'workOrderTaskReopened')) { return true; } else { return false; } } else { return false; } }"},{"falseStep":["@actions.openModalTaskDeadline"],"trueStep":["@actions.appointmentWindowDecision"],"name":"decisionActionForTaskDeadline","type":"decision","actionDef":"function(pageContext) { let returnFlag = false; if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { if (typeof pageContext.workOrderDeadline !== 'undefined' && pageContext.workOrderDeadline !== '' && pageContext.workOrderDeadline !== null) { if ((typeof pageContext.workOrderTaskDroppedSchedule !== 'undefined' && pageContext.workOrderTaskDroppedSchedule !== '' && pageContext.workOrderTaskDroppedSchedule !== null)) { if (new Date(pageContext.workOrderTaskDroppedSchedule) < new Date(pageContext.workOrderDeadline)) { returnFlag = true; } } } else { returnFlag = true; } } return returnFlag; }"},{"subTitle":"@jslib.invalidTaskStatusMessage","name":"openModalInvalidTaskStatus","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"subTitle":"@lang.['tstiatd','The scheduled time is after the deadline.']","name":"openModalTaskDeadline","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"subTitle":"@lang.['tatinetwottatanitsw','The assigned technician is not eligible to work on the task as they are not in the same workgroup.']","name":"openModalInvalidWorkGroupTask","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"falseStep":["@actions.crewTaskDecision"],"trueStep":["@actions.openModalOverrideAppointmentWindow"],"name":"appointmentWindowDecision","type":"decision","actionDef":"function(pageContext) { let returnFlag = false; if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { if (typeof pageContext.workOrderTaskDroppedSchedule !== 'undefined' && pageContext.workOrderTaskDroppedSchedule !== '' && pageContext.workOrderTaskDroppedSchedule !== null) { } if (typeof pageContext.workOrderTaskAppointmentBasedFlag !== 'undefined' && pageContext.workOrderTaskAppointmentBasedFlag !== '' && pageContext.workOrderTaskAppointmentBasedFlag === true) { if ((new Date(pageContext.workOrderTaskDroppedSchedule) < new Date(pageContext.workOrderTaskAppointmentWindowStartDate)) || (new Date(pageContext.workOrderTaskDroppedSchedule) > new Date(pageContext.workOrderTaskAppointmentWindowEndDate))) { returnFlag = true; } } } return returnFlag; }"},{"falseStep":["@actions.checkWorkOrderMultiBreakdownTask"],"trueStep":["@actions.openModalCrewTask"],"name":"crewTaskDecision","type":"decision","actionDef":"function(pageContext){ if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { return pageContext.taskTypeCrewTask;} }"},{"subTitle":"@lang.['tstfotapw','The scheduled time falls outside the appointment window.']","name":"openModalOverrideAppointmentWindow","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.crewTaskDecision"],"type":"button","title":"@lang.['proceed','Proceed']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"subTitle":"@lang.['ctcbsudad','Crew tasks cannot be scheduled using drag-and-drop.']","name":"openModalCrewTask","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"subTitle":"@lang.['mdtcbsudad','Multi-day tasks cannot be scheduled using drag-and-drop.']","name":"openModalMultiBreakdownTask","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"falseStep":["@actions.invokeWorkGroupValidAPI","@actions.processValidityWorkGroupData","@actions.workGroupValidityDecison"],"trueStep":["@actions.openModalMultiBreakdownTask"],"name":"checkWorkOrderMultiBreakdownTask","type":"decision","actionDef":"function(pageContext){ if (typeof pageContext.task !== 'undefined' && pageContext.task !== '') { return pageContext.multiBreakdownTaskFlag;} }"},{"endPoint":"process/start","name":"invokeWorkGroupValidAPI","outputVarMap":{"data":"@pageContext.validWorkGroupData"},"type":"api","actionDef":{"data":[{"processId":"taskSchedulingAndAssignFetchEligibleTechniciansWF","apiResponseFormat":true,"contextVar":{"workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"technicianList"}]}},{"falseStep":["@actions.setDataForAvailibilityAPI","@actions.fetchAvailibilityData","@actions.availibilityDecision"],"trueStep":["@actions.openModalInvalidWorkGroupTask"],"name":"workGroupValidityDecison","type":"decision","actionDef":"function(pageContext) { if (typeof pageContext.invalidWorkGroup !== 'undefined' && pageContext.invalidWorkGroup !== '') { return pageContext.invalidWorkGroup; } }"},{"name":"setDataForAvailibilityAPI","type":"script","actionDef":"function(pageContext) { function toDateString(date, setDateFlag, incrementDateFlag) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { if (setDateFlag === true) { date.setHours(0, 0, 0); if (incrementDateFlag === true) { let incDate = date.getDate() + 1; date.setDate(incDate); } dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()); } else { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } } return dateString; } pageContext.technicianArray = [pageContext.workOrderTaskAssignedToUserId]; pageContext.endDayDisplayOrder = new Date(pageContext.workOrderTaskDueDate).getDay(); pageContext.startDayDisplayOrder = new Date(pageContext.workOrderTaskDroppedSchedule).getDay(); pageContext.startDateUTC = toDateString(new Date(pageContext.workOrderTaskDroppedSchedule)); pageContext.startDateFilter = toDateString(new Date(pageContext.startDateUTC), true); pageContext.endDateUTC = toDateString(new Date(pageContext.workOrderTaskDueDate)); pageContext.endDateFilter = toDateString(new Date(pageContext.startDateFilter), true, true); }"},{"endPoint":"process/start","name":"fetchAvailibilityData","outputVarMap":{"data":"@pageContext.techniciansData"},"type":"api","actionDef":{"data":[{"processId":"8EIKAE8E10","apiResponseFormat":true,"contextVar":{"technicianArray":"@pageContext.technicianArray","startDateFilter":"@pageContext.startDateFilter","endDate":"@pageContext.endDateUTC","endDateFilter":"@pageContext.endDateFilter","workOrderTaskId":"@pageContext.workOrderTaskId","endDayDisplayOrder":"@pageContext.endDayDisplayOrder","techniciansData":[{"userStatus":"Active","timezoneOffset":"@pageContext.workForceTimeZoneOffset","workforceUserId":"@pageContext.workOrderTaskAssignedToUserId","userId":"@pageContext.workOrderTaskAssignedToUserId","workforceCalendarId":"@pageContext.workForceCalendarId"}],"startDayDisplayOrder":"@pageContext.startDayDisplayOrder","startDate":"@pageContext.startDateUTC","unavailableTechs":[]},"apiResponseObject":"techniciansData"}]}},{"falseStep":["@actions.openModalOverrideTechnicianAvailability"],"trueStep":["@actions.fireProcessEventUpsertTask","@actions.refreshSchedulerPro"],"name":"availibilityDecision","type":"decision","actionDef":"function(pageContext) { let techData = pageContext.techniciansData; return (Array.isArray(techData) && techData[0].isAvailable); }"},{"falseStep":["@actions.openModalOverrideDifferentTechnician"],"trueStep":["@actions.openModalOverrideTechnicianAvailability"],"name":"sameTechDecision","type":"decision","actionDef":"function(pageContext) { if(typeof pageContext.workOrderTaskAssignedPrevUserId === 'undefined' || pageContext.workOrderTaskAssignedPrevUserId === ''){ return true; }else{ return (pageContext.workOrderTaskAssignedPrevUserId === pageContext.workOrderTaskAssignedToUserId); } }"},{"subTitle":"@lang.['ttinadttdywtp','The technician is not available during this time, do you want to proceed?']","name":"openModalOverrideTechnicianAvailability","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.fireProcessEventUpsertTask","@actions.refreshSchedulerPro"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"subTitle":"@lang.['ttibdttdywtp','The technician is busy during this time, do you want to proceed?']","name":"openModalOverrideDifferentTechnician","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.fireProcessEventUpsertTask","@actions.refreshSchedulerPro"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['cf1','Conflict Found']"},{"falseStep":["@actions.decisionAction"],"trueStep":["@actions.openModalOverrideTechnicianOnCrew"],"name":"decisionActionForTechnicianOnCrew","type":"decision","actionDef":"function(pageContext){if(typeof pageContext.techCrewData !== 'undefined' && pageContext.techCrewData.length > 0){return true;} else { return false;}}"},{"subTitle":"@lang.['tatabtacambatotaysywtatttt','The assigned technician already belongs to a crew and may be assigned to other tasks. Are you sure you want to assign this task to them?']","name":"openModalOverrideTechnicianOnCrew","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.decisionAction"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['toc','Technician on Crew']"},{"name":"openOverrideNSP","type":"openPanel","pageId":"7EXQWZDPS8"},{"falseStep":["@actions.fireProcessEventUpsertTask","@actions.refreshSchedulerPro","@actions.closePanel"],"trueStep":["@actions.openModalOverrideDependency"],"name":"decisionAction","type":"decision","actionDef":"function(pageContext){return pageContext.dependencyCheck}"},{"subTitle":"@lang.['dspwftpttctdootp','Dependency still pending. Wait for the preceding task to clear the dependency or override to proceed.']","name":"openModalOverrideDependency","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.openOverrideNSP","@actions.closeModal"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['dt3','Dispatch Task']"},{"name":"closeModal","type":"closeModal"},{"name":"openOverrideNSP","type":"openPanel","pageId":"7EXQWZDPS8"},{"name":"setTaskData","type":"script","actionDef":"function(pageContext) { function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; } try { if (typeof pageContext.task !== 'undefined' && pageContext.task !== '' && pageContext.task !== null) { pageContext.workOrderTaskId = pageContext.task.workOrderTaskId; pageContext.workOrderId = pageContext.task.workOrderId; pageContext.workOrderTaskDroppedSchedule = pageContext.task.startDate; /*pageContext.workOrderTaskDroppedSchedule = new Date(pageContext.workOrderTaskDroppedSchedule).toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, '');*/ pageContext.workOrderTaskDroppedSchedule = toDateString(new Date(pageContext.workOrderTaskDroppedSchedule)); if (typeof pageContext.task.origStart !== 'undefined' && pageContext.task.origStart !== '' && pageContext.task.origStart !== null) { pageContext.inititalWorkOrderTaskDroppedSchedule = pageContext.task.origStart; /*pageContext.inititalWorkOrderTaskDroppedSchedule = new Date(pageContext.inititalWorkOrderTaskDroppedSchedule).toISOString().replace(/T/, ' ').replace(/\\..+/, '').replace(/Z/, '');*/ pageContext.inititalWorkOrderTaskDroppedSchedule = toDateString(new Date(pageContext.inititalWorkOrderTaskDroppedSchedule)); } pageContext.workOrderDeadline = pageContext.task.deadline; pageContext.workOrderTaskAppointmentBasedFlag = pageContext.task.workOrderTaskAppointmentBasedFlag; pageContext.workOrderTaskAppointmentWindowStartDate = pageContext.task.workOrderTaskAppointmentWindowStartDate; pageContext.workOrderTaskAppointmentWindowEndDate = pageContext.task.workOrderTaskAppointmentWindowEndDate; pageContext.taskTypeCrewTask = pageContext.task.taskTypeCrewTask; pageContext.multiBreakdownTaskFlag = pageContext.task.multiBreakdownTaskFlag; pageContext.workOrderTaskStatusId = pageContext.task.statusId; pageContext.workOrderTaskEstimatedDurationMinutes = pageContext.task.workOrderTaskEstimatedDurationMinutes; pageContext.workOrderTaskEstimatedDuration = pageContext.task.workOrderTaskEstimatedDuration; pageContext.siteName = pageContext.task.siteName; pageContext.customerId = pageContext.task.customerId; pageContext.workOrderPriority = pageContext.task.priority; pageContext.viewTravelStatus = pageContext.task.viewTravelStatus; /*pageContext.initialWorkOrderTaskScheduleBreakdown = pageContext.task.initialWorkOrderTaskScheduleBreakdown; pageContext.initialTaskScheduleMultipleBreakdown = Array.from(pageContext.initialWorkOrderTaskScheduleBreakdown); */ pageContext.workOrderTaskAction = ''; pageContext.statusId = 'workOrderTaskScheduled'; pageContext.eventType = 'workOrderTaskScheduled'; pageContext.subAction = 'upsertWorkOrderTask'; } if (typeof pageContext.resource !== 'undefined' && pageContext.resource !== '' && pageContext.resource !== null) { pageContext.workOrderTaskAssignedToUserId = pageContext.resource.id; pageContext.workForceTimeZoneOffset = pageContext.resource.timezoneOffset; pageContext.workForceCalendarId = pageContext.resource.workforceCalendarId; } if (typeof pageContext.newResource !== 'undefined' && pageContext.newResource !== '' && pageContext.newResource !== null) { pageContext.workOrderTaskAssignedToUserId = pageContext.newResource.id; pageContext.workForceTimeZoneOffset = pageContext.newResource.timezoneOffset; pageContext.workForceCalendarId = pageContext.newResource.workforceCalendarId; } if (typeof pageContext.prevResource !== 'undefined' && pageContext.prevResource !== '' && pageContext.prevResource !== null) { pageContext.workOrderTaskAssignedPrevUserId = pageContext.prevResource.id; } } catch (error) { console.log(error); } }"},{"endPoint":"process/start","name":"fetchTaskDependencyDataForDispatch","outputVarMap":{"data":"@pageContext.dependencyCheckData"},"type":"api","actionDef":{"data":[{"processId":"taskSchedulingTaskDependencyCheckWF","contextVar":{"dependentTaskStatusId":"@pageContext.statusId","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"}}]}},{"name":"processDependencyDataForDispatch","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.dependencyCheckData !== 'undefined' && pageContext.dependencyCheckData !== '') {pageContext.dependencyCheck = pageContext.dependencyCheckData[0].outputVar.dependencyCheck; } }"},{"name":"setTaskStatusToDispatched","type":"script","actionDef":"function(pageContext){pageContext.statusId = 'workOrderTaskDispatched'; pageContext.eventType = 'workOrderTaskDispatched'; pageContext.workOrderTaskAssignedToUserId = pageContext.userId;}"},{"name":"processValidityWorkGroupData","type":"script","actionDef":"function(pageContext) { if (typeof pageContext.validWorkGroupData !== 'undefined' && pageContext.validWorkGroupData !== '' && Array.isArray(pageContext.validWorkGroupData)) { var technicianPresent = pageContext.validWorkGroupData.find(item => item.workforceUserId === pageContext.workOrderTaskAssignedToUserId); if (typeof technicianPresent === 'undefined') { pageContext.invalidWorkGroup = true; } else { pageContext.invalidWorkGroup = false; } } }"},{"name":"addAdditionalSingledayTask","type":"script","actionDef":"function(pageContext) { pageContext.workOrderTaskEstimatedDurationMinutes = (Number(pageContext.workOrderTaskEstimatedDuration) * 60); if (typeof pageContext.workOrderTaskDroppedSchedule !== 'undefined' && pageContext.workOrderTaskDroppedSchedule !== '' && pageContext.workOrderTaskEstimatedDuration !== '' && Number(pageContext.workOrderTaskEstimatedDuration) > 0 && Number(pageContext.workOrderTaskEstimatedDuration) <= 24 && (typeof pageContext.taskScheduleMultipleBreakdown === 'undefined' || pageContext.taskScheduleMultipleBreakdown === '' || pageContext.taskScheduleMultipleBreakdown.length <= 1)) { pageContext.workOrderTaskDate = toDateString(new Date(new Date(pageContext.workOrderTaskDroppedSchedule).getTime() + (Number(pageContext.workOrderTaskEstimatedDurationMinutes) * 60000))); pageContext.taskScheduleMultipleBreakdown = []; pageContext.taskScheduleMultipleBreakdown.push({ 'duration': pageContext.workOrderTaskEstimatedDurationMinutes, 'durationInHours': pageContext.workOrderTaskEstimatedDuration, 'endDate': pageContext.workOrderTaskDate, 'startDate': pageContext.workOrderTaskDroppedSchedule }); } function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; } }"},{"name":"setWorkOrderTaskDueDate","type":"script","actionDef":"function (pageContext) { if(Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown.length > 0){ pageContext.workOrderTaskDueDate = pageContext.taskScheduleMultipleBreakdown[pageContext.taskScheduleMultipleBreakdown.length - 1].endDate }}"},{"endPoint":"event/start","name":"fireProcessEventUpsertTask","outputVarMap":{"data":"@pageContext.workFlowData"},"type":"api","actionDef":{"data":[{"eventId":"BM58GU7UNT","contextVar":{"workOrderTask":{"assignedToUserId":"@pageContext.workOrderTaskAssignedToUserId","statusId":"@pageContext.statusId","dueDate":"@pageContext.workOrderTaskDueDate","prevAssignedToUserId":"@pageContext.workOrderTaskAssignedPrevUserId","scheduledDate":"@pageContext.workOrderTaskDroppedSchedule","id":"@pageContext.workOrderTaskId","eventType":"@pageContext.eventType","estimatedDuration":"@pageContext.workOrderTaskEstimatedDurationMinutes"},"taskScheduleBreakdown":"@pageContext.taskScheduleMultipleBreakdown","workOrderTaskId":"@pageContext.workOrderTaskId","subAction":"upsertWorkOrderTask","workOrderTaskAction":"@pageContext.workOrderTaskAction"}}]}}],"dataForDragAndDrop":{"dataSourceId":"process/start","sourceType":"api","dataToBeSent":{"inputVar":{},"processId":"QIFGIU7FDJ","apiResponseFormat":true,"contextVar":{"scheduledDate":"@pageContext.startDate","id":"@pageContext.workOrderTaskId"},"apiResponseObject":"workOrderTaskId"}}}