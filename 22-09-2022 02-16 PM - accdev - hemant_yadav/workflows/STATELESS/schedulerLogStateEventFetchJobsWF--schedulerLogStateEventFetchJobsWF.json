{"areMoreJobsPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processJobsData"},{"exitPortType":"FalseStep","nodeId":"isCalledFromFirstStateEvent"}],"name":"areMoreJobsPresent","description":"areMoreJobsPresent","processRule":"typeof contextVar.taskIdList !== 'undefined' && contextVar.taskIdList.length > 0","id":"areMoreJobsPresent","nodeType":"DECISION"},"appendJobs":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreJobsPresent"}],"contextChangePermitted":true,"name":"appendJobs","description":"appendJobs","processRule":"{ if (Array.isArray(contextVar.appendJobs)) { contextVar.jobs = contextVar.jobs.concat(contextVar.appendJobs); for (const key of contextVar.appendJobs) { if (!contextVar.calendarIdArray.includes(key.calendarId)) { contextVar.calendarIdArray.push(key.calendarId); } } } }","id":"appendJobs","nodeType":"PROCESS","jsEngine":"es6"},"areJobsPresentToMoveToOpenStatus":{"connectors":[{"exitPortType":"TrueStep","nodeId":"moveTasksToOpenStatus"},{"exitPortType":"FalseStep","nodeId":"isJobsNotEmpty"}],"name":"areJobsPresentToMoveToOpenStatus","description":"areJobsPresentToMoveToOpenStatus","processRule":"typeof contextVar.moveToOpenJobs !== 'undefined' && contextVar.moveToOpenJobs.length > 0","id":"areJobsPresentToMoveToOpenStatus","nodeType":"DECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processInitialData"}],"name":"start","description":"start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"extraMsgJobsWF":"extraMsg","featureName":"featureName"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"isJobsNotEmpty":{"connectors":[{"exitPortType":"TrueStep","nodeId":"callFetchTechsAndSitesAvailabilityWF"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isJobsNotEmpty","description":"isJobsNotEmpty","processRule":"typeof contextVar.jobs !== 'undefined' && contextVar.jobs.length > 0","id":"isJobsNotEmpty","nodeType":"DECISION"},"getTaskTypeSkillData":{"models":["taskType","taskTypeSkill","skillLevel"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskTypeSkill"}],"columns":{"taskTypeId":"taskType.id","skillId":"taskTypeSkill.skillId","skillLevelRank":"skillLevel.rank","minSkillLevelId":"taskTypeSkill.minSkillLevelId"},"description":"getTaskTypeSkillData","distinct":true,"inputVarMap":{"customBatchSize":"batchSize"},"nodeType":"QUERY","filter":"{$taskType.webTask} = false AND {$taskType.crewTask} = false","name":"getTaskTypeSkillData","links":{"taskType":"taskTypeSkill","skillLevel":"taskTypeSkill"},"outputVarMap":{"data":"taskTypeSkillData"},"batchSize":"batchSize","getCount":true},"isCalledFromFirstStateEvent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"processTasksWhichDidNotGetFetched"}],"name":"isCalledFromFirstStateEvent","description":"isCalledFromFirstStateEvent","processRule":"contextVar.workflowCall === 'firstSchedulerLogStateEvent'","id":"isCalledFromFirstStateEvent","nodeType":"DECISION"},"workflowNodes":["start","processInitialData","areMoreJobsPresent","processJobsData","getJobsDetails","appendJobs","isCalledFromFirstStateEvent","isJobsNotEmpty","processTasksWhichDidNotGetFetched","areJobsPresentToMoveToOpenStatus","moveTasksToOpenStatus","callFetchTechsAndSitesAvailabilityWF","getTaskTypeSkillData","processTaskTypeSkill","logContextVar","end"],"workflowContext":{"customBatchSize":1000,"extraMsgJobsWF":"JOBS: schedulerLogStateEventFetchJobsWF call","featureName":"batchScheduler"},"processTaskTypeSkill":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"contextChangePermitted":true,"name":"processTaskTypeSkill","description":"processTaskTypeSkill","processRule":"{ var taskTypeMap = {}; if (Array.isArray(contextVar.taskTypeSkillData)) { for (let tasktype of contextVar.taskTypeSkillData) { if (typeof taskTypeMap[tasktype.taskTypeId] === 'undefined' || taskTypeMap[tasktype.taskTypeId] === '') { taskTypeMap[tasktype.taskTypeId] = []; } taskTypeMap[tasktype.taskTypeId].push(tasktype); } } contextVar.jobs.forEach(element => { element['taskTypeSkill'] = taskTypeMap[element.taskTypeId] || []; }); }","id":"appendJobs","nodeType":"PROCESS","jsEngine":"es6"},"callFetchTechsAndSitesAvailabilityWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskTypeSkillData"}],"processId":"fetchTechsAndSitesAvailabilityWF","name":"callFetchTechsAndSitesAvailabilityWF","description":"callFetchTechsAndSitesAvailabilityWF","inputVarMap":{"endDate":"endDate","jobs":"jobs","calendarIdArray":"calendarIdArray","startDate":"startDate"},"outputVarMap":{"jobs":"jobs","sites":"sites"},"nodeType":"WORKFLOW"},"processJobsData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getJobsDetails"}],"contextChangePermitted":true,"name":"processJobsData","description":"processJobsData","processRule":"{contextVar.loopArray = []; contextVar.loopArray = contextVar.taskIdList.splice(0,contextVar.customBatchSize);}","nodeType":"PROCESS"},"end":{"name":"end","description":"End","inputVarMap":{"jobs":"jobs","sites":"sites"},"outputVarMap":{"jobs":"jobs","sites":"sites"},"nodeType":"END"},"getJobsDetails":{"models":["workOrderTask","site","taskType","taskScheduleBreakdown","workOrderTaskAppointmentWindow","workOrder"],"connectors":[{"exitPortType":"NextStep","nodeId":"appendJobs"}],"havingClause":"taskScheduleBreakdownCount < 2","columns":{"assignedToUserId":"workOrderTask.assignedToUserId","workOrderTypeId":"workOrder.workOrderTypeId","slaDeadline":"workOrder.deadline","latitude":"site.latitude","estimatedTaskDuration":"workOrderTask.estimatedDuration","taskTypeMobileProcessId":"taskType.mobileProcessId","appointmentEndTime":"IF({$workOrderTask.isAppointmentBasedTask}, {$workOrderTaskAppointmentWindow.endDate}, IF({$workOrder.deadline} IS NULL, NULL, {$workOrder.deadline}))","taskTypeId":"taskType.id","plannedDate":"workOrderTask.scheduledDate","calendarId":"workOrder.calendarId","statusId":"workOrderTask.statusId","regionId":"site.regionId","appointmentStartTime":"IF({$workOrderTask.isAppointmentBasedTask}, {$workOrderTaskAppointmentWindow.startDate}, IF({$workOrder.deadline} IS NULL, NULL, {$workOrder.requestedDate}))","timezoneOffset":"site.timezoneOffset","taskScheduleBreakdownCount":"COUNT({$taskScheduleBreakdown.id})","customerId":"workOrder.customerId","siteId":"CONCAT({$workOrder.calendarId},'|',{$site.id})","taskDependency":"IF({$workOrderTask.id} IS NULL, 'none', 'none')","isAppointmentBasedTask":"workOrderTask.isAppointmentBasedTask","id":"workOrderTask.id","longitude":"site.longitude"},"orderBy":"id","description":"getJobsDetails","distinct":true,"outerJoinOnModel":"workOrderTask","inputVarMap":{"filter":"filter","customBatchSize":"batchSize","loopArray":"loopArray","currentDate":"currentDate","deadlineDateFilter":"deadlineDateFilter","statusIds":"statusIds"},"groupBy":"id","nodeType":"QUERY","filter":"filter","name":"getJobsDetails","links":{"workOrder":"workOrderTask","workOrderTask":"site","taskType":"workOrderTask","taskScheduleBreakdown":"workOrderTask","workOrderTaskAppointmentWindow":"workOrderTask"},"outputVarMap":{"data":"appendJobs"},"batchSize":"batchSize","getCount":true},"moveTasksToOpenStatus":{"eventId":"workOrderTaskModelProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"isJobsNotEmpty"}],"ignoreSubContext":true,"name":"moveTasksToOpenStatus","description":"Calling this node async as it shouldn't block the other flow","inputVarMap":{"moveToOpenJobs":"workOrderTask"},"outputVarMap":{},"nodeType":"PUBLISH"},"processInitialData":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreJobsPresent"}],"contextChangePermitted":true,"name":"processInitialData","description":"processInitialData","processRule":"{ contextVar.jobs = []; contextVar.calendarIdArray = []; contextVar.deadlineDateFilter = contextVar.startDate; contextVar.filter = contextVar.filter + ' AND {$taskType.webTask} = false AND {$taskType.crewTask} = false AND ({$workOrderTask.isLongDurationTask} = false OR {$workOrderTask.isLongDurationTask} IS NULL) AND ({$workOrder.deadline} > {@deadlineDateFilter} OR {$workOrder.deadline} IS NULL)'; if (typeof contextVar.taskIdList !== 'undefined' && contextVar.taskIdList.length > 0) { contextVar.originalTaskIdList = [...contextVar.taskIdList]; } }","id":"processInitialData","nodeType":"PROCESS","jsEngine":"es6"},"processTasksWhichDidNotGetFetched":{"connectors":[{"exitPortType":"NextStep","nodeId":"areJobsPresentToMoveToOpenStatus"}],"contextChangePermitted":true,"name":"processTasksWhichDidNotGetFetched","description":"processTasksWhichDidNotGetFetched","processRule":"{ if (typeof contextVar.jobs === 'undefined' || contextVar.jobs.length === 0) { contextVar.jobs = []; } var jobsFetched = contextVar.jobs.map(job => job.id); contextVar.moveToOpenJobs = []; contextVar.originalTaskIdList.forEach(task => { if (jobsFetched.indexOf(task) == -1) { contextVar.moveToOpenJobs.push({ 'statusId': 'workOrderTaskOpen', 'eventType': 'workOrderTaskOpen', 'id': task }); } }); }","id":"appendJobs","nodeType":"PROCESS","jsEngine":"es6"}}