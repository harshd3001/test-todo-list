{"getResolutionTime":{"filter":"{$slaTimeFrameSlaId}={@slaId} ","models":["slaTimeFrame"],"connectors":[{"exitPortType":"NextStep","nodeId":"getHolidays"}],"columns":{"slaTimeFramePriorityPriority":"slaTimeFrame.priorityPriority","slaTimeFrameResolutionTimeUnit":"slaTimeFrame.resolutionTimeUnit","slaTimeFrameSlaId":"slaTimeFrame.slaId","slaTimeFrameResolutionTimeAmount":"slaTimeFrame.resolutionTimeAmount"},"name":"getResolutionTime","description":"Get resolution time amount for the priority specified by work order","inputVarMap":{"priorityName":"priorityName","slaId":"slaId"},"outputVarMap":{"data":"getResolutionTime"},"nodeType":"QUERY"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"getResolutionTime"}],"name":"start","description":"Start","nodeType":"START"},"calculateSlaDate":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"calculateSlaDate","description":"calculateSlaDate via JS","processRule":"{function checkForNull(dataChecker) { if (typeof dataChecker === 'undefined' || dataChecker == null || dataChecker == '') { return true; } else { return false; } } function gettimediff(t1, t2) { t1.setSeconds(0, 0); t2.setSeconds(0, 0); var t1val = Number(t1.getHours() * 60 + t1.getMinutes()); var t2val = Number(t2.getHours() * 60 + t2.getMinutes()); var min = Math.floor((t2val - t1val) % 60); var hours = parseInt((t2 - t1) / (1000 * 60 * 60)); return (hours + ':' + min + ':00'); } function yyyymmdd(dueDate) { function twoDigit(n) { return (n < 10 ? '0' : '') + n; } return '' + dueDate.getFullYear() + \"-\" + twoDigit(dueDate.getMonth() + 1) + \"-\" + twoDigit(dueDate.getDate()); } function DifferenceInDays(firstDate, secondDate) { return Math.floor((secondDate - firstDate) / (1000 * 60 * 60 * 24)); } function findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal) { while (true) { var yyyymmddDate = yyyymmdd(dueDate); if (daysOffInWeek.indexOf(days[dueDate.getDay()]) > -1 || hlDaysCal.indexOf(yyyymmddDate) > -1) { dueDate.setDate(dueDate.getDate() + 1); holidaySkippedAlready++; continue; } else { break; } } return dueDate; } var holidaySkippedAlready = 0; var createdDateWo = contextVar.queryData[0].createdDateWo; var openFlag = \"false\"; var btwnFlg = \"false\"; if (contextVar.getFetchCummicatingSum.length < 1 || contextVar.getResolutionTime.length < 1 || checkForNull(createdDateWo)) { contextVar.errorCalcSlaFlg = false; } else { contextVar.errorCalcSlaFlg = true; var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; var wrkHrsInWeek = 0; var getFetchCummicatingSum = contextVar.getFetchCummicatingSum; var getHolidays = contextVar.getHolidays; for (var i = 0; i < getFetchCummicatingSum.length; i++) { wrkHrsInWeek = wrkHrsInWeek + getFetchCummicatingSum[i].hours; } var plannedDate = new Date(createdDateWo); var resAmount = parseInt(contextVar.getResolutionTime[0].resolutionTimeAmount); var resUnit = contextVar.getResolutionTime[0].resolutionTimeUnit; var noOfhours = 0; var noOfMinutes = 0; if (resUnit == \"Minutes\") { noOfhours = Math.floor(resAmount / 60); noOfMinutes = resAmount % 60; resUnit = \"Hours\"; resAmount = noOfhours; } var dueDate = new Date(createdDateWo); var noOfOffDaysInWeek = 0; var daysOffInWeek = []; var wrkgDaysInWeek = []; var wrkngHrs = []; var strtTime = []; var endTime = []; for (var i = 0; i < getFetchCummicatingSum.length; i++) { if (getFetchCummicatingSum[i].hours == 0) { daysOffInWeek.push(getFetchCummicatingSum[i].day); noOfOffDaysInWeek++; } else { if (getFetchCummicatingSum[i].hours < 0) { contextVar.errorCalcSlaFlg = false; } else { wrkgDaysInWeek.push(getFetchCummicatingSum[i].day); wrkngHrs.push(getFetchCummicatingSum[i].hours); strtTime.push(getFetchCummicatingSum[i].openingTime); endTime.push(getFetchCummicatingSum[i].closingTime); } } } var hlDaysCal = []; for (var i = 0; i < getHolidays.length; i++) { hlDaysCal.push(yyyymmdd(new Date(getHolidays[i].date))); } var hoursLeft = 0; var minLeft = 0; var hrLeftInDay = 0; var minLeftInDay = 0; switch (resUnit) { case \"Hours\": dueDate = findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal); var dueDateTimeString = dueDate.toLocaleTimeString(); var openingTimeString = new Date(strtTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); var opTimeArr = openingTimeString.split(\":\", 3); var closingTimeString = new Date(endTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); var clTimeArr = closingTimeString.split(\":\", 3); if (holidaySkippedAlready >= 1) { dueDate.setHours(parseInt(opTimeArr[0])); dueDate.setMinutes(parseInt(opTimeArr[1])); dueDate.setSeconds(parseInt(opTimeArr[2])); dueDateTimeString = dueDate.toLocaleTimeString(); } if (dueDateTimeString > closingTimeString && holidaySkippedAlready < 1) { dueDate.setDate(dueDate.getDate() + 1); dueDate = findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal); openingTimeString = new Date(strtTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); opTimeArr = openingTimeString.split(\":\", 3); dueDate.setHours(parseInt(opTimeArr[0])); dueDate.setMinutes(parseInt(opTimeArr[1])); dueDate.setSeconds(parseInt(opTimeArr[2])); dueDateTimeString = dueDate.toLocaleTimeString(); } if (dueDateTimeString <= closingTimeString && dueDateTimeString >= openingTimeString) { var dueClosDate = new Date(); dueClosDate.setFullYear(dueDate.getFullYear()); dueClosDate.setMonth(dueDate.getMonth()); dueClosDate.setDate(dueDate.getDate()); dueClosDate.setHours(parseInt(clTimeArr[0])); dueClosDate.setMinutes(parseInt(clTimeArr[1])); dueClosDate.setSeconds(parseInt(clTimeArr[2])); var timeDiff = gettimediff(dueDate, dueClosDate); var diffArr = timeDiff.split(\":\", 3); var diffArrInt = []; for (var i = 0; i < diffArr.length; i++) { diffArrInt.push(parseInt(diffArr[i])); } hrLeftInDay = diffArrInt[0]; minLeftInDay = diffArrInt[1]; if (hrLeftInDay >= resAmount) { btwnFlg = \"true\"; dueDate.setHours(parseInt(dueDate.getHours()) + parseInt(resAmount)); dueDate.setMinutes(parseInt(dueDate.getMinutes()) + parseInt(noOfMinutes)); hrLeftInDay = 0; minLeftInDay = 0; } else { resAmount = resAmount - hrLeftInDay; dueDate.setDate(parseInt(dueDate.getDate()) + 1); findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal); openingTimeString = new Date(strtTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); opTimeArr = openingTimeString.split(\":\", 3); dueDate.setHours(parseInt(opTimeArr[0])); dueDate.setMinutes(parseInt(opTimeArr[1])); dueDate.setSeconds(parseInt(opTimeArr[2])); dueDateTimeString = dueDate.toLocaleTimeString(); } } if (dueDateTimeString < openingTimeString) { dueDate.setHours(opTimeArr[0]); dueDate.setMinutes(opTimeArr[1]); dueDate.setSeconds(opTimeArr[2]); } var weeksCount = parseInt(resAmount / wrkHrsInWeek); if (btwnFlg == \"false\") { hoursLeft = hoursLeft + parseInt(resAmount % wrkHrsInWeek); } dueDate.setDate(dueDate.getDate() + 7 * weeksCount); dueDate = findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal); while (hoursLeft > wrkngHrs[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])] && hoursLeft > 0) { hrLeftInDay = 0; hoursLeft = hoursLeft - wrkngHrs[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]; dueDate.setDate(dueDate.getDate() + 1); dueDate = findNextWrkngDay(dueDate, days, daysOffInWeek, hlDaysCal); } openFlag = \"true\"; break; case \"Days\": var noOfWeekOffsLTS = 0; var quotient = Math.floor(resAmount / 7); dueDate.setDate(dueDate.getDate() + (quotient * noOfOffDaysInWeek)+ (quotient * 7)); var remainder = resAmount % 7; var cDate = new Date(dueDate.getTime()); for(var i=1;i<=remainder;i++){ cDate.setDate(cDate.getDate() + 1); dueDate.setDate(dueDate.getDate() + 1); if(daysOffInWeek.indexOf(days[cDate.getDay()]) > -1){ noOfWeekOffsLTS++; } } dueDate.setDate(dueDate.getDate() + noOfWeekOffsLTS); break; case \"Weeks\": dueDate.setDate(dueDate.getDate() + 7 * resAmount); break; case \"Months\": dueDate.setMonth(dueDate.getMonth() + resAmount); break; case \"Years\": dueDate.setFullYear(dueDate.getFullYear() + resAmount); break; default: contextVar.errorCalcSlaFlg = false; } var noOfHolidays = 0; for (var i = 0; i < getHolidays.length; i++) { var hlDate = new Date(getHolidays[i].date).setHours(0, 0, 0, 0); var plDate = new Date(plannedDate).setHours(0, 0, 0, 0); var dDate = new Date(dueDate).setHours(0, 0, 0, 0); if (hlDate >= plDate && hlDate <= dDate) { if (!(daysOffInWeek.indexOf(days[new Date(getHolidays[i].date).getDay()]) > -1)) { noOfHolidays++; } } } if (btwnFlg == \"false\") { dueDate.setDate(dueDate.getDate() + noOfHolidays - holidaySkippedAlready); } while (true) { var yyyymmddDate = yyyymmdd(dueDate); if (daysOffInWeek.indexOf(days[dueDate.getDay()]) > -1 || hlDaysCal.indexOf(yyyymmddDate) > -1) { dueDate.setDate(dueDate.getDate() + 1); continue; } else { break; } } var dueDateTimeString = dueDate.toLocaleTimeString(); var openingTimeString = new Date(strtTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); var opTimeArr = openingTimeString.split(\":\", 3); var closingTimeString = new Date(endTime[wrkgDaysInWeek.indexOf(days[dueDate.getDay()])]).toLocaleTimeString(); var clTimeArr = closingTimeString.split(\":\", 3); if (dueDateTimeString > closingTimeString && openFlag == \"false\") { dueDate.setHours(parseInt(clTimeArr[0])); dueDate.setMinutes(parseInt(clTimeArr[1])); dueDate.setSeconds(parseInt(clTimeArr[2])); } if (dueDateTimeString < openingTimeString && openFlag == \"false\") { dueDate.setHours(parseInt(opTimeArr[0])); dueDate.setMinutes(parseInt(opTimeArr[1])); dueDate.setSeconds(parseInt(opTimeArr[2])); } if (resUnit == \"Hours\" && btwnFlg == \"false\") { dueDate.setHours(parseInt(opTimeArr[0]) + hoursLeft ); dueDate.setMinutes(parseInt(opTimeArr[1]) + noOfMinutes + minLeft - minLeftInDay); } contextVar.dueDateSLA = dueDate.toISOString().replace(\"T\", \" \").replace(\"Z\", \"\"); contextVar.lOneSLADate = null; contextVar.level = null; if(contextVar.escalationLevelList.length > 0){ var lOneslaDate = new Date(dueDate.getTime()); var level = parseInt(contextVar.escalationLevelList[0].level); var escUnit = contextVar.escalationLevelList[0].escalationUnit; var escValue = parseInt(contextVar.escalationLevelList[0].escalationValue); escUnit = \"Minutes\"; switch(escUnit){ case \"Minutes\": lOneslaDate.setMinutes(lOneslaDate.getMinutes() + escValue); break; case \"Hours\": lOneslaDate.setHours(lOneslaDate.getHours() + escValue); break; case \"Days\": lOneslaDate.setDate(lOneslaDate.getDate() + escValue); break; case \"Weeks\": lOneslaDate.setDate(lOneslaDate.getDate() + 7 * escValue); break; case \"Months\": lOneslaDate.setMonth(lOneslaDate.getMonth() + escValue); break; case \"Years\": lOneslaDate.setFullYear(lOneslaDate.getFullYear() + escValue); break; default: contextVar.errorCalcSlaFlg = false; } contextVar.level = level; contextVar.lOneSLADate = new Date(lOneslaDate.toString().split('GMT')[0]+' UTC').toISOString().replace(\"T\", \" \").replace(\"Z\", \"\"); } }}","nodeType":"PROCESS"},"getWeeklySchedule":{"filter":"{$weeklyScheduleCalendarId}={@calendarId}","models":["weeklySchedule"],"connectors":[{"exitPortType":"NextStep","nodeId":"calculateSlaDate"}],"columns":{"hours":"(timestampdiff(HOUR,{$weeklySchedule.openingTime},{$weeklySchedule.closingTime}))","isAllDay":"weeklySchedule.isAllDay","isOpen":"weeklySchedule.isOpen","weeklyScheduleCalendarId":"weeklySchedule.calendarId","weeklyScheduleOpeningTime":"weeklySchedule.openingTime","day":"weeklySchedule.day","weeklyScheduleClosingTime":"weeklySchedule.closingTime"},"name":"getWeeklySchedule","description":"Fetch Weekly Schedule","inputVarMap":{"calendarId":"calendarId"},"outputVarMap":{"data":"weeklyScheduleData"},"nodeType":"QUERY"},"end":{"name":"end","description":"End","nodeType":"END"},"getHolidays":{"filter":"{$calendarHolidayCalendarId}={@calendarId}","models":["holiday","calendarHoliday"],"connectors":[{"exitPortType":"NextStep","nodeId":"getWeeklySchedule"}],"columns":{"calendarHolidayCalendarId":"calendarHoliday.calendarId","holidayName":"holiday.name","holidayDate":"holiday.date","holidayId":"holiday.id"},"name":"getHolidays","inputVarMap":{"calendarId":"calendarId"},"outputVarMap":{"data":"getHolidays"},"nodeType":"QUERY"},"workflowNodes":["start","getResolutionTime","getWeeklySchedule","getHolidays","calculateSlaDate","end"]}