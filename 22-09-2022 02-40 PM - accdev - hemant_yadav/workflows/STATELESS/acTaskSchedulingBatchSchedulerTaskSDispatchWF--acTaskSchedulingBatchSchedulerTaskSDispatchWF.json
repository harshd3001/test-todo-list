{"fetchAppointData":{"filter":"{$id}= {@taskId}","models":["workOrderTask","workOrderTaskAppointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"setData"}],"columns":{"appointmentWindowId":"workOrderTaskAppointmentWindow.appointmentWindowId","assignedToUserId":"workOrderTask.assignedToUserId","taskTypeId":"workOrderTask.taskTypeId","statusId":"workOrderTask.statusId","endDate":"workOrderTaskAppointmentWindow.endDate","workOrderTaskId":"workOrderTaskAppointmentWindow.workOrderTaskId","scheduledDate":"workOrderTask.scheduledDate","siteId":"workOrderTask.siteId","startEndJson":"workOrderTaskAppointmentWindow.startEndJson","workOrderId":"workOrderTask.workOrderId","id":"workOrderTask.id","startDate":"workOrderTaskAppointmentWindow.startDate"},"name":"fetchAppointData","description":"fetchAppointData","links":{"workOrderTaskAppointmentWindow":"workOrderTask"},"inputVarMap":{"taskId":"taskId"},"outputVarMap":{"data":"appointData"},"nodeType":"QUERY","getCount":true},"initializeData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTasks"}],"contextChangePermitted":true,"name":"initializeData","description":"initializeData","processRule":"{contextVar.workOrderId = contextVar.workOrderTaskData[0].workOrderId }","id":"initializeData","nodeType":"PROCESS"},"setData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callBreakdownWF"}],"contextChangePermitted":true,"name":"setData","description":"setData","processRule":"{ if (contextVar.appointData.length > 0) { contextVar.startDate = contextVar.appointData[0].startDate; } contextVar.endDate = new Date(contextVar.startDate); contextVar.endDate.setMinutes(contextVar.endDate.getMinutes() + contextVar.duration); contextVar.endDate = contextVar.endDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.taskData.push({ 'scheduledDate': contextVar.startDate, 'statusId': contextVar.statusId, 'eventType': 'workOrderTaskUpdated', 'dueDate': contextVar.endDate, 'acIsApptConfirmed': true, 'acIsPreAssigned': contextVar.acIsPreAssigned, 'assignedToUserId': contextVar.recommendedTechId, 'id': contextVar.taskId }); contextVar.breakdownData.push({ 'startDate': contextVar.startDate, 'endDate': contextVar.endDate, 'workOrderTaskId': contextVar.taskId, 'duration': contextVar.duration, 'id': '' }); }","id":"setData","nodeType":"PROCESS"},"processTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderTaskWF"}],"contextChangePermitted":true,"name":"processTaskData","description":"processTaskData","processRule":"{ if (contextVar.taskDetail !== '' && typeof contextVar.taskDetail !== 'undefined' && contextVar.taskDetail.length > 0) { contextVar.taskData = []; contextVar.breakdownData = []; var dueDate = new Date(contextVar.data.actualStartTime); dueDate.setMinutes(dueDate.getMinutes() + contextVar.data.estimatedTaskDuration); contextVar.dueDate = dueDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.taskId = contextVar.taskDetail[0].id; contextVar.recommendedTechId = contextVar.taskDetail[0].acPrimaryAppraiserId; contextVar.scheduledDate = contextVar.data.actualStartTime; contextVar.statusId = 'workOrderTaskDispatched'; contextVar.acIsPreAssigned = 'Yes'; contextVar.duration = contextVar.data.estimatedTaskDuration; contextVar.workOrderTaskSubAction = 'upsertWorkOrderTask'; contextVar.taskData.push({ 'scheduledDate': contextVar.startDate, 'statusId': contextVar.statusId, 'eventType': 'workOrderTaskUpdated', 'dueDate': contextVar.endDate, 'acIsPreAssigned': contextVar.acIsPreAssigned, 'assignedToUserId': contextVar.recommendedTechId, 'id': contextVar.taskId }); contextVar.breakdownData.push({ 'startDate': contextVar.startDate, 'endDate': contextVar.endDate, 'workOrderTaskId': contextVar.taskId, 'duration': contextVar.duration, 'id': '' }); } }","id":"processTaskData","nodeType":"PROCESS"},"callWorkOrderTaskWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"processDataForSchedulerLog"}],"processId":"workOrderTaskModelWF","name":"callWorkOrderTaskWF","description":"callWorkOrderTaskWF","inputVarMap":{"taskData":"workOrderTask","workOrderTaskSubAction":"subAction"},"outputVarMap":{},"nodeType":"WORKFLOW"},"fetchWorkOrderTaskData":{"filter":"{$id}= {@taskId}","models":["workOrderTask","taskType","ZStatus","site","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"initializeData"}],"columns":{"taskTypeId":"workOrderTask.taskTypeId","assignedToUserId":"workOrderTask.assignedToUserId","statusId":"workOrderTask.statusId","statusName":"ZStatus.name","siteId":"workOrderTask.siteId","siteName":"site.name","scheduledDate":"workOrderTask.scheduledDate","workOrderId":"workOrderTask.workOrderId","id":"workOrderTask.id","taskTypeName":"taskType.name","userName":"User.name","statusNameColor":"ZStatus.colorCode"},"name":"fetchWorkOrderTaskData","description":"fetchWorkOrderTaskData","links":{"taskType":"workOrderTask","site":"workOrderTask","User":"workOrderTask","ZStatus":"workOrderTask"},"inputVarMap":{"taskId":"taskId"},"outputVarMap":{"data":"workOrderTaskData"},"nodeType":"QUERY"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"name":"start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"processInitialData"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"callSchedulerUpsertWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"schedulerLogModelWF","name":"callSchedulerUpsertWF","description":"callSchedulerUpsertWF","inputVarMap":{"schedulerLogData":"schedulerLog","schedulerSubAction":"subAction"},"nodeType":"WORKFLOW"},"fetchTasks":{"filter":"{$workOrderTask.workOrderId} = {@workOrderId} && {$id} != {@taskId} ","models":["workOrderTask","workOrder"],"connectors":[{"condition":"","connectorDisplayType":"CurvedLine","connectorLabel":"","exitPortType":"NextStep","nodeId":"processTaskData"}],"columns":{"acPrimaryAppraiserId":"workOrder.acPrimaryAppraiserId","id":"workOrderTask.id"},"name":"fetchTasks","distinct":true,"description":"fetchTasks","inputVarMap":{"workOrderId":"workOrderId","taskId":"taskId"},"outputVarMap":{"data":"taskDetail","count":"count1"},"id":"fetchTasks","nodeType":"QUERY","getCount":true},"workflowNodes":["start","logContextVar","processInitialData","isSchedulerCurrentStatusFailed","fetchAppointData","setData","callBreakdownWF","callWorkOrderTaskModelWF","fetchWorkOrderTaskData","initializeData","fetchTasks","processTaskData","callWorkOrderTaskWF","fetchSchedulerLogData","processDataForSchedulerLog","callSchedulerUpsertWF","end"],"isSchedulerCurrentStatusFailed":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"fetchAppointData"}],"name":"isSchedulerCurrentStatusFailed","description":"isSchedulerCurrentStatusFailed","processRule":"{ !Array.isArray(contextVar.schedulerLogData) || contextVar.schedulerLogData[0].status === 'schedulerLogFailed'}","nodeType":"DECISION"},"workflowContext":{"featureName":"batchScheduler","extraMsg":"TASK SCHEDULING: taskSchedulingBatchSchedulerTaskSchedulingWF call"},"callBreakdownWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkOrderTaskModelWF"}],"processId":"taskScheduleBreakdownModelWF","name":"callBreakdownWF","description":"callBreakdownWF","inputVarMap":{"taskId":"workOrderTaskId","breakdownData":"taskScheduleBreakdown"},"outputVarMap":{},"nodeType":"WORKFLOW"},"fetchSchedulerLogData":{"filter":"{$schedulerLog.id} = {@currentSchedulerLogId}","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"isSchedulerCurrentStatusFailed"}],"columns":{"result":"schedulerLog.result","id":"schedulerLog.id","status":"schedulerLog.status"},"name":"fetchSchedulerLogData","description":"fetchSchedulerLogData","inputVarMap":{"currentSchedulerLogId":"currentSchedulerLogId"},"outputVarMap":{"data":"schedulerLogData"},"nodeType":"QUERY"},"end":{"name":"end","description":"end","nodeType":"END"},"processDataForSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"callSchedulerUpsertWF"}],"contextChangePermitted":true,"name":"processDataForSchedulerLog ","description":"processDataForSchedulerLog","processRule":"{ contextVar.schedulerSubAction = 'upsertSchedulerLog'; if (typeof contextVar.schedulerLogData[0].result === 'undefined' || contextVar.schedulerLogData[0].result === '') { contextVar.schedulerLogData[0].result = []; } contextVar.schedulerLogData[0].result.push(contextVar.workOrderTaskData[0]); }","nodeType":"PROCESS"},"processInitialData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchSchedulerLogData"}],"contextChangePermitted":true,"name":"processInitialData","description":"processInitialData","processRule":"{ if (typeof contextVar.defaultInputContext !== 'undefined') { for (const key in contextVar.defaultInputContext) { contextVar[key] = contextVar.defaultInputContext[key]; } } contextVar.taskData = []; contextVar.breakdownData = []; var dueDate = new Date(contextVar.data.actualStartTime); dueDate.setMinutes(dueDate.getMinutes() + contextVar.data.estimatedTaskDuration); contextVar.dueDate = dueDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.taskId = contextVar.data.id; contextVar.recommendedTechId = contextVar.data.assignedToUserId; contextVar.scheduledDate = contextVar.data.actualStartTime; contextVar.statusId = 'workOrderTaskDispatched'; contextVar.acIsPreAssigned = 'Yes'; contextVar.duration = contextVar.data.estimatedTaskDuration; contextVar.workOrderTaskSubAction = 'upsertWorkOrderTask'; }","nodeType":"PROCESS","jsEngine":"es6"},"callWorkOrderTaskModelWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchWorkOrderTaskData"}],"processId":"workOrderTaskModelWF","name":"callWorkOrderTaskModelWF","description":"callWorkOrderTaskModelWF","inputVarMap":{"taskData":"workOrderTask","workOrderTaskSubAction":"subAction"},"outputVarMap":{},"nodeType":"WORKFLOW"}}