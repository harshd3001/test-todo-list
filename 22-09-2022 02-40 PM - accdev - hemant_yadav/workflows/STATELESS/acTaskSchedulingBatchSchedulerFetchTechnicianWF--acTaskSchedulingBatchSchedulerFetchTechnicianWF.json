{"flattenDefaultInputContext":{"connectors":[{"exitPortType":"NextStep","nodeId":"getSchedulerLog"}],"contextChangePermitted":true,"name":"flattenDefaultInputContext","description":"flattenDefaultInputContext","processRule":"if (typeof contextVar.defaultInputContext !== 'undefined') { for (const key in contextVar.defaultInputContext) { contextVar[key] = contextVar.defaultInputContext[key]; } }","nodeType":"PROCESS","jsEngine":"es6"},"areMoreTechsSkillPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getMoreTechniciansSkill"},{"exitPortType":"FalseStep","nodeId":"processZRule"}],"name":"areMoreTechsSkillPresent","description":"areMoreTechsSkillPresent","processRule":"contextVar.noOfTechSkillBatches >= 2 && contextVar.noOfTechSkillBatches >= contextVar.technicianSkillBatchBumber","nodeType":"DECISION"},"appendTechs":{"connectors":[{"exitPortType":"NextStep","nodeId":"areTechsPresent"}],"contextChangePermitted":true,"name":"appendTechs","description":"appendTechs","processRule":"{ if (Array.isArray(contextVar.appendTechnicianTaskData) && contextVar.appendTechnicianTaskData.length > 0) { contextVar.technicianTaskData = contextVar.technicianTaskData.concat(contextVar.appendTechnicianTaskData); } if (Array.isArray(contextVar.appendTechnicianLeaveData) && contextVar.appendTechnicianLeaveData.length > 0) { contextVar.technicianLeaveData = contextVar.technicianLeaveData.concat(contextVar.appendTechnicianLeaveData); } if (Array.isArray(contextVar.appendTechnicianOvertimeData) && contextVar.appendTechnicianOvertimeData.length > 0) { contextVar.technicianOvertimeData = contextVar.technicianOvertimeData.concat(contextVar.appendTechnicianOvertimeData); } if (Array.isArray(contextVar.appendTechnicians) && contextVar.appendTechnicians.length > 0) { contextVar.technicians = contextVar.technicians.concat(contextVar.appendTechnicians); contextVar.appendTechnicians.forEach(element => { if (!contextVar.calendarIdArray.includes(element.calendarId)) { contextVar.calendarIdArray.push(element.calendarId); } }); } contextVar.appendTechnicians = []; }","id":"appendTechs","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"overtimeFilter":"{$workforce.userId} IN {@loopArray} AND (({$workforceOvertimeStartDate} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({$workforceOvertimeEndDate} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({@startDateFilter} BETWEEN {$workforceOvertimeStartDate} AND  {$workforceOvertimeEndDate}) OR ({@endDateFilter} BETWEEN {$workforceOvertimeStartDate} AND {$workforceOvertimeEndDate}))","userStatus":"Deactivated","featureName":"batchScheduler","workflowCall":"batchSchedulerTechnicians","leavesFilter":"{$workforce.userId} IN {@loopArray} AND (({$workforceLeaveStartDate} BETWEEN {@startDate} AND {@endDate}) OR ({$workforceLeaveEndDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}) OR ({@endDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}))","technician":"technician","workOrderTaskStatusesNotRequired":["workOrderTaskCompleted","workOrderTaskCancelled","workOrderTaskDiscontinued","workOrderTaskSiteChangeRequest","workOrderTaskAutoScheduling"],"tasksFilter":"{$workforceUserId} IN {@loopArray} AND (({$startTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({$endTime} BETWEEN {@startDateFilter} AND  {@endDateFilter}) OR ({@startDateFilter} BETWEEN {$startTime} AND  {$endTime}) OR ({@endDateFilter} BETWEEN {$startTime} AND  {$endTime}))","workforceStatusId":"workforceActive","customBatchSize":1000,"taskStartedStatuses":["workOrderTaskInProgress","workOrderTaskInTransit","workOrderTaskIncident","workOrderTaskDelayed"],"workforceType":"webUser","extraMsg":"FETCH TECHNICIANS: taskSchedulingBatchSchedulerFetchTechnicianWF call"},"processTechsData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getAllTechnicians"}],"contextChangePermitted":true,"name":"processTechsData","description":"processTechsData","processRule":"{ contextVar.loopArray = []; contextVar.loopArray = contextVar.filteredTechIds.splice(0,contextVar.customBatchSize); }","nodeType":"PROCESS"},"processPublishEventData":{"connectors":[{"exitPortType":"NextStep","nodeId":"areTechsPresent"}],"contextChangePermitted":true,"name":"processPublishEventData","description":"processPublishEventData","processRule":"{ contextVar.filteredTechIds = []; if (typeof contextVar.finalFilteredUserIdList !== 'undefined' && contextVar.finalFilteredUserIdList !== '') { contextVar.filteredTechIds = contextVar.filteredTechIds.concat(contextVar.finalFilteredUserIdList.generic); } contextVar.noOfBatches = Math.ceil(contextVar.filteredTechIds.length / contextVar.customBatchSize); contextVar.originalFilteredTechIds = contextVar.filteredTechIds; contextVar.technicians = []; }","nodeType":"PROCESS","jsEngine":"es6"},"callFetchTechsAndSitesAvailabilityWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchCrewTechnicians"}],"processId":"fetchTechsAndSitesAvailabilityWF","name":"callFetchTechsAndSitesAvailabilityWF","description":"callFetchTechsAndSitesAvailabilityWF","inputVarMap":{"technicians":"technicians","endDate":"endDate","calendarIdArray":"calendarIdArray","startDate":"startDate"},"outputVarMap":{"technicians":"technicians"},"nodeType":"WORKFLOW"},"end":{"name":"end","description":"End","inputVarMap":{"originalFilteredTechIds":"originalFilteredTechIds","technicians":"technicians"},"outputVarMap":{"originalFilteredTechIds":"originalFilteredTechIds","technicians":"technicians"},"nodeType":"END"},"isSkillFilterApplicable":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getTechnicianSkillData"},{"exitPortType":"FalseStep","nodeId":"processZRule"}],"name":"isSkillFilterApplicable","description":"isSkillFilterApplicable","processRule":"(contextVar.schedulerSettingUseSkills === true )","nodeType":"DECISION"},"getTechnicianSkillData":{"models":["workforceSkill","skillLevel"],"connectors":[{"exitPortType":"NextStep","nodeId":"findNumberOfBatches"}],"columns":{"skillId":"workforceSkill.skillId","workforceUserId":"workforceSkill.userId","skillLevelRank":"skillLevel.rank"},"description":"getTechnicianSkillData","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","originalFilteredTechIds":"originalFilteredTechIds"},"nodeType":"QUERY","filter":"{$workforceSkill.userId} IN {@originalFilteredTechIds}","name":"getTechnicianSkillData","links":{"workforceSkill":"skillLevel"},"outputVarMap":{"data":"technicianSkillData","count":"technicianSkillCount","batchBumber":"technicianSkillBatchBumber"},"batchSize":"batchSize","getCount":true},"processZRule":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"contextChangePermitted":true,"name":"processZRule","description":"processZRule","processRule":"@AWZ1F8OYR8","nodeType":"PROCESS","jsEngine":"es6"},"findNumberOfBatches":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTechsSkillPresent"}],"contextChangePermitted":true,"name":"findNumberOfBatches","description":"findNumberOfBatches","processRule":"{contextVar.noOfTechSkillBatches = Math.ceil(contextVar.technicianSkillCount / contextVar.customBatchSize);contextVar.technicianSkillBatchBumber = contextVar.technicianSkillBatchBumber + 1;}","id":"findNumberOfBatches","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"flattenDefaultInputContext"}],"name":"Start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"processWorkGroupFilterData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callWorkGroupFilterForTasks"}],"contextChangePermitted":true,"name":"processWorkGroupFilterData","description":"processWorkGroupFilterData","processRule":"{ contextVar.workGroupDataObject = {}; contextVar.workGroupDataObject.isAllFilterApplied = false; if (typeof contextVar.regionIdList !== 'undefined' && contextVar.regionIdList.length > 0) { contextVar.workGroupDataObject['region'] = { 'filterIdList': JSON.parse(JSON.stringify(contextVar.regionIdList)), 'workGroupIdList': [] }; } if (Array.isArray(contextVar.workGroupFilterData) && contextVar.workGroupFilterData.length > 0) { contextVar.workGroupFilterData.forEach(function (element) { if (typeof contextVar.workGroupDataObject[element.workGroupFilterMethod] === 'undefined') { contextVar.workGroupDataObject[element.workGroupFilterMethod] = { 'workGroupIdList': [], 'filterIdList': [] }; } if (contextVar.workGroupDataObject[element.workGroupFilterMethod].workGroupIdList.indexOf(element.workGroupFilterWorkGroupId) < 0) { contextVar.workGroupDataObject[element.workGroupFilterMethod].workGroupIdList.push(element.workGroupFilterWorkGroupId); } if (contextVar.workGroupDataObject[element.workGroupFilterMethod].filterIdList.indexOf(element.workGroupFilterFilterId) < 0) { contextVar.workGroupDataObject[element.workGroupFilterMethod].filterIdList.push(element.workGroupFilterFilterId); } }); } }","id":"processWorkGroupFilterData","nodeType":"PROCESS"},"getAllTechnicians":{"models":["workforce","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTechniciansAvailabilityEventCall"}],"columns":{"availabilityWithOverTime":"workforce.userId","calendarId":"workforce.calendarId","timezoneOffset":"workforce.timezoneOffset","latitude":"workforce.latitude","id":"workforce.userId","workforceUserId":"workforce.userId","longitude":"workforce.longitude"},"description":"getAllTechnicians","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","userStatus":"userStatus","workforceType":"workforceType","loopArray":"loopArray","workforceStatusId":"workforceStatusId"},"nodeType":"QUERY","filter":"{$id} IN {@loopArray} AND {$User.status} != {@userStatus} AND {$workforce.statusId} = {@workforceStatusId} AND ({$workforce.workforceType} = 'technician' OR {$workforce.workforceType} IS NULL)","name":"getAllTechnicians","links":{"workforce":"User"},"outputVarMap":{"data":"appendTechnicians"},"batchSize":"batchSize","getCount":true},"areTechsPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTechsData"},{"exitPortType":"FalseStep","nodeId":"areTechniciansPresent"}],"name":"areTechsPresent","description":"areTechsPresent","processRule":"typeof contextVar.filteredTechIds !== 'undefined' && contextVar.filteredTechIds.length > 0","id":"areTechsPresent","nodeType":"DECISION"},"callWorkGroupFilterForTasks":{"connectors":[{"exitPortType":"NextStep","nodeId":"processPublishEventData"}],"processId":"workGroupFilterForTechniciansAndTasksWF","name":"callWorkGroupFilterForTasks","description":"callWorkGroupFilterForTasks","inputVarMap":{"workGroupDataObject":"workGroupDataObject"},"outputVarMap":{"finalFilteredUserIdList":"finalFilteredUserIdList"},"nodeType":"WORKFLOW"},"processSchedulerSettingData":{"connectors":[{"exitPortType":"NextStep","nodeId":"isSkillFilterApplicable"}],"contextChangePermitted":true,"name":"processSchedulerSettingData","description":"processSchedulerSettingData ","processRule":"{ if (typeof contextVar.schedulerSettingData != 'undefined' && contextVar.schedulerSettingData.length > 0) { contextVar.schedulerSettingUseSkills = contextVar.schedulerSettingData[0].schedulerSettingUseSkills; } else { contextVar.schedulerSettingUseSkills = false; } }","nodeType":"PROCESS"},"workflowNodes":["start","flattenDefaultInputContext","getSchedulerLog","processInitialData","fetchWorkGroupFilterData","processWorkGroupFilterData","callWorkGroupFilterForTasks","processPublishEventData","areTechsPresent","processTechsData","getAllTechnicians","fetchTechniciansAvailabilityEventCall","appendTechs","callFetchTechsAndSitesAvailabilityWF","fetchCrewTechnicians","getSchedulerSettingData","processSchedulerSettingData","isSkillFilterApplicable","getTechnicianSkillData","findNumberOfBatches","areMoreTechsSkillPresent","areTechniciansPresent","getMoreTechniciansSkill","appendTechSkill","processZRule","logContextVar","end"],"fetchWorkGroupFilterData":{"filter":"{$workGroupFilterFilterId} IN {@region} OR {$workGroupFilterFilterId} IN {@taskType} OR {$workGroupFilterFilterId} IN {@customer} OR {$workGroupFilterFilterId} IN {@workOrderType}","models":["workGroup","workGroupFilter"],"connectors":[{"exitPortType":"NextStep","nodeId":"processWorkGroupFilterData"}],"columns":{"workGroupFilterFilterId":"workGroupFilter.filterId","workGroupFilterWorkGroupId":"workGroupFilter.workGroupId","workGroupFilterMethod":"workGroup.filterMethod"},"name":"fetchWorkGroupFilterData","description":"fetchWorkGroupFilterData","inputVarMap":{"taskTypeIdList":"taskType","customerIdList":"customer","regionIdList":"region","workOrderTypeIdList":"workOrderType"},"links":{"workGroup":"workGroupFilter"},"outputVarMap":{"data":"workGroupFilterData"},"nodeType":"QUERY"},"getSchedulerSettingData":{"models":["schedulerSetting"],"connectors":[{"exitPortType":"NextStep","nodeId":"processSchedulerSettingData"}],"columns":{"schedulerSettingUseSkills":"schedulerSetting.useSkills"},"name":"getSchedulerSettingData","description":"getSchedulerSettingData","distinct":true,"inputVarMap":{},"outputVarMap":{"data":"schedulerSettingData"},"nodeType":"QUERY","getCount":true},"getMoreTechniciansSkill":{"models":["workforceSkill","skillLevel"],"connectors":[{"exitPortType":"NextStep","nodeId":"appendTechSkill"}],"columns":{"skillId":"workforceSkill.skillId","workforceUserId":"workforceSkill.userId","skillLevelRank":"skillLevel.rank"},"distinct":true,"inputVarMap":{"customBatchSize":"batchSize","originalFilteredTechIds":"originalFilteredTechIds","technicianSkillBatchBumber":"batchNumber"},"nodeType":"QUERY","filter":"{$workforceSkill.userId} IN {@originalFilteredTechIds}","name":"getMoreTechniciansSkill","links":{"workforceSkill":"skillLevel"},"outputVarMap":{"data":"appendTechnicianSkillData"},"batchSize":"batchSize","getCount":true,"batchNumber":"batchNumber"},"fetchTechniciansAvailabilityEventCall":{"eventId":"fetchTechnicianAvailabilityProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"appendTechs"}],"contextChangePermitted":true,"name":"fetchTechniciansAvailabilityEventCall","description":"fetchTechniciansAvailabilityEventCall","inputVarMap":{"customBatchSize":"customBatchSize","overtimeFilter":"overtimeFilter","taskStartedStatuses":"taskStartedStatuses","startDateFilter":"startDateFilter","endDate":"endDate","endDateFilter":"endDateFilter","workflowCall":"workflowCall","loopArray":"loopArray","leavesFilter":"leavesFilter","workOrderTaskStatusesNotRequired":"workOrderTaskStatusesNotRequired","tasksFilter":"tasksFilter","startDate":"startDate"},"outputVarMap":{"data":"processEventData"},"nodeType":"PUBLISH","captureOutput":true},"appendTechSkill":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTechsSkillPresent"}],"contextChangePermitted":true,"name":"appendTechSkill","description":"appendTechSkill","processRule":"if (Array.isArray(contextVar.appendTechnicianSkillData)) { contextVar.technicianSkillData = contextVar.technicianSkillData.concat(contextVar.appendTechnicianSkillData) } contextVar.technicianSkillBatchBumber = contextVar.technicianSkillBatchBumber + 1;","nodeType":"PROCESS"},"getSchedulerLog":{"filter":"{$schedulerLog.id} = {@currentSchedulerLogId}","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"processInitialData"}],"columns":{"context":"schedulerLog.context","id":"schedulerLog.id","schedulerType":"schedulerLog.schedulerType"},"name":"getSchedulerLog","description":"getSchedulerLog","distinct":true,"links":{},"inputVarMap":{"currentSchedulerLogId":"currentSchedulerLogId"},"outputVarMap":{"data":"schedulerLog"},"nodeType":"QUERY","getCount":true},"areTechniciansPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"callFetchTechsAndSitesAvailabilityWF"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"areTechniciansPresent","description":"areTechniciansPresent","processRule":"typeof contextVar.technicians !== 'undefined' && contextVar.technicians.length > 0","nodeType":"DECISION"},"processInitialData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchWorkGroupFilterData"}],"contextChangePermitted":true,"name":"processInitialData","description":"processInitialData","processRule":"{ contextVar.calendarIdArray = []; contextVar.technicianTaskData = []; contextVar.technicianLeaveData = []; contextVar.technicianOvertimeData = []; if (Array.isArray(contextVar.schedulerLog) && contextVar.schedulerLog.length > 0) { contextVar.taskTypeIdList = contextVar.schedulerLog[0].context.taskTypeIdList; contextVar.regionIdList = contextVar.schedulerLog[0].context.regionIdList; contextVar.customerIdList = contextVar.schedulerLog[0].context.customerIdList; contextVar.workOrderTypeIdList = contextVar.schedulerLog[0].context.workOrderTypeIdList; contextVar.startDate = contextVar.schedulerLog[0].context.startDate; contextVar.endDate = contextVar.schedulerLog[0].context.endDate; } if (Array.isArray(contextVar.schedulerLog) && typeof contextVar.schedulerLog[0].schedulerType !== 'undefined' && contextVar.schedulerLog[0].schedulerType === 'criticalTaskNoAvailability') { contextVar.tasksFilter += ' AND (({$workOrderTaskStatusId} NOT IN {@workOrderTaskStatusesNotRequired} AND {$workOrder.priorityPriority}<20) OR ({$workOrderTaskStatusId} IN {@taskStartedStatuses}))'; } else { contextVar.tasksFilter += ' AND {$workOrderTaskStatusId} NOT IN {@workOrderTaskStatusesNotRequired}'; } contextVar.startDateFilter = new Date(contextVar.startDate); contextVar.startDateFilter.setUTCHours(0, 0, 0, 0); contextVar.endDateFilter = new Date(contextVar.endDate); contextVar.endDateFilter.setDate(contextVar.endDateFilter.getDate() + 1); contextVar.endDateFilter.setUTCHours(0, 0, 0, 0); contextVar.startDateFilter = new Date(contextVar.startDateFilter).toISOString().replace('T', ' ').replace('Z', ''); contextVar.endDateFilter = new Date(contextVar.endDateFilter).toISOString().replace('T', ' ').replace('Z', ''); contextVar.leaveStartDate = new Date(contextVar.startDate); contextVar.leaveStartDate.setDate(contextVar.leaveStartDate.getDate() - 1); contextVar.leaveStartDate = contextVar.leaveStartDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.leaveEndDate = new Date(contextVar.endDate); contextVar.leaveEndDate.setDate(contextVar.leaveEndDate.getDate() + 1); contextVar.leaveEndDate = contextVar.leaveEndDate.toISOString().replace('T', ' ').replace('Z', ''); }","id":"processInitialData","nodeType":"PROCESS"},"fetchCrewTechnicians":{"connectors":[{"exitPortType":"NextStep","nodeId":"getSchedulerSettingData"}],"processId":"workforceFieldForceCrewFetchUnavailableTechsWF","name":"fetchCrewTechnicians","description":"fetchCrewTechnicians","inputVarMap":{"endDate":"endDate","startDate":"startDate"},"outputVarMap":{"unavailableTechsData":"unavailableTechsData"},"nodeType":"WORKFLOW"}}