{"processLenderData":{"contextChangePermitted":true,"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"processLenderData","description":"Use this for processing data in workflow","processRule":"{contextVar.tsExceptions = [];for(var k=0;k<contextVar.customers.length;k++){if(contextVar.tsExceptionData!=''&&contextVar.tsExceptionData.length>0){contextVar.tsExceptions.push({'tsException':contextVar.tsExceptionData[k].lenderId,'thresholdValue':contextVar.tsExceptionData[k].threshold,'isTS':contextVar.tsExceptionData[k].isTS});}}contextVar.customerId = contextVar.customers[0].id;contextVar.customerAssignmentType=contextVar.customers[0].assignmentType;}","id":"processLenderData","nodeType":"PROCESS"},"checkIfCustomerExists":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processCustomerID"},{"exitPortType":"FalseStep","nodeId":"processCustomerData"}],"name":"checkIfCustomerExists","description":"Use this for decision in workflow","processRule":"(contextVar.customers.length>0)","id":"checkIfCustomerExists","nodeType":"DECISION"},"processCustomerID":{"contextChangePermitted":true,"connectors":[{"exitPortType":"NextStep","nodeId":"fetchLenderData"}],"name":"processCustomerID","description":"Use this for processing data in workflow","processRule":"{contextVar.custId = contextVar.customers[0].id;}","id":"processCustomerID","nodeType":"PROCESS"},"fetchLenderData":{"models":["accLender","acClientLenderException"],"connectors":[{"exitPortType":"NextStep","nodeId":"processLenderData"}],"havingClause":"","columns":{"lenderName":"accLender.lenderName","customerId":"acClientLenderException.clientId","isTS":"acClientLenderException.isTS","threshold":"acClientLenderException.TsThreshold","lenderId":"accLender.id"},"description":"Provide some description for your query","outerJoinOnModel":"","orderBy":"","inputVarMap":{"custId":"custId"},"groupBy":"","nodeType":"QUERY","filter":"{$customerId} = {@custId}","name":"fetchLenderData","id":"fetchLenderData","outputVarMap":{"data":"tsExceptionData"},"distinctFilter":false},"fetchCustomerDataFromModel":{"models":["customer"],"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfCustomerExists"}],"havingClause":"","columns":{"id":"customer.id","assignmentType":"customer.acTsNts","customer":"customer.companyName"},"description":"Provide some description for your query","orderBy":"","inputVarMap":{"customerFilter":"filter"},"groupBy":"","nodeType":"QUERY","filter":"filter","name":"fetchCustomerDataFromModel","id":"fetchCustomerDataFromModel","outputVarMap":{"data":"customers"},"distinctFilter":false},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"getCustomerID"}],"nodeSource":"./static/media/start.018acd1a.svg","name":"start","description":"Start","id":"start","position":{"x":-437,"y":-178},"nodeType":"START"},"processCustomerData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callCreateCustomerWF"}],"contextChangePermitted":true,"name":"processCustomerData","description":"Use this for processing data in workflow","processRule":"{ contextVar.tsExceptions = []; contextVar.customerAssignmentType = ''; contextVar.customerSubAction = 'upsertCustomer'; contextVar.customer = { 'contactPerson': contextVar.recData.contactFirstName + ' ' + contextVar.recData.contactLastName, 'contactEmail': contextVar.recData.contactEmail, 'contactPhone': contextVar.recData.contactPhone, 'country': contextVar.recData.orderedByCountry, 'acClientId': contextVar.recData.orderedByCustomId, 'statusTargetModel': 'customer', 'city': contextVar.recData.orderedByCity, 'postalCode': contextVar.recData.orderedByZipCode, 'companyName': contextVar.recData.orderedByName, 'acTsNts': '', 'isDeactivated': false, 'statusId': 'customerActive', 'billingAddress': contextVar.recData.orderedByAddress, 'state': contextVar.recData.orderedByState, 'acAddressTwo': contextVar.recData.orderedByAddressTwo }; }","id":"processCustomerData","nodeType":"PROCESS"},"callCreateCustomerWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"customerWF","name":"callCreateCustomerWF","description":"Provide some description for your workflow node","inputVarMap":{"customerSubAction":"subAction","customer":"customer"},"id":"callCreateCustomerWF","outputVarMap":{"customerId":"customerId"},"nodeType":"WORKFLOW"},"end":{"nodeSource":"./static/media/end.5c5273bd.svg","name":"end","description":"End","inputVarMap":{"customerId":"customerId"},"outputVarMap":{"customerId":"customerId"},"id":"end","position":{"x":973,"y":-356},"nodeType":"END"},"workflowNodes":["start","end","fetchCustomerDataFromModel","checkIfCustomerExists","getCustomerID","callCreateCustomerWF","processLenderData","processCustomerData","fetchLenderData","processCustomerID"],"getCustomerID":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchCustomerDataFromModel"}],"contextChangePermitted":true,"name":"getCustomerID","description":"Use this for processing data in workflow","processRule":"{contextVar.customerFilter = \"UPPER({$customer}) LIKE UPPER('\"+contextVar.recData.orderedByName+\"')\";}","id":"getCustomerID","nodeType":"PROCESS"}}