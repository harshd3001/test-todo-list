{"pageContext":{},"actionOnLoad":["@actions.initialData"],"localPageContext":true,"jslib":{"isDeleteDisabled":"function(pageContext){return (pageContext.overtimeAction === 'add');}","bannerText":"function(pageContext){ if(pageContext.showBanner==='leaveConflict'){ return pageContext.bannerText = '@lang.[\"oicwpl\",\"Overtime is conflicting with planned leave\"]';} else if(pageContext.showBanner==='shiftConflict'){ return pageContext.bannerText = '@lang.[\"oicwns\",\"Overtime is conflicting with normal shift\"]'; } }","dynamicHeaderText":"function(pageContext){ if(pageContext. overtimeAction === 'add'){return '@lang.[\"ao3\",\"Add Overtime\"]'}else if(pageContext. overtimeAction === 'edit'){return '@lang.[\"eo\",\"Edit Overtime\"]'}}","isSaveDisabled":"function(pageContext) { return ((pageContext.initialWorkforceOvertimeStartDate == pageContext.workforceOvertimeStartDate && pageContext.initialWorkforceOvertimeEndDate == pageContext.workforceOvertimeEndDate && pageContext.initialWorkforceOvertimeTotalTime == pageContext.workforceOvertimeTotalTime && pageContext.initialWorkforceOvertimeNotes === pageContext.workforceOvertimeNotes) || (pageContext.workforceOvertimeStartDate == '' || pageContext.workforceOvertimeEndDate == '' || pageContext.workforceOvertimeTotaltime == '' || pageContext.workforceOvertimeStartDate === pageContext.workforceOvertimeEndDate ||pageContext.buttonDisabled === true)) }","isBannerHidden":"function(pageContext){if (pageContext.bannerType==='hide') { return true; } else if(pageContext.bannerType==='show') { return false;}}"},"header":{"leftData":{"children":[{"name":"back","icon":"@iconlib.NavigationArrowBackGrey","actionOnClick":["@actions.openPreviousPanel"],"type":"buttonIcon"}]},"children":[{"hidden":"@jslib.isDeleteDisabled","icon":"@iconlib.ActionsBinGrey","actionOnClick":["@actions.setSubActionDelete","@actions.processInitialTechnicianData","@actions.processNotificationData","@actions.fireProcessEvent","@actions.openPreviousPanel","@actions.refreshDataGrid"],"id":"deleteOvertime","type":"buttonIcon"},{"buttonType":"primary","actionOnClick":["@actions.setSubActionUpsert","@actions.processInitialTechnicianData","@actions.processNotificationData","@actions.fireProcessEvent","@actions.openPreviousPanel","@actions.refreshDataGrid"],"disabled":"@jslib.isSaveDisabled","id":"submit","type":"button","title":"@lang.['s12','Save ']"}],"title":"@jslib.dynamicHeaderText"},"body":{"children":[{"alertMessage":"@jslib.bannerText","actionOnChange":"@actions.clearBannerType","onClose":"@actions.clearBannerType","alertType":"warning","hidden":"@jslib.isBannerHidden","id":"alertMessage","type":"alert","timeout":300000},{"children":[{"actionOnChange":["@actions.calculateTotalTime","@actions.checkingOvertimeConflict","@actions.checkEndDate"],"minDate":"1970-01-01 00:00","id":"startDateTime","title":"@lang.['sdt','Start Date & Time']","type":"datetime","value":"@pageContext.workforceOvertimeStartDate","placeHolder":"@lang.['sdt1','Select date & time']"},{"actionOnChange":["@actions.calculateTotalTime","@actions.checkingOvertimeConflict"],"minDate":"@pageContext.workforceOvertimeStartDate","id":"endDateTime","title":"@lang.['edt','End Date & Time']","type":"datetime","value":"@pageContext.workforceOvertimeEndDate","placeHolder":"@lang.['sdt1','Select date & time']"},{"disabled":true,"id":"totalTime","label":"@lang.['tt2','Total Time']","placeholder":"@lang.['a5','Autofilled']","type":"input","value":"@pageContext.workforceOvertimeTotalTime"},{"inputType":"text","id":"notes","label":"@lang.['n2','Notes (Optional)']","type":"textarea","value":"@pageContext.workforceOvertimeNotes","placeHolder":"@lang.['en2','Enter notes']"}],"label":"@lang.['o','Overtime']","id":"overtime","type":"section"}]},"actions":[{"parentPanelRefreshRequired":false,"name":"openPreviousPanel","type":"backPanel"},{"endPoint":"event/start","name":"fireProcessEvent","outputVarMap":{"data":"@pageContext.data"},"type":"api","actionDef":{"data":[{"eventId":"workforceTechnicianOvertimeProcessEvent","contextVar":{"workforceOvertime":[{"initialWorkforceOvertimeEndDate":"@pageContext.initialWorkforceOvertimeEndDate","notes":"@pageContext.workforceOvertimeNotes","endDate":"@pageContext.workforceOvertimeEndDate","recver":"@pageContext.workforceOvertimeRecver","id":"@pageContext.workforceOvertimeId","workforceUserId":"@pageContext.workforceUserId","initialWorkforceOvertimeStartDate":"@pageContext.initialWorkforceOvertimeStartDate","startDate":"@pageContext.workforceOvertimeStartDate"}],"overTimeAction":"@pageContext.overtimeAction","subAction":"@pageContext.subAction","notificationEndDate":"@pageContext.notificationEndDate","notificationStartDate":"@pageContext.notificationStartDate"}}]}},{"name":"calculateTotalTime","type":"script","actionDef":"function(pageContext) { if (typeof pageContext.workforceOvertimeStartDate !== 'undefined' && pageContext.workforceOvertimeStartDate !== '' && typeof pageContext.workforceOvertimeEndDate !== 'undefined' && pageContext.workforceOvertimeEndDate !== '') { var overtimeStartDate = new Date(pageContext.workforceOvertimeStartDate); var overtimeEndDate = new Date(pageContext.workforceOvertimeEndDate); var timeDifferenceMiliSeconds = overtimeEndDate.getTime() - overtimeStartDate.getTime(); var days = parseInt(timeDifferenceMiliSeconds / 86400000); timeDifferenceMiliSeconds -= days * 86400000; var hours = parseInt(timeDifferenceMiliSeconds / 3600000); timeDifferenceMiliSeconds -= hours * 3600000; var minute = parseInt(timeDifferenceMiliSeconds / 60000 ); pageContext.workforceOvertimeTotalTime = days + ' @lang.[\" d11 \",\" Days \"] ' + hours + ' @lang.[\" h \",\" Hours \"] ' + minute + ' @lang.[\" m2 \",\" Minutes \"]'; } else { pageContext.workforceOvertimeTotalTime; } }"},{"name":"processInitialTechnicianData","outputVarMap":{"data":"@pageContext.technicianData"},"type":"query","actionDef":{"filter":"{$id}={@workforceUserId}","models":["User"],"columns":{"timezone":"User.timezone","id":"User.id"},"inputs":{"workforceUserId":"@pageContext.workforceUserId"}}},{"name":"processNotificationData","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.technicianData[0].timezone === 'undefined' || pageContext.technicianData[0].timezone === '') { pageContext.technicianData[0].timezone = 'UTC'; } pageContext.notificationStartDate = new Date(new Date(pageContext.workforceOvertimeStartDate).getTime() - (pageContext.timezoneOffset * 60000)); pageContext.notificationStartDate = pageContext.notificationStartDate.toLocaleString('en-US', { timeZone: pageContext.technicianData[0].timezone }); pageContext.notificationEndDate = new Date(new Date(pageContext.workforceOvertimeEndDate).getTime() - (pageContext.timezoneOffset * 60000)); pageContext.notificationEndDate = pageContext.notificationEndDate.toLocaleString('en-US', { timeZone: pageContext.technicianData[0].timezone }); }"},{"name":"initialData","type":"script","actionDef":"function (pageContext) { if (pageContext.overtimeAction == 'edit') { pageContext.initialWorkforceOvertimeStartDate = pageContext.workforceOvertimeStartDate; pageContext.initialWorkforceOvertimeEndDate = pageContext.workforceOvertimeEndDate; pageContext.initialWorkforceOvertimeTotalTime = pageContext.workforceOvertimeTotalTime; pageContext.initialWorkforceOvertimeNotes = pageContext.workforceOvertimeNotes; } else if (pageContext.overtimeAction == 'add') { pageContext.workforceOvertimeStartDate = ''; pageContext.workforceOvertimeNotes = ''; pageContext.workforceOvertimeEndDate = ''; pageContext.workforceOvertimeTotalTime = ''; pageContext.showBanner = ''; pageContext.bannerType = 'hide'; pageContext.buttonDisabled = false; } var addMinutes = function (date) { return (new Date(date.getTime() + ((pageContext.workforceTimezoneOffset - pageContext.timezoneOffset) * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; pageContext.calendarDataAfterOffsetCalc = JSON.parse(JSON.stringify(pageContext.calendarData)); pageContext.calendarDataAfterOffsetCalc = pageContext.calendarDataAfterOffsetCalc.map(ele => { if (ele.weeklyScheduleIsOpen && ele.weeklyScheduleSchedule.length>0) { ele.weeklyScheduleSchedule = ele.weeklyScheduleSchedule.map(sched =>{ sched.start = addMinutes(new Date(new Date().toISOString().replace('T', ' ').replace('Z', '').split(' ')[0] + ' ' + sched.start)); sched.end = addMinutes(new Date(new Date().toISOString().replace('T', ' ').replace('Z', '').split(' ')[0] + ' ' + sched.end)); return sched; }); } return ele; }); }"},{"name":"setSubActionDelete","type":"script","actionDef":"function(pageContext){pageContext.subAction='deleteWorkforceOvertime';}"},{"name":"setSubActionUpsert","type":"script","actionDef":" function(pageContext){pageContext.subAction='upsertWorkforceOvertime';}"},{"name":"checkingOvertimeConflict","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.workforceOvertimeStartDate !== 'undefined' && pageContext.workforceOvertimeStartDate !== '' && typeof pageContext.workforceOvertimeEndDate !== 'undefined' && pageContext.workforceOvertimeEndDate !== '') { var checkCondition = true; var leaves = []; leaves = pageContext.leaveData; var calendar = []; calendar = pageContext.calendarDataAfterOffsetCalc; pageContext.bannerType = 'hide'; pageContext.buttonDisabled = false; pageContext.showBanner = ''; var overTimeStartDisplayOrder = new Date(pageContext.workforceOvertimeStartDate).getDay(); var overTimeEndDisplayOrder = new Date(pageContext.workforceOvertimeEndDate).getDay(); for (var values in leaves) { var startDate = new Date(leaves[values].workforceLeaveStartDate); var endDate = new Date(leaves[values].workforceLeaveEndDate); if (new Date(pageContext.workforceOvertimeStartDate) >= startDate && new Date(pageContext.workforceOvertimeStartDate) <= endDate || new Date(pageContext.workforceOvertimeEndDate) >= endDate && new Date(pageContext.workforceOvertimeEndDate) <= startDate) { checkCondition = false; pageContext.bannerType = 'show'; pageContext.buttonDisabled = true; pageContext.showBanner = 'leaveConflict'; } } if (checkCondition == true) { for (var value in calendar) { if (overTimeStartDisplayOrder == parseInt(calendar[value].weeklyScheduleDisplayOrder)) { if (calendar[value].weeklyScheduleIsOpen) { if (calendar[value].weeklyScheduleIsAllDay == true) { pageContext.bannerType = 'show'; pageContext.buttonDisabled = true; pageContext.showBanner = 'shiftConflict'; } else if (calendar[value].weeklyScheduleSchedule.length !== 0) { calendar[value].weeklyScheduleSchedule.forEach(function (element) { var start = element.start.split(' ')[1]; var end = element.end.split(' ')[1]; if ((start <= pageContext.workforceOvertimeStartDate.split(' ')[1] && pageContext.workforceOvertimeStartDate.split(' ')[1] <= end) || (pageContext.workforceOvertimeEndDate.split(' ')[1] >= start && pageContext.workforceOvertimeEndDate.split(' ')[1] <= end)) { pageContext.bannerType = 'show'; pageContext.buttonDisabled = true; pageContext.showBanner = 'shiftConflict'; } }); } } } if (overTimeEndDisplayOrder == parseInt(calendar[value].weeklyScheduleDisplayOrder)) { if (calendar[value].weeklyScheduleIsOpen) { if (calendar[value].weeklyScheduleIsAllDay == true) { pageContext.bannerType = 'show'; pageContext.buttonDisabled = true; pageContext.showBanner = 'shiftConflict'; } else if (calendar[value].weeklyScheduleSchedule.length !== 0) { calendar[value].weeklyScheduleSchedule.forEach(function (element) { var start = element.start.split(' ')[1]; var end = element.end.split(' ')[1]; if ((pageContext.workforceOvertimeEndDate.split(' ')[1] >= start && pageContext.workforceOvertimeEndDate.split(' ')[1] <= end)) { pageContext.bannerType = 'show'; pageContext.buttonDisabled = true; pageContext.showBanner = 'shiftConflict'; } }); } } } } } } }"},{"name":"checkEndDate","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.workforceOvertimeStartDate !== 'undefined' && pageContext.workforceOvertimeStartDate !=='' && typeof pageContext.workforceOvertimeEndDate !== 'undefined' && pageContext.workforceOvertimeEndDate !== '') { pageContext.overtimeStartDate = new Date(pageContext.workforceOvertimeStartDate); pageContext.overtimeEndDate = new Date(pageContext.workforceOvertimeEndDate); if (pageContext.overtimeStartDate > pageContext.overtimeEndDate) { pageContext.workforceOvertimeEndDate = ''; pageContext.workforceOvertimeTotalTime = ''; } } }"},{"name":"clearBannerType","type":"script","actionDef":"function(pageContext){pageContext.bannerType ='hide';}"},{"name":"refreshDataGrid","gridId":["workforceOvertime"],"type":"RefreshGridOnSidePanel"}]}