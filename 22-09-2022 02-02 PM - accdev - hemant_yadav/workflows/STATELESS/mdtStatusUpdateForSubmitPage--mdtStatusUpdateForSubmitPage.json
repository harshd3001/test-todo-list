{"fetchTaskDetails":{"filter":"{$workOrderTaskId}={@workOrderTaskId} ","models":["workOrderTask"],"connectors":[{"exitPortType":"NextStep","nodeId":"processData"}],"columns":{"result":"workOrderTask.result","workOrderTaskId":"workOrderTask.id"},"name":"fetchTaskDetails","description":"fetch task details","inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"id":"fetchTaskDetails","outputVarMap":{"data":"taskDetail"},"nodeType":"QUERY"},"processData1":{"connectors":[{"exitPortType":"NextStep","nodeId":"logger"}],"contextChangePermitted":true,"name":"processData1","description":"Processing site data and task details","processRule":"contextVar.logLevel = 'INFO'; contextVar.message='contextVarForSubmitFf = '+ JSON.stringify(contextVar);","id":"processData1","nodeType":"PROCESS"},"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"upsertTask"}],"contextChangePermitted":true,"name":"processData","description":"Process services","processRule":"function nullCheck(a) { return (typeof a !== 'undefined' && a !== '' && a !== null); } function arrayCheck(a) { return (typeof a !== 'undefined' && Array.isArray(a) && a.length > 0); } contextVar.workOrderTask = []; var obj = {}; if (contextVar.initialEvidenceDataGrid) { obj['initialEvidenceDataGrid'] = contextVar.initialEvidenceDataGrid; } if (contextVar.initialComments) { obj['initialComments'] = contextVar.initialComments; } if (contextVar.servicesDataGrid) { let serviceGrid = JSON.parse(JSON.stringify(contextVar.servicesDataGrid)); let currentUser = [{ 'userName': arrayCheck(contextVar.currentUserDetail) ? contextVar.currentUserDetail[0].userName : contextVar.userName, 'userId': arrayCheck(contextVar.currentUserDetail) ? contextVar.currentUserDetail[0].userId : contextVar.userId, 'crew': { 'leadDetails': arrayCheck(contextVar.leadDetails) ? contextVar.leadDetails : [], 'crewId': contextVar.workOrderTaskAssignedToCrewId, 'crewName': contextVar.newCrewName }, 'userEmail': contextVar.userEmail, 'userContact': contextVar.contactPhone }]; let serviceGridWrapper = []; if (Array.isArray(serviceGrid)) { serviceGrid.some((sObj, i) => { let serviceMode = arrayCheck(sObj.selectedServiceType) ? sObj.selectedServiceType[0].listOptionAnswerId : ''; let serviceTypeId = arrayCheck(sObj.selectedService) ? sObj.selectedService[0].serviceTypeId : ''; let serviceName = arrayCheck(sObj.selectedService) ? sObj.selectedService[0].serviceName : ''; let serviceId = arrayCheck(sObj.selectedService) ? sObj.selectedService[0].serviceId : ''; if (serviceMode === '') { return false; } let indObj = { 'serviceMode': serviceMode, 'addedBy': currentUser[0].userName, 'addedByUserId': currentUser[0].userId, 'userEmail': currentUser[0].userEmail, 'userContact': currentUser[0].userContact, 'selectedService': { 'serviceTypeId': serviceTypeId, 'serviceName': serviceName, 'serviceId': serviceId } }; let selectItemInst, selectItemRem, selectItemServ, selectItemOthr; switch (serviceMode) { case 'assetInstallation': selectItemInst = sObj.selectedAssetToInstall; serviceGrid[i].assets = [{ 'catalogName': selectItemInst[0].catalogName, 'installedBaseSiteId': contextVar.siteId, 'installedBaseCatalogId': selectItemInst[0].installedBaseId }]; serviceGrid[i].addServicesTime = sObj.addInstallServicesTime; indObj = { ...indObj, 'addedOn': sObj.addInstallServicesTime, 'updatedOn': { 'time': sObj.addInstallServicesTime, 'notes': sObj.servicesNotes }, [serviceMode]: { 'installed': { 'assetId': selectItemInst[0].installedBaseId, 'assetName': selectItemInst[0].catalogName, 'catalogId': selectItemInst[0].catalogId, 'modelName': selectItemInst[0].catalogName, 'modelNumber': selectItemInst[0].catalogModelNumber, 'manufacturer': selectItemInst[0].manufacturerName, 'category': selectItemInst[0].assetCategory, 'categoryId': selectItemInst[0].assetCategoryId, 'manualUrl': selectItemInst[0].fileUrl, 'serialNumber': sObj.barcode, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.addInstallServicesTime, 'customerPrice': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].customerPrice !== 'undefined' && selectItemInst[0].customerPrice !== '') ? selectItemInst[0].customerPrice.toString() : '') : ((typeof selectItemInst[0].catalogCustomerPrice !== 'undefined' && selectItemInst[0].catalogCustomerPrice !== '') ? selectItemInst[0].catalogCustomerPrice.toString() : ''), 'estimatedQuantity': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].estimatedQuantity !== 'undefined' && selectItemInst[0].estimatedQuantity !== '') ? selectItemInst[0].estimatedQuantity.toString() : '') : '', 'unitPrice': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].unitPrice !== 'undefined' && selectItemInst[0].unitPrice !== '') ? selectItemInst[0].unitPrice.toString() : '') : ((typeof selectItemInst[0].catalogUnitPrice !== 'undefined' && selectItemInst[0].catalogUnitPrice !== '') ? selectItemInst[0].catalogUnitPrice.toString() : ''), 'workOrderInventoryId': (typeof selectItemInst[0].workOrderInventoryId !== 'undefined' && selectItemInst[0].workOrderInventoryId !== '') ? selectItemInst[0].workOrderInventoryId : '', 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes } } } }; break; case 'assetReplacement': selectItemInst = sObj.selectedAssetToInstall; selectItemRem = sObj.selectedAssetToRemove; serviceGrid[i].assets = [{ 'catalogName': selectItemInst[0].catalogName, 'installedBaseSiteId': contextVar.siteId, 'installedBaseCatalogId': selectItemInst[0].installedBaseId }]; serviceGrid[i].addServicesTime = sObj.addReplaceServicesTime; indObj = { ...indObj, 'addedOn': sObj.addReplaceServicesTime, 'updatedOn': { 'time': sObj.addReplaceServicesTime, 'notes': sObj.servicesNotes }, [serviceMode]: { 'installed': { 'assetId': selectItemInst[0].installedBaseId, 'assetName': selectItemInst[0].catalogName, 'catalogId': selectItemInst[0].catalogId, 'modelName': selectItemInst[0].catalogName, 'modelNumber': selectItemInst[0].catalogModelNumber, 'manufacturer': selectItemInst[0].manufacturerName, 'category': selectItemInst[0].assetCategory, 'categoryId': selectItemInst[0].assetCategoryId, 'manualUrl': selectItemInst[0].fileUrl, 'serialNumber': sObj.barcode, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.selectedAssetToInstallCapturedTime, 'customerPrice': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].customerPrice !== 'undefined' && selectItemInst[0].customerPrice !== '') ? selectItemInst[0].customerPrice.toString() : '') : ((typeof selectItemInst[0].catalogCustomerPrice !== 'undefined' && selectItemInst[0].catalogCustomerPrice !== '') ? selectItemInst[0].catalogCustomerPrice.toString() : ''), 'estimatedQuantity': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].estimatedQuantity !== 'undefined' && selectItemInst[0].estimatedQuantity !== '') ? selectItemInst[0].estimatedQuantity.toString() : '') : '', 'unitPrice': (typeof selectItemInst[0].suggestedFlag !== 'undefined' && selectItemInst[0].suggestedFlag !== '' && Number(selectItemInst[0].suggestedFlag) === 1) ? ((typeof selectItemInst[0].unitPrice !== 'undefined' && selectItemInst[0].unitPrice !== '') ? selectItemInst[0].unitPrice.toString() : '') : ((typeof selectItemInst[0].catalogUnitPrice !== 'undefined' && selectItemInst[0].catalogUnitPrice !== '') ? selectItemInst[0].catalogUnitPrice.toString() : ''), 'workOrderInventoryId': (typeof selectItemInst[0].workOrderInventoryId !== 'undefined' && selectItemInst[0].workOrderInventoryId !== '') ? selectItemInst[0].workOrderInventoryId : '', 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes } }, 'removed': { 'assetId': selectItemRem[0].installedBaseId, 'assetName': selectItemRem[0].catalogName, 'catalogId': selectItemRem[0].catalogId, 'modelName': selectItemRem[0].catalogName, 'modelNumber': selectItemRem[0].catalogModelNumber, 'manufacturer': selectItemRem[0].manufacturerName, 'category': selectItemRem[0].assetCategory, 'categoryId': selectItemRem[0].assetCategoryId, 'manualUrl': selectItemRem[0].fileUrl, 'serialNumber': selectItemRem[0].serialNumber, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.selectedAssetToRemoveCapturedTime, 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes }, 'removalReason': sObj.assetRemovalFaulty, 'removedTime': sObj.selectedAssetToRemoveCapturedTime } } }; break; case 'assetRemoval': selectItemRem = sObj.selectedAssetToRemove; serviceGrid[i].assets = [{ 'catalogName': selectItemRem[0].catalogName, 'installedBaseSiteId': contextVar.siteId, 'installedBaseCatalogId': selectItemRem[0].installedBaseId }]; serviceGrid[i].addServicesTime = sObj.addRemoveServicesTime; indObj = { ...indObj, 'addedOn': sObj.addRemoveServicesTime, 'updatedOn': { 'time': sObj.addRemoveServicesTime, 'notes': sObj.servicesNotes }, [serviceMode]: { 'removed': { 'assetId': selectItemRem[0].installedBaseId, 'assetName': selectItemRem[0].catalogName, 'catalogId': selectItemRem[0].catalogId, 'modelName': selectItemRem[0].catalogName, 'modelNumber': selectItemRem[0].catalogModelNumber, 'manufacturer': selectItemRem[0].manufacturerName, 'category': selectItemRem[0].assetCategory, 'categoryId': selectItemRem[0].assetCategoryId, 'manualUrl': selectItemRem[0].fileUrl, 'serialNumber': selectItemRem[0].serialNumber, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.addRemoveServicesTime, 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes }, 'removalReason': sObj.assetRemovalFaulty, 'removedTime': sObj.addRemoveServicesTime } } }; break; case 'assetServicing': selectItemServ = sObj.selectedAssetToService; serviceGrid[i].assets = [{ 'catalogName': selectItemServ[0].catalogName, 'installedBaseSiteId': contextVar.siteId, 'installedBaseCatalogId': selectItemServ[0].installedBaseId }]; serviceGrid[i].addServicesTime = sObj.addServiceServicesTime; indObj = { ...indObj, 'addedOn': sObj.addServiceServicesTime, 'updatedOn': { 'time': sObj.addServiceServicesTime, 'notes': sObj.servicesNotes }, [serviceMode]: { 'serviced': { 'assetId': selectItemServ[0].installedBaseId, 'assetName': selectItemServ[0].catalogName, 'catalogId': selectItemServ[0].catalogId, 'modelName': selectItemServ[0].catalogName, 'modelNumber': selectItemServ[0].catalogModelNumber, 'manufacturer': selectItemServ[0].manufacturerName, 'category': selectItemServ[0].assetCategory, 'categoryId': selectItemServ[0].assetCategoryId, 'manualUrl': selectItemServ[0].fileUrl, 'serialNumber': selectItemServ[0].serialNumber, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.addServiceServicesTime, 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes } } } }; break; case 'assetOthers': selectItemOthr = sObj.selectAssetOthers; serviceGrid[i].assets = arrayCheck(selectItemOthr) ? [{ 'catalogName': selectItemOthr[0].catalogName, 'installedBaseSiteId': contextVar.siteId, 'installedBaseCatalogId': selectItemOthr[0].installedBaseId }] : []; serviceGrid[i].addServicesTime = sObj.addOthersServicesTime; indObj = { ...indObj, 'addedOn': sObj.selectAssetOthersCapturedTime, 'updatedOn': { 'time': sObj.selectAssetOthersCapturedTime, 'notes': sObj.servicesNotes }, [serviceMode]: { 'others': { 'details': sObj.otherDetails, 'serialNumber': selectItemOthr[0].serialNumber, 'photoOfSerialNum': sObj.photoSerialNumber, 'installedTime': sObj.selectAssetOthersCapturedTime, 'optionalPhotoPlusNotes': { 'capturedPhoto': arrayCheck(sObj.addServicePhotosDataGrid) ? sObj.addServicePhotosDataGrid : [], 'serviceOptionalNotes': sObj.servicesNotes } } } }; if (arrayCheck(selectItemOthr)) { indObj[serviceMode].others = { ...indObj[serviceMode].others, 'assetId': selectItemOthr[0].installedBaseId, 'assetName': selectItemOthr[0].catalogName, 'catalogId': selectItemOthr[0].catalogId, 'modelName': selectItemOthr[0].catalogName, 'modelNumber': selectItemOthr[0].catalogModelNumber, 'manufacturer': selectItemOthr[0].manufacturerName, 'category': selectItemOthr[0].assetCategory, 'categoryId': selectItemOthr[0].assetCategoryId, 'manualUrl': selectItemOthr[0].fileUrl }; } break; } serviceGridWrapper.push(indObj); }); } obj['servicesDataGrid'] = serviceGrid; obj['serviceGridWrapper'] = serviceGridWrapper; } obj['suggestedMaterials'] = contextVar.fetchSuggestedMaterials; obj['additionalMaterials'] = contextVar.additionalMaterialsDataGrid; if (contextVar.customerSignature) { obj['customerSignature'] = contextVar.customerSignature; } if (contextVar.checkOutCheckBoxForSubmitCapturedTime) { obj['SubmittedDate'] = contextVar.checkOutCheckBoxForSubmitCapturedTime; } else if (contextVar.submitTaskTime) { obj['SubmittedDate'] = contextVar.submitTaskTime; } else if (contextVar.reportIssueCapturedTime) { obj['SubmittedDate'] = contextVar.reportIssueCapturedTime; } if (contextVar.checkOutCheckBoxForSubmitLocationCoordinates) { obj['checkOutSubmitLocationCoordinates'] = contextVar.checkOutCheckBoxForSubmitLocationCoordinates; } if (contextVar.submitProgressEvidenceDataGrid) { obj['submitProgressEvidenceDataGrid'] = contextVar.submitProgressEvidenceDataGrid; } if (contextVar.submitProgressComments) { obj['submitProgressComments'] = contextVar.submitProgressComments; } if (contextVar.recordInitialEvidenceTime) { obj['recordInitialEvidenceTime'] = contextVar.recordInitialEvidenceTime; } if (contextVar.recordInitialEvidenceLocationCoordinates) { obj['recordInitialEvidenceLocationCoordinates'] = contextVar.recordInitialEvidenceLocationCoordinates; } if (contextVar.recordSubmitServicesTime) { obj['recordSubmitServicesTime'] = contextVar.recordSubmitServicesTime; } if (contextVar.submitServicesLocationCoordinates) { obj['submitServicesLocationCoordinates'] = contextVar.submitServicesLocationCoordinates; } if (contextVar.newSiteAddress && contextVar.newSiteAddress.address) { obj['siteChangeAddress'] = contextVar.newSiteAddress.address; } else { obj['siteChangeAddress'] = contextVar.newSiteAddressText; } if (contextVar.submitTaskLocationCoordinates) { obj['submitTaskLocationCoordinates'] = contextVar.submitTaskLocationCoordinates; } if (contextVar.finalEvidenceDataGrid) { obj['finalEvidenceDataGrid'] = contextVar.finalEvidenceDataGrid; } if (contextVar.finalComments) { obj['finalComments'] = contextVar.finalComments; } if (contextVar.incorrectAddress) { obj['incorrectAddress'] = contextVar.incorrectAddress; } if (contextVar.endTravelLocationCoordinates) { obj['endTravelLocationCoordinates'] = contextVar.endTravelLocationCoordinates; } if (contextVar.endTravelDate) { obj['endTravelDate'] = contextVar.endTravelDate; } if (contextVar.crewAttendanceDetailsDataGrid) { obj['crewAttendanceDetailsDataGrid'] = contextVar.crewAttendanceDetailsDataGrid; if (contextVar.crewAttendanceDetailsDataGrid[0].workforceCrewCrewId) { obj['crewId'] = contextVar.crewAttendanceDetailsDataGrid[0].workforceCrewCrewId; } if (contextVar.crewAttendanceDetailsDataGrid[0].crewLeadUserId) { obj['crewLeadId'] = contextVar.crewAttendanceDetailsDataGrid[0].crewLeadUserId; } } if (contextVar.crewMobileAccess == 'noAccess' || contextVar.crewMobileAccess == 'partialAccess') { if (contextVar.assignedToUserId == contextVar.leadUserId || contextVar['__sys__loggedIn_UserId'] == contextVar.leadUserId) { if (contextVar.leadDetails && Array.isArray(contextVar.leadDetails) && contextVar.leadDetails.length > 0) { obj['userEmail'] = contextVar.leadDetails[0].leadEmailId; obj['userPhoneNumber'] = contextVar.leadDetails[0].leadPhoneNumber; obj['userName'] = contextVar.leadDetails[0].leadName; } } } else { obj['userName'] = contextVar.userName; obj['userEmail'] = contextVar.userEmail; obj['userPhoneNumber'] = contextVar.userPhoneNumber; } if (contextVar.submitType) { obj['submitType'] = contextVar.submitType; } if (contextVar.approvedBy) { obj['approvedBy'] = contextVar.approvedBy; } if (typeof contextVar.taskDetail[0].result == 'undefined' || contextVar.taskDetail[0].result == '') { contextVar.result = []; } else { contextVar.result = contextVar.taskDetail[0].result; } contextVar.result.push(obj); var workOrderTaskObj = {}; if ((!contextVar.isCrewTask) || (contextVar.crewMobileAccess == 'noAccess') || ((contextVar.crewMobileAccess == 'partialAccess') && (contextVar.assignedToUserId == contextVar.leadUserId || contextVar['__sys__loggedIn_UserId'] == contextVar.leadUserId))) { workOrderTaskObj['statusId'] = contextVar.statusId; if (contextVar.submitType == 'endTask') { workOrderTaskObj['statusId'] = 'workOrderTaskPendingReview'; } } workOrderTaskObj['result'] = contextVar.result; workOrderTaskObj['id'] = contextVar.workOrderTaskId; if (contextVar.customerSignature) { workOrderTaskObj['customerSignature'] = contextVar.customerSignature; } if (contextVar.checkInTime) { workOrderTaskObj['actualStartTime'] = contextVar.checkInTime; } if (contextVar.submitTaskTime) { workOrderTaskObj['completedDate'] = contextVar.submitTaskTime; } if (contextVar.incidentDetails) { workOrderTaskObj['incidentDetails'] = contextVar.incidentDetails; } if (contextVar.eventType) { workOrderTaskObj['eventType'] = contextVar.eventType; } contextVar.workOrderTask.push(workOrderTaskObj); contextVar.subAction = 'upsertWorkOrderTask';","id":"processData","nodeType":"PROCESS","jsEngine":"es6"},"upsertTask":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"processId":"QIFGIU7FDJ","name":"upsertTask","description":"upsertTask","inputVarMap":{"workOrderTask":"workOrderTask","subAction":"subAction"},"outputVarMap":{},"nodeType":"WORKFLOW"},"workflowContext":{},"logger":{"connectors":[{"exitPortType":"NextStep","nodeId":"isSubmitType"}],"name":"logger","description":"Provide some description for your logger node","inputVarMap":{"logLevel":"logLevel","message":"message"},"id":"logger","nodeType":"LOGGER"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"isSubmitType"}],"name":"start","description":" Start","id":"start","nodeType":"START"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"id":"end","nodeType":"END"},"callCrewCheckOutWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetails"}],"processId":"mdtCrewCheckoutWF","name":"callCrewCheckOutWF","description":"call the mdtCrewCheckoutWF to update the crew checkout","inputVarMap":{},"id":"callCrewCheckOutWF","outputVarMap":{},"nodeType":"WORKFLOW"},"isSubmitType":{"connectors":[{"exitPortType":"TrueStep","nodeId":"callCrewCheckOutWF"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isSubmitType","description":"isSubmitType","processRule":"(typeof contextVar.submitType !== 'undefined' && contextVar.submitType !== '')","nodeType":"DECISION"},"workflowNodes":["start","processData1","logger","isSubmitType","callCrewCheckOutWF","fetchTaskDetails","processData","upsertTask","end"]}