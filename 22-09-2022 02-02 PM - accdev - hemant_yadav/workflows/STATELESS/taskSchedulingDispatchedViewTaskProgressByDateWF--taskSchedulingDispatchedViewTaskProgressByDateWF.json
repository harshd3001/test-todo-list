{"processOldTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskProgressDataInDiscontinue"}],"contextChangePermitted":true,"name":"processOldTaskData","description":"processOldTaskData","processRule":"contextVar.taskProgressDataByDate = []; if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult.length > 0) { contextVar.serviceArray = []; contextVar.initialEvidenceDataGridArray = []; contextVar.addServicePhotosDataGrid = []; contextVar.servicesDataGrid = []; contextVar.workOrderTaskStartDate = contextVar.fetchTaskProgressData[0].workOrderTaskStartDate; if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidence != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidence.length != '') { var initialEvidenceObj = {}; initialEvidenceObj['initialEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidence.comment; initialEvidenceObj['initialEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidence.media; initialEvidenceObj['capturedBy'] = contextVar.fetchTaskProgressData[0].userName; initialEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; initialEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; initialEvidenceObj['fileType'] = 'JPG'; initialEvidenceObj['initialEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; initialEvidenceObj['initialEvidenceLocationCoordinates'] = ''; initialEvidenceObj['initialComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeComments; contextVar.initialEvidenceDataGridArray.push(initialEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalFirst != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalFirst.length != '') { var initialEvidenceObj = {}; initialEvidenceObj['initialEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalFirst.comment; initialEvidenceObj['initialEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalFirst.media; initialEvidenceObj['capturedBy'] = contextVar.fetchTaskProgressData[0].userName; initialEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; initialEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; initialEvidenceObj['fileType'] = 'JPG', initialEvidenceObj['initialEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; initialEvidenceObj['initialEvidenceLocationCoordinates'] = ''; initialEvidenceObj['initialComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeComments; contextVar.initialEvidenceDataGridArray.push(initialEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalSecond != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalSecond != '') { var initialEvidenceObj = {}; initialEvidenceObj['initialEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalSecond.comment; initialEvidenceObj['initialEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeCaptureEvidenceOptionalSecond.media; initialEvidenceObj['capturedBy'] = contextVar.fetchTaskProgressData[0].userName; initialEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; initialEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; initialEvidenceObj['fileType'] = 'JPG', initialEvidenceObj['initialEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; initialEvidenceObj['initialEvidenceLocationCoordinates'] = ''; initialEvidenceObj['initialComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeComments; contextVar.initialEvidenceDataGridArray.push(initialEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeComments != 'undefined') { contextVar.initialCommentsSection = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].beforeComments; } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterComments != 'undefined') { contextVar.finalCommentsSection = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterComments; } contextVar.finalEvidenceDataGridArray = []; if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidence != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidence.length != '') { var finalEvidenceObj = {}; finalEvidenceObj['finalEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidence.comment; finalEvidenceObj['finalEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidence.media; finalEvidenceObj['submittedBy'] = contextVar.fetchTaskProgressData[0].userName; finalEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; finalEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; finalEvidenceObj['fileType'] = 'JPG', finalEvidenceObj['finalEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; finalEvidenceObj['finalComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterComments; finalEvidenceObj['finalEvidenceLocationCoordinates'] = ''; contextVar.finalEvidenceDataGridArray.push(finalEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalFirst != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalFirst.length != '') { var finalEvidenceObj = {}; finalEvidenceObj['finalEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalFirst.comment; finalEvidenceObj['finalEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalFirst.media; finalEvidenceObj['submittedBy'] = contextVar.fetchTaskProgressData[0].userName; finalEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; finalEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; finalEvidenceObj['fileType'] = 'JPG', finalEvidenceObj['finalEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; finalEvidenceObj['finalEvidenceLocationCoordinates'] = ''; finalEvidenceObj['finalComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterComments; contextVar.finalEvidenceDataGridArray.push(finalEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalSecond != 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalSecond.length != '') { var finalEvidenceObj = {}; finalEvidenceObj['finalEvidenceNotes'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalSecond.comment; finalEvidenceObj['finalEvidence'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterCaptureEvidenceOptionalSecond.media; finalEvidenceObj['submittedBy'] = contextVar.fetchTaskProgressData[0].userName; finalEvidenceObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; finalEvidenceObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; finalEvidenceObj['fileType'] = 'JPG', finalEvidenceObj['finalEvidenceCapturedTime'] = contextVar.workOrderTaskStartDate; finalEvidenceObj['finalEvidenceLocationCoordinates'] = ''; finalEvidenceObj['finalComments'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].afterComments; contextVar.finalEvidenceDataGridArray.push(finalEvidenceObj); } if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid !== 'undefined' && contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid.length > 0) { for (var i = 0; i < contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid.length; i++) { contextVar.addServicePhotosDataGrid = []; contextVar.serviceArrayObj = {}; if (typeof contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].taskActivity !== 'undefined') { contextVar.serviceArrayObj['selectedService'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].taskActivity; contextVar.serviceArrayObj['serviceType'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].taskActivity[0].serviceName; contextVar.serviceArrayObj['serviceTypeId'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].taskActivity[0].serviceTypeId; contextVar.serviceArrayObj['serviceId'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].taskActivity[0].serviceId; contextVar.serviceArrayObj['capturedBy'] = contextVar.fetchTaskProgressData[0].userName; contextVar.serviceArrayObj['emailId'] = contextVar.fetchTaskProgressData[0].userEmail; contextVar.serviceArrayObj['phoneNumber'] = contextVar.fetchTaskProgressData[0].userPhoneNumber; contextVar.serviceArrayObj['servicesNotes'] =  contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].activityComments; } if (contextVar.workOrderTaskStartDate) { contextVar.serviceArrayObj['completedOn'] = contextVar.workOrderTaskStartDate; contextVar.serviceArrayObj['addServicesTime']= contextVar.workOrderTaskStartDate; } if (contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo1) { var addServicePhotosDataGridObj = {}; addServicePhotosDataGridObj['servicePhotos'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo1; addServicePhotosDataGridObj['fileType'] = 'JPG'; addServicePhotosDataGridObj['servicePhotosCapturedTime'] = contextVar.workOrderTaskStartDate; addServicePhotosDataGridObj['servicePhotosLocationCoordinates'] = '-'; addServicePhotosDataGridObj['servicePhoto'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo1.media; addServicePhotosDataGridObj['servicePhotoComment'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo1.comment; contextVar.addServicePhotosDataGrid.push(addServicePhotosDataGridObj); } if (contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo2Optional) { var addServicePhotosDataGridObj = {}; addServicePhotosDataGridObj['servicePhotos'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo2Optional; addServicePhotosDataGridObj['fileType'] = 'JPG'; addServicePhotosDataGridObj['servicePhotosCapturedTime'] = contextVar.workOrderTaskStartDate; addServicePhotosDataGridObj['servicePhotosLocationCoordinates'] = '-'; addServicePhotosDataGridObj['servicePhoto'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo2Optional.media; addServicePhotosDataGridObj['servicePhotoComment'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo2Optional.comment; contextVar.addServicePhotosDataGrid.push(addServicePhotosDataGridObj); } if (contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo3Optional) { var addServicePhotosDataGridObj = {}; addServicePhotosDataGridObj['servicePhotos'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo3Optional; addServicePhotosDataGridObj['fileType'] = 'JPG'; addServicePhotosDataGridObj['servicePhotosCapturedTime'] = contextVar.workOrderTaskStartDate; addServicePhotosDataGridObj['servicePhotosLocationCoordinates'] = '-'; addServicePhotosDataGridObj['servicePhoto'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo3Optional.media; addServicePhotosDataGridObj['servicePhotoComment'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].photo3Optional.comment; contextVar.addServicePhotosDataGrid.push(addServicePhotosDataGridObj); } if (contextVar.addServicePhotosDataGrid.length > 0) { contextVar.serviceArrayObj['addServicePhotosDataGrid'] = contextVar.addServicePhotosDataGrid; } if (contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].assets) { contextVar.serviceArrayObj['assets'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].assets; contextVar.serviceArrayObj['assetName'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].assets[0].catalogName; contextVar.serviceArrayObj['assetNumber'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].assets[0].installedBaseCatalogId; } if (contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].barcode) { contextVar.serviceArrayObj['barcode'] = contextVar.fetchTaskProgressData[0].workOrderTaskResult[0].activityDataGrid[i].barcode; } contextVar.serviceArray.push(contextVar.serviceArrayObj); } } if (contextVar.initialEvidenceDataGridArray) { contextVar.initialEvidenceDataGrid = contextVar.initialEvidenceDataGridArray; } if (contextVar.initialComments) { contextVar.initialComments = contextVar.initialCommentsSection; } if (contextVar.finalEvidenceDataGridArray) { contextVar.finalEvidenceDataGrid = contextVar.finalEvidenceDataGridArray; } if (typeof contextVar.finalCommentsSection != 'undefined' && contextVar.finalCommentsSection != '') { contextVar.finalComments = contextVar.finalCommentsSection; } if (contextVar.serviceArray) { contextVar.servicesDataGrid = contextVar.serviceArray; } contextVar.submitType = 'endTask'; } if (contextVar.fetchTaskProgressData[0].workOrderTaskStartDate) { var unformatedDate = new Date(contextVar.fetchTaskProgressData[0].workOrderTaskStartDate); var startDate = (formatDate(unformatedDate)); } function formatDate(nowDate) { return nowDate.getDate() + '-' + (nowDate.getMonth() + 1) + '-' + nowDate.getFullYear(); } var finalEvidenceCount = '-', servicesDelivered = '-', initialLength = '-'; if (contextVar.finalEvidenceDataGrid.length > 0) { finalEvidenceCount = contextVar.finalEvidenceDataGrid.length; } if (contextVar.initialEvidenceDataGrid.length > 0) { initialLength = contextVar.initialEvidenceDataGrid.length; } if (contextVar.servicesDataGrid.length > 0) { servicesDelivered = contextVar.servicesDataGrid.length; } var obj = {}; obj['date'] = startDate; obj['initialEvidence'] = contextVar.initialEvidenceDataGrid; obj['finalEvidenceArray'] = contextVar.finalEvidenceDataGrid; obj['servicesData'] = contextVar.servicesDataGrid; obj['initialComments'] = contextVar.initialComments; obj['finalComments'] = contextVar.finalComments; obj['initialEvidenceCount'] = initialLength; obj['finalEvidenceCount'] = finalEvidenceCount; obj['servicesDeliveredCount'] = servicesDelivered; contextVar.taskProgressDataByDate.push(obj);","nodeType":"PROCESS"},"isResultAvailableForOldTask":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processOldTaskData"},{"exitPortType":"FalseStep","nodeId":"processTaskProgressData"}],"name":"isResultAvailableForOldTask","description":"isResultAvailableForOldTask","processRule":"(contextVar.resultFlag)","nodeType":"DECISION"},"callBackwardCompatibilityWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"ProcessResourcesData"}],"processId":"backwardCompatibilityForTaskResultsWF","name":"callBackwardCompatibilityWF","description":"callBackwardCompatibilityWF","inputVarMap":{"taskProgressDataByDate":"inputData","viewType":"viewType"},"id":"callBackwardCompatibilityWF","outputVarMap":{"outputData":"taskProgressDataByDate"},"nodeType":"WORKFLOW"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"queryListOptionData"}],"name":"start","description":"Start","nodeType":"START"},"ProcessResourcesData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"ProcessResourcesData","description":"ProcessResourcesData","processRule":"contextVar.taskProgressDataByDate.forEach(element => { if (typeof element.servicesData !== 'undefined' && element.servicesData.length > 0) { element.servicesData.forEach(ele => { if (typeof ele.selectedServiceData !== 'undefined' && ele.selectedServiceData.length > 0) { ele.selectedServiceData.forEach(e => { if (new Date(ele.completedOn).getTime() === new Date(e.addedOn).getTime()) { e['serviceModeName'] = contextVar.responseData[contextVar.userLocale][e.serviceMode]; } }); } }); } });","id":"ProcessResourcesData","nodeType":"PROCESS","jsEngine":"es6"},"callFetchResourcesForLocaleWF":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskProgressData"}],"processId":"fetchResourcesForLocale","name":"callFetchResourcesForLocaleWF","description":"callFetchResourcesForLocaleWF","inputVarMap":{"resourceIdList":"resourceIdList","userLocale":"userLocale"},"outputVarMap":{},"nodeType":"WORKFLOW"},"processTaskProgressData":{"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskProgressDataInDiscontinue"}],"contextChangePermitted":true,"name":"processTaskProgressData","description":"processTaskProgressData","processRule":"contextVar.taskProgressDataByDate = []; var timeZone = contextVar.timeZone ? contextVar.timeZone : 'Asia/Calcutta'; var dateArray = []; var dateCounter = {}; var initialEvidence = []; function formatDate(date) { var d = new Date(new Date(date + ' UTC').toLocaleString('en-US', { timeZone: timeZone })), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(); if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; return [year, month, day].join('-'); } function formatToLocalDate(date) { var d = new Date(new Date(date + ' UTC').toLocaleString('en-US', { timeZone: timeZone })), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(), hour = d.getHours(), min = d.getMinutes(), sec = d.getSeconds(); if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; if (hour.length < 2) hour = '0' + hour; if (min.length < 2) min = '0' + min; if (sec.length < 2) sec = '0' + sec; times = [hour, min, sec].join(':'); space = (' '); date1 = [year, month, day].join('-'); date2 = date1.concat(space); resultTimeTwo = date2.concat(times); return resultTimeTwo; } if (typeof contextVar.fetchTaskProgressData != 'undefined' && contextVar.fetchTaskProgressData != '') { contextVar.fetchTaskProgressData.forEach(function(val, i) { val.workOrderTaskResult.forEach(function(e) { if (e.SubmittedDate) { var temp = formatDate(e.SubmittedDate); dateArray.push(temp); } }); }); } dateArray.forEach(function(date) { if (!dateCounter[date]) { dateCounter[date] = 0; } dateCounter[date] += 1; }); Object.keys(dateCounter).forEach(function() { contextVar.taskProgressDataByDate.push({ 'date': '', 'initialEvidence': [], 'servicesData': [], 'finalEvidenceArray': [], 'submitProgressArray': [], 'submitProgressArrayCount': '-', 'initialEvidenceCount': '-', 'servicesDeliveredCount': '-', 'finalEvidenceCount': '-' }); }); Object.keys(dateCounter).forEach(function(prop, index) { contextVar.taskProgressDataByDate[index].date = prop; if (dateCounter[prop] > 0) { for (var i = 0; i < contextVar.fetchTaskProgressData.length; i++) { if (typeof contextVar.fetchTaskProgressData[i].workOrderTaskResult != 'undefined') { contextVar.fetchTaskProgressData[i].workOrderTaskResult.forEach(function(e) { if (e.SubmittedDate) { if (formatDate(e.SubmittedDate) === prop) { if (typeof e.initialEvidenceDataGrid !== 'undefined' && e.initialEvidenceDataGrid.length > 0) { e.initialEvidenceDataGrid.forEach(function(v) { v.initialComments = ''; v.capturedBy = e.userName; v.fileType = 'JPG'; v.phoneNumber = e.userPhoneNumber; v.emailId = e.userEmail; v.initialComments = e.initialComments; }); for (var u = 0; u <= e.initialEvidenceDataGrid.length; u++) { if (e.initialEvidenceDataGrid[u] && formatDate(e.SubmittedDate) === formatDate(e.initialEvidenceDataGrid[u].initialEvidenceCapturedTime)) { contextVar.taskProgressDataByDate[index].initialEvidence.push(e.initialEvidenceDataGrid[u]); } } contextVar.taskProgressDataByDate[index].initialEvidenceCount = contextVar.taskProgressDataByDate[index].initialEvidence.length; } if (typeof e.servicesDataGrid !== 'undefined' && e.servicesDataGrid.length > 0) { e.servicesDataGrid.forEach(function(m) { m.phoneNumber = e.userPhoneNumber; m.emailId = e.userEmail; m.serviceType = m.selectedService[0].serviceName; if (typeof e.serviceGridWrapper !== 'undefined') { var selectedServiceData = []; e.serviceGridWrapper.forEach(function(ele) { if (ele.selectedService.serviceId === m.selectedService[0].serviceId && ele.serviceMode === m.selectedServiceType[0].listOptionAnswerId && m.addServicesTime === ele.addedOn) { if (typeof m.assetRemovalReason !== 'undefined' && m.assetRemovalReason !== '' && (ele.serviceMode === 'assetReplacement' || ele.serviceMode === 'assetRemoval')) { ele['reason'] = contextVar.responseData[contextVar.userLocale][m.assetRemovalReason]; } m.capturedBy = ele.addedBy; m.phoneNumber = ele.userContact; m.emailId = ele.userEmail; selectedServiceData.push(ele); } }); m.selectedServiceData = selectedServiceData; } if (typeof m.assets !== 'undefined' && m.assets.length > 0) { m.assetName = m.assets[0].catalogName; m.assetNumber = m.barcode; } else { m.assetName = '-'; m.assetNumber = '-'; } m.completedOn = m.addServicesTime; }); e.servicesDataGrid.forEach(function(m) { if (m.addServicePhotosDataGrid) m.addServicePhotosDataGrid.forEach(function(k) { (k.servicePhotoComment = k.servicePhotos.comment); (k.servicePhoto = k.servicePhotos.media); (k.capturedBy = k.capturedBy); (k.fileType = 'JPG'); }); }); if (e.servicesDataGrid.selectedService) { e.servicesDataGrid.selectedService.forEach(function(v) { v.capturedBy = e.userName; v.fileType = 'JPG'; v.phoneNumber = e.userPhoneNumber; v.emailId = e.userEmail; }); } for (var v = 0; v <= e.servicesDataGrid.length; v++) { if (e.servicesDataGrid[v] && formatDate(e.SubmittedDate) === formatDate(e.servicesDataGrid[v].addServicesTime)) { contextVar.taskProgressDataByDate[index].servicesData.push(e.servicesDataGrid[v]); } } } if (typeof e.submitType !== 'undefined' && e.submitType !== '' && e.submitType === 'endTask') { if (typeof e.finalEvidenceDataGrid !== 'undefined' && e.finalEvidenceDataGrid !== '') { e.finalEvidenceDataGrid.forEach(function(v) { v.submittedBy = e.userName; v.fileType = 'JPG'; v.phoneNumber = e.userPhoneNumber; v.emailId = e.userEmail; v.finalComments = e.finalComments; v.submitProgressComments = e.submitProgressComments; }); for (var w = 0; w <= e.finalEvidenceDataGrid.length; w++) { if (e.finalEvidenceDataGrid[w] && formatDate(e.SubmittedDate) === formatDate(e.finalEvidenceDataGrid[w].finalEvidenceCapturedTime)) { contextVar.taskProgressDataByDate[index].finalEvidenceArray.push(e.finalEvidenceDataGrid[w]); } } contextVar.taskProgressDataByDate[index].finalEvidenceCount = contextVar.taskProgressDataByDate[index].finalEvidenceArray.length; } } if (typeof e.submitType !== 'undefined' && e.submitType !== '' && e.submitType === 'submitTaskProgress') { if (typeof e.submitProgressEvidenceDataGrid !== 'undefined' && e.submitProgressEvidenceDataGrid !== '' && e.submitProgressEvidenceDataGrid.length > 0) { e.submitProgressEvidenceDataGrid.forEach(function(v) { v.submittedBy = e.userName; v.fileType = 'JPG'; v.phoneNumber = e.userPhoneNumber; v.emailId = e.userEmail; v.finalComments = e.finalComments; v.submitProgressComments = e.submitProgressComments; }); for (var w = 0; w <= e.submitProgressEvidenceDataGrid.length; w++) { if (e.submitProgressEvidenceDataGrid[w] && formatDate(e.SubmittedDate) === formatDate(e.submitProgressEvidenceDataGrid[w].finalEvidenceCapturedTime)) { contextVar.taskProgressDataByDate[index].submitProgressArray.push(e.submitProgressEvidenceDataGrid[w]); } } contextVar.taskProgressDataByDate[index].submitProgressArrayCount = contextVar.taskProgressDataByDate[index].submitProgressArray.length; } } } } }); } } } contextVar.initialEvidenceArray = []; var initialEvidenceFilter = contextVar.taskProgressDataByDate[index].initialEvidence; contextVar.initialEvidenceArray = initialEvidenceFilter.reduce((acc, current) => { let initialEvidenceArray = acc.find(item => item.initialEvidenceCapturedTime === current.initialEvidenceCapturedTime); if (!initialEvidenceArray) { return acc.concat([current]); } else { return acc; } }, []); contextVar.initialEvidenceArray.forEach(function(v) { v.initialEvidenceCaptured = formatToLocalDate(v.initialEvidenceCapturedTime); }); contextVar.taskProgressDataByDate[index].initialComments = (typeof contextVar.taskProgressDataByDate[index].initialEvidence !== 'undefined' && contextVar.taskProgressDataByDate[index].initialEvidence.length > 0) ? contextVar.taskProgressDataByDate[index].initialEvidence.reverse()[contextVar.initialEvidenceArray.length - 1].initialComments : ''; contextVar.taskProgressDataByDate[index].initialEvidence = contextVar.initialEvidenceArray; contextVar.taskProgressDataByDate[index].initialEvidenceCount = contextVar.initialEvidenceArray.length; var filter = contextVar.taskProgressDataByDate[index].servicesData.reverse(); contextVar.filteredArr = filter.reduce((acc, current) => { let newArry = acc.find(item => new Date(item.addServicesTime).getTime() === new Date(current.addServicesTime).getTime()); if (!newArry) { return acc.concat([current]); } else { return acc; } }, []); contextVar.filteredArr.forEach(function(v) { v.servicesCapturedTime = formatToLocalDate(v.addServicesTime); }); contextVar.taskProgressDataByDate[index].servicesData = contextVar.filteredArr; contextVar.taskProgressDataByDate[index].servicesDeliveredCount = contextVar.filteredArr.length; contextVar.serviceProcess = []; var serviceProcessfilter = contextVar.taskProgressDataByDate[index].submitProgressArray; contextVar.serviceProcess = serviceProcessfilter.reduce((acc, current) => { let serviceProcess = acc.find(item => item.finalEvidenceCapturedTime === current.finalEvidenceCapturedTime); if (!serviceProcess) { return acc.concat([current]); } else { return acc; } }, []); contextVar.serviceProcess.forEach(function(v) { v.serviceProgressCapturedTime = formatToLocalDate(v.finalEvidenceCapturedTime); }); contextVar.taskProgressDataByDate[index].submitProgressArray = contextVar.serviceProcess; contextVar.taskProgressDataByDate[index].submitProgressArrayCount = contextVar.serviceProcess.length; contextVar.finalService = []; var finalEvidencefilter = contextVar.taskProgressDataByDate[index].finalEvidenceArray; contextVar.finalService = finalEvidencefilter.reduce((acc, current) => { let finalUpdate = acc.find(item => item.finalEvidenceCapturedTime === current.finalEvidenceCapturedTime); if (!finalUpdate) { return acc.concat([current]); } else { return acc; } }, []); contextVar.finalService.forEach(function(v) { v.finalEvidenceCaptured = formatToLocalDate(v.finalEvidenceCapturedTime); }); contextVar.taskProgressDataByDate[index].finalComments = (typeof contextVar.taskProgressDataByDate[index].finalEvidenceArray !== 'undefined' && contextVar.taskProgressDataByDate[index].finalEvidenceArray.length > 0) ? contextVar.taskProgressDataByDate[index].finalEvidenceArray.reverse()[contextVar.finalService.length - 1].finalComments : ''; contextVar.taskProgressDataByDate[index].finalEvidenceArray = contextVar.finalService; contextVar.taskProgressDataByDate[index].finalEvidenceCount = contextVar.finalService.length; });","nodeType":"PROCESS","jsEngine":"es6"},"fetchTaskProgressData":{"filter":"{$workOrderTaskId} = {@workOrderTaskId}","models":["workOrderTask","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"processCheckResult"}],"columns":{"workOrderTaskStartDate":"workOrderTask.actualStartTime","workOrderTaskId":"workOrderTask.id","userPhoneNumber":"User.phoneNumber","userEmail":"User.emailId","userName":"User.name","workOrderTaskResult":"workOrderTask.result"},"name":"fetchTaskProgressData","description":"fetchTaskProgressData","distinct":true,"links":{"workOrderTask":"User"},"inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"outputVarMap":{"data":"fetchTaskProgressData","count":"count"},"nodeType":"QUERY","getCount":true},"workflowNodes":["start","queryListOptionData","ProcessListOptionData","callFetchResourcesForLocaleWF","fetchTaskProgressData","processCheckResult","isResultAvailableForOldTask","processOldTaskData","processTaskProgressData","processTaskProgressDataInDiscontinue","callFetchResourcesForLocaleWF","callBackwardCompatibilityWF","ProcessResourcesData","end"],"processTaskProgressDataInDiscontinue":{"connectors":[{"exitPortType":"NextStep","nodeId":"callBackwardCompatibilityWF"}],"contextChangePermitted":true,"name":"processTaskProgressDataInDiscontinue","description":"processTaskProgressDataInDiscontinue","processRule":"if(contextVar.taskProgressDataByDate.length == 1) { if(contextVar.taskProgressDataByDate[0].initialEvidenceCount == 0 && contextVar.taskProgressDataByDate[0].finalEvidenceCount == 0 && contextVar.taskProgressDataByDate[0].servicesDeliveredCount == 0 && contextVar.taskProgressDataByDate[0].submitProgressArrayCount == 0) { contextVar.taskProgressDataByDate = []; } }","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"viewType":"byDate"},"queryListOptionData":{"filter":"{$listOptionAnswer.listOptionId} = 'assetMaintenanceOptions' || {$listOptionAnswer.listOptionId} = 'assetRemovalReasons'","models":["listOption","listOptionAnswer"],"connectors":[{"exitPortType":"NextStep","nodeId":"ProcessListOptionData"}],"columns":{"listOptionId":"listOptionAnswer.id"},"name":"queryListOptionData","description":"queryListOptionData","inputVarMap":{},"id":"queryListOptionData","outputVarMap":{"data":"listOptionData"},"nodeType":"QUERY"},"end":{"name":"End","description":"End","inputVarMap":{"taskProgressDataByDate":"taskProgressDataByDate"},"outputVarMap":{"taskProgressDataByDate":"taskProgressDataByDate"},"nodeType":"END"},"processCheckResult":{"connectors":[{"exitPortType":"NextStep","nodeId":"isResultAvailableForOldTask"}],"contextChangePermitted":true,"name":"processCheckResult","description":"processCheckResult","processRule":"contextVar.resultFlag = ''; if (contextVar.fetchTaskProgressData[0].workOrderTaskResult) { contextVar.fetchTaskProgressData[0].workOrderTaskResult.forEach(function (element) { if (typeof element.beforeCaptureEvidence != 'undefined') { contextVar.resultFlag = true; } else { contextVar.resultFlag = false; } }); } else { contextVar.resultFlag = false;}","id":"processCheckResult","nodeType":"PROCESS"},"ProcessListOptionData":{"connectors":[{"exitPortType":"NextStep","nodeId":"callFetchResourcesForLocaleWF"}],"contextChangePermitted":true,"name":"ProcessListOptionData","description":"ProcessListOptionData","processRule":"if (typeof contextVar.listOptionData !== 'undefined' && Array.isArray(contextVar.listOptionData) && contextVar.listOptionData.length > 0) { contextVar.resourceIdList = []; contextVar.listOptionData.forEach(obj => { contextVar.resourceIdList.push(obj.listOptionId); }); } else { contextVar.resourceIdList = []; }","id":"ProcessListOptionData","nodeType":"PROCESS","jsEngine":"es6"}}