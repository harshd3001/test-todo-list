{"fullTaskSchedule":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"fullTaskSchedule","description":"fullTaskSchedule","processRule":"contextVar.fullTaskScheduleGridData = [];var scheduledDate = '';var startTime = '';var endTime = '';var totalDuration = '';var totalHours = 1000 * 60 * 60 * 24;if(contextVar.dateArray && contextVar.dateArray.length > 0){if(contextVar.dateArray.length > 1){for(var i = 0; i<= contextVar.dateArray.length-1; i++){scheduledDate = contextVar.breakDownData[contextVar.dateArray[i]].elements[0].startDateActual.split(',')[0];startTime = contextVar.breakDownData[contextVar.dateArray[i]].elements[0].startDateActual.split(',')[1];endTime =contextVar.breakDownData[contextVar.dateArray[i]].elements[0].endDateActual.split(',')[1];totalDuration=(new Date(contextVar.breakDownData[contextVar.dateArray[i]].elements[0].endDateActual).getHours()-new Date(contextVar.breakDownData[contextVar.dateArray[i]].elements[0].startDateActual).getHours()).toString();contextVar.fullTaskScheduleGridData.push({scheduledDate,startTime,endTime,totalDuration});}} else{contextVar.breakDownData[contextVar.dateArray[0]].elements.forEach(element => { scheduledDate = element.startDateActual.split(',')[0];startTime = element.startDateActual.split(',')[1];endTime =element.endDateActual.split(',')[1];totalDuration= (((new Date(element.endDateActual).getTime() - new Date(element.startDateActual).getTime())/1000)/(60 * 60)).toString();contextVar.fullTaskScheduleGridData.push({scheduledDate,startTime,endTime,totalDuration});});}}","id":"fullTaskSchedule","nodeType":"PROCESS","jsEngine":"es6"},"processTaskDateData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fullTaskSchedule"}],"contextChangePermitted":true,"name":"processTaskDateData","description":"processTaskDateData","processRule":"let scheduleBreakDown; if (contextVar.scheduleBreakDown && Array.isArray(contextVar.scheduleBreakDown) && contextVar.scheduleBreakDown.length > 0) { scheduleBreakDown = JSON.parse(JSON.stringify(contextVar.scheduleBreakDown)); contextVar.assignee = scheduleBreakDown[0].assignedToUserId; contextVar.timezone = scheduleBreakDown[0].timezone; if (contextVar.timezone) { scheduleBreakDown.forEach(element => { let startUTC = element.startDate.trim().replace(' ', 'T').replace(/$/mg, 'Z'); let endUTC = element.endDate.trim().replace(' ', 'T').replace(/$/mg, 'Z'); element.oldStartDate = element.startDate; element.oldEndDate = element.endDate; element.startDate = new Date(startUTC).toLocaleString('en-US', { timeZone: contextVar.timezone }); element.endDate = new Date(endUTC).toLocaleString('en-US', { timeZone: contextVar.timezone }); element.startDateActual = element.startDate.valueOf(); element.endDateActual = element.endDate.valueOf(); }); } else { scheduleBreakDown.forEach(element => { let startUTC = element.startDate.trim().replace(' ', 'T').replace(/$/mg, 'Z'); let endUTC = element.endDate.trim().replace(' ', 'T').replace(/$/mg, 'Z'); element.oldStartDate = element.startDate; element.oldEndDate = element.endDate; element.startDate = new Date(startUTC).toLocaleString('en-US', { timeZone: 'UTC' }); element.endDate = new Date(endUTC).toLocaleString('en-US', { timeZone: 'UTC' }); element.startDateActual = element.startDate.valueOf(); element.endDateActual = element.endDate.valueOf(); }); } contextVar.dateArray = []; contextVar.breakDownData = {}; scheduleBreakDown.forEach(element => { let day = new Date(element.startDate).toDateString().replace(/ /mg, ''); if (typeof contextVar.breakDownData[day] === 'undefined') { contextVar.dateArray.push(day); contextVar.breakDownData[day] = {}; } contextVar.breakDownData[day].day = contextVar.dateArray.indexOf(day) + 1; if (typeof contextVar.breakDownData[day].elements === 'undefined') { contextVar.breakDownData[day].elements = []; } contextVar.breakDownData[day].elements.push({ 'startDate': element.oldStartDate, 'endDate': element.oldEndDate, 'startDateActual': element.startDateActual, 'endDateActual': element.endDateActual }); }); }","id":"processTaskDateData","nodeType":"PROCESS","jsEngine":"es6"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchScheduleBreakdown"}],"name":"start","description":" Start","id":"start","nodeType":"START"},"fetchScheduleBreakdown":{"models":["taskScheduleBreakdown","workOrderTask","User"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskDateData"}],"columns":{"assignedToUserId":"workOrderTask.assignedToUserId","endDate":"taskScheduleBreakdown.endDate","timezone":"User.timezone","startDate":"taskScheduleBreakdown.startDate"},"description":"To get the schedule breakdown of the task","orderBy":"startDate","distinct":true,"inputVarMap":{"workOrderTaskId":"workOrderTaskId"},"nodeType":"QUERY","filter":"{$taskScheduleBreakdown.workOrderTaskId} = {@workOrderTaskId} AND {$workOrderTask.id} = {$taskScheduleBreakdown.workOrderTaskId}","name":"fetchScheduleBreakdown","links":{"workOrderTask":"User"},"id":"fetchScheduleBreakdown","outputVarMap":{"data":"scheduleBreakDown"}},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"workflowNodes":["start","fetchScheduleBreakdown","processTaskDateData","fullTaskSchedule","end"]}