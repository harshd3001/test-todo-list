{"isSchedulerCurrentStatusFailed":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"processDataForSchedulerLog"}],"name":"isSchedulerCurrentStatusFailed","description":"isSchedulerCurrentStatusFailed","processRule":"{ !Array.isArray(contextVar.schedulerLog) || contextVar.schedulerLog[0].actualStatus === 'schedulerLogFailed'}","nodeType":"DECISION"},"workflowContext":{"featureName":"jitScheduler","extraMsg":"NOTIFICATION: taskSchedulingAutoSchedulerNotificationWF call","successStatus":true},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"name":"start","description":"start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"flattenDataReceived"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"upsertIntoSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"schedulerLogModelWF","name":"upsertIntoSchedulerLog","description":"upsertIntoSchedulerLog","inputVarMap":{"schedulerLog":"schedulerLog"},"outputVarMap":{},"nodeType":"WORKFLOW"},"end":{"name":"end","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"fetchInProgressScheduler":{"filter":"{$schedulerLog.id} = {@currentSchedulerLogId}","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"isSchedulerCurrentStatusFailed"}],"columns":{"result":"IF({$schedulerLog.result} IS NOT NULL,{$schedulerLog.result},'[]')","actualStatus":"schedulerLog.status","context":"schedulerLog.context","id":"schedulerLog.id","status":"IF({@currentStatus} = {@successStatus},'schedulerLogCompleted', 'schedulerLogFailed')"},"name":"fetchInProgressScheduler","description":"fetchInProgressScheduler","inputVarMap":{"currentSchedulerLogId":"currentSchedulerLogId","successStatus":"successStatus","status":"currentStatus"},"outputVarMap":{"data":"schedulerLog"},"nodeType":"QUERY"},"processDataForSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"upsertIntoSchedulerLog"}],"contextChangePermitted":true,"name":"processDataForSchedulerLog ","description":"processDataForSchedulerLog","processRule":"{ contextVar.schedulerLog[0].endTime = new Date().toISOString().replace('T', ' ').replace('Z', ''); contextVar.schedulerLog[0].message = contextVar.message; if (typeof contextVar.data !== 'undefined' && contextVar.schedulerLogData[0] ?.context) { contextVar.schedulerLogData[0].context['notificationData'] = {}; contextVar.schedulerLogData[0].context.notificationData = contextVar.data; } }","nodeType":"PROCESS","jsEngine":"es6"},"workflowNodes":["start","logContextVar","flattenDataReceived","fetchInProgressScheduler","isSchedulerCurrentStatusFailed","processDataForSchedulerLog","upsertIntoSchedulerLog","end"],"flattenDataReceived":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchInProgressScheduler"}],"contextChangePermitted":true,"name":"flattenDataReceived","description":"flattenDataReceived","processRule":"{ if (typeof contextVar.data !== 'undefined') { for (const key in contextVar.data) { contextVar[key] = contextVar.data[key]; } } if (typeof contextVar.defaultInputContext !== 'undefined') { for (const key in contextVar.defaultInputContext) { contextVar[key] = contextVar.defaultInputContext[key]; } } }","nodeType":"PROCESS","jsEngine":"es6"}}