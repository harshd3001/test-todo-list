{"checkIfTimezoneAndDatePresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTimezoneData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"checkIfTimezoneAndDatePresent","description":"checkIfTimezoneAndDatePresent","processRule":"typeof contextVar.scheduledDate !== 'undefined' && contextVar.scheduledDate !== '' && typeof contextVar.timezoneOffset !== 'undefined' && contextVar.timezoneOffset !== ''","nodeType":"DECISION"},"appendTasks":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTasksPresent"}],"contextChangePermitted":true,"name":"appendTasks","description":"appendTasks","processRule":"if (Array.isArray(contextVar.appendOverlappingTaskData)) { contextVar.overlappingTaskData = contextVar.overlappingTaskData.concat(contextVar.appendOverlappingTaskData) } contextVar.overlappingTasksBatchNumber++;","nodeType":"PROCESS"},"findNumberOfBatches":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTasksPresent"}],"contextChangePermitted":true,"name":"findNumberOfBatches","description":"findNumberOfBatches","processRule":"{contextVar.noOfBatches = Math.ceil(contextVar.overlappingTasksCount / contextVar.customBatchSize);contextVar.overlappingTasksBatchNumber++;}","id":"findNumberOfBatches","nodeType":"PROCESS"},"areMoreTasksPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchMoreOverlappingTaskData"},{"exitPortType":"FalseStep","nodeId":"fetchAppointmentWindows"}],"name":"areMoreTasksPresent","description":"areMoreTasksPresent","processRule":"contextVar.noOfBatches >= 2 && contextVar.noOfBatches >= contextVar.overlappingTasksBatchNumber","nodeType":"DECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfTimezoneAndDatePresent"}],"name":"start","description":"Start","nodeType":"START"},"fetchOverlappingTaskData":{"models":["workOrderTask","workOrderTaskAppointmentWindow","taskScheduleBreakdown"],"connectors":[{"exitPortType":"NextStep","nodeId":"findNumberOfBatches"}],"columns":{"endDate":"IF({$taskScheduleBreakdown.endDate} IS NOT NULL,{$taskScheduleBreakdown.endDate}, {$workOrderTaskAppointmentWindow.endDate})","workOrderTaskId":"workOrderTask.id","workOrderTaskWorkOrderId":"workOrderTask.workOrderId","startDate":"IF({$taskScheduleBreakdown.startDate} IS NOT NULL,{$taskScheduleBreakdown.startDate}, {$workOrderTaskAppointmentWindow.startDate})"},"orderBy":"startDate ASC","outerJoinOnModel":"workOrderTask","description":"Fetch Task Details","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","overlappingTaskStatuses":"overlappingTaskStatuses","endDate":"endDate","startDate":"startDate"},"nodeType":"QUERY","filter":"((({$taskScheduleBreakdown.startDate} >= {@startDate} AND {$taskScheduleBreakdown.startDate} <= {@endDate}) OR ({$taskScheduleBreakdown.endDate} >= {@startDate} AND {$taskScheduleBreakdown.endDate} <= {@endDate}) OR ({@startDate} >= {$taskScheduleBreakdown.startDate} AND {@startDate} <= {$taskScheduleBreakdown.endDate}) OR ({@endDate} >= {$taskScheduleBreakdown.startDate} AND {@endDate} <={$taskScheduleBreakdown.endDate})) OR (({$workOrderTaskAppointmentWindow.startDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.startDate} <= {@endDate}) OR ({$workOrderTaskAppointmentWindow.endDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.endDate} <= {@endDate}) OR ({@startDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@startDate} <= {$workOrderTaskAppointmentWindow.endDate}) OR ({@endDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@endDate} <={$workOrderTaskAppointmentWindow.endDate})) ) AND {$workOrderTask.statusId} IN {@overlappingTaskStatuses}","name":"fetchOverlappingTaskData","links":{"workOrderTask":"workOrderTaskAppointmentWindow","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"overlappingTaskData","count":"overlappingTasksCount","batchNumber":"overlappingTasksBatchNumber"},"batchSize":"batchSize","getCount":true},"workflowNodes":["start","checkIfTimezoneAndDatePresent","processTimezoneData","fetchOverlappingTaskData","findNumberOfBatches","areMoreTasksPresent","appendTasks","fetchMoreOverlappingTaskData","fetchAppointmentWindows","processData","end"],"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processData","description":"processData","processRule":"{ var addMinutes = function(date) { return (new Date(date.getTime() + (contextVar.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; contextVar.appointmentWindowsData = contextVar.appointmentWindowsData.map((window) => { window.startTimeInUTC = addMinutes(new Date(contextVar.scheduledDate + ' ' + window.startTime)); window.endTimeInUTC = addMinutes(new Date(contextVar.scheduledDate + ' ' + window.endTime)); window.availableSlots = window.maxTasks; return window; }); var nextIndex = 0; for (var j = 0; j < contextVar.overlappingTaskData.length; j++) { for (var i = nextIndex; i < contextVar.appointmentWindowsData.length; i++) { if ((contextVar.overlappingTaskData[j].startDate >= contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].startDate < contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.overlappingTaskData[j].endDate > contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.appointmentWindowsData[i].startTimeInUTC >= contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].startTimeInUTC < contextVar.overlappingTaskData[j].endDate) || (contextVar.appointmentWindowsData[i].endTimeInUTC > contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j].endDate)) { contextVar.appointmentWindowsData[i].availableSlots--; } if (j !== contextVar.overlappingTaskData.length - 1 && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j + 1].startDate) { nextIndex = i; } if (contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].startTimeInUTC) break; } } contextVar.count = contextVar.appointmentWindowsData.length; if (contextVar.siteTimeZone == 'America/New_York') { contextVar.timezoneOffset = 240; } else if (contextVar.siteTimeZone == 'America/Denver') { contextVar.timezoneOffset = 360; } else if (contextVar.siteTimeZone == 'America/Los_Angeles') { contextVar.timezoneOffset = 420; } else if (contextVar.siteTimeZone == 'America/Chicago') { contextVar.timezoneOffset = 300; } else { contextVar.timezoneOffset = 0; } for (i = 0; i < contextVar.appointmentWindowsData.length; i++) { contextVar.appointmentWindowsData[i].startTime = JSON.stringify(new Date(new Date('2022-01-01 ' + contextVar.appointmentWindowsData[i].startTime).getTime() - (contextVar.timezoneOffset * 60000))).slice(12, 20); contextVar.appointmentWindowsData[i].endTime = JSON.stringify(new Date(new Date('2022-01-01 ' + contextVar.appointmentWindowsData[i].endTime).getTime() - (contextVar.timezoneOffset * 60000))).slice(12, 20); } }","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"customBatchSize":1000,"overlappingTaskStatuses":["workOrderTaskOpen","workOrderTaskScheduled","workOrderTaskDispatched","workOrderTaskIncident","workOrderTaskInProgress","workOrderTaskAutoScheduling","workOrderTaskInTransit"],"appointmentWindowsData":[],"count":0},"processTimezoneData":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchOverlappingTaskData"}],"contextChangePermitted":true,"name":"processTimezoneData","description":"processTimezoneData","processRule":"{ if (contextVar.siteTimeZone == '' || typeof contextVar.siteTimeZone == 'undefined') { contextVar.siteTimeZone = 'Default'; } var addMinutes = function(date) { return (new Date(date.getTime() + (contextVar.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; contextVar.startDate = contextVar.scheduledDate + ' 00:00:00.000'; contextVar.startDate = addMinutes(new Date(contextVar.startDate)); contextVar.endDate = contextVar.scheduledDate + ' 23:59:00.000'; contextVar.endDate = addMinutes(new Date(contextVar.endDate)); }","nodeType":"PROCESS"},"fetchAppointmentWindows":{"filter":"{$accTimeZone}={@timeZone}","models":["appointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"processData"}],"columns":{"maxTasks":"appointmentWindow.maxTasks","startTime":"appointmentWindow.startTime","id":"appointmentWindow.id","endTime":"appointmentWindow.endTime"},"name":"fetchAppointmentWindows","description":"Fetch Appointment Windows","orderBy":"startTime ASC","inputVarMap":{"customBatchSize":"batchSize","siteTimeZone":"timeZone"},"outputVarMap":{"data":"appointmentWindowsData"},"batchSize":"batchSize","nodeType":"QUERY"},"end":{"name":"End","description":"End","inputVarMap":{"appointmentWindowsData":"appointmentWindowsData","count":"count"},"outputVarMap":{"appointmentWindowsData":"appointmentWindowsData","count":"count"},"nodeType":"END"},"fetchMoreOverlappingTaskData":{"models":["workOrderTask","workOrderTaskAppointmentWindow","taskScheduleBreakdown"],"connectors":[{"exitPortType":"NextStep","nodeId":"appendTasks"}],"columns":{"endDate":"IF({$taskScheduleBreakdown.endDate} IS NOT NULL,{$taskScheduleBreakdown.endDate}, {$workOrderTaskAppointmentWindow.endDate})","workOrderTaskId":"workOrderTask.id","workOrderTaskWorkOrderId":"workOrderTask.workOrderId","startDate":"IF({$taskScheduleBreakdown.startDate} IS NOT NULL,{$taskScheduleBreakdown.startDate}, {$workOrderTaskAppointmentWindow.startDate})"},"orderBy":"startDate ASC","outerJoinOnModel":"workOrderTask","description":"Fetch Task Details","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","overlappingTaskStatuses":"overlappingTaskStatuses","endDate":"endDate","overlappingTasksBatchNumber":"batchNumber","startDate":"startDate"},"nodeType":"QUERY","filter":"((({$taskScheduleBreakdown.startDate} >= {@startDate} AND {$taskScheduleBreakdown.startDate} <= {@endDate}) OR ({$taskScheduleBreakdown.endDate} >= {@startDate} AND {$taskScheduleBreakdown.endDate} <= {@endDate}) OR ({@startDate} >= {$taskScheduleBreakdown.startDate} AND {@startDate} <= {$taskScheduleBreakdown.endDate}) OR ({@endDate} >= {$taskScheduleBreakdown.startDate} AND {@endDate} <={$taskScheduleBreakdown.endDate})) OR (({$workOrderTaskAppointmentWindow.startDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.startDate} <= {@endDate}) OR ({$workOrderTaskAppointmentWindow.endDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.endDate} <= {@endDate}) OR ({@startDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@startDate} <= {$workOrderTaskAppointmentWindow.endDate}) OR ({@endDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@endDate} <={$workOrderTaskAppointmentWindow.endDate})) ) AND {$workOrderTask.statusId} IN {@overlappingTaskStatuses}","name":"fetchMoreOverlappingTaskData","links":{"workOrderTask":"workOrderTaskAppointmentWindow","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"appendOverlappingTaskData"},"batchSize":"batchSize","getCount":true,"batchNumber":"batchNumber"}}