{"insertIntoAimlRecs":{"modelName":"AimlRecs","connectors":[{"exitPortType":"NextStep","nodeId":"callSchedulerLogModelWF"}],"multirecord":true,"name":"insertIntoAimlRecs","description":"insertIntoAimlRecs","inputVarMap":{"recommendations":"data"},"id":"insertIntoAimlRecs","outputVarMap":{"data":"retAimlId"},"nodeType":"MODEL","operation":4},"callSchedulerLogModelWF":{"eventId":"schedulerLogModelProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"notifyNode"}],"name":"callSchedulerLogModelWF","description":"callSchedulerLogModelWF","inputVarMap":{"schedulerLogData":"schedulerLog","subAction":"subAction"},"outputVarMap":{},"nodeType":"PUBLISH"},"notifyNode":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"notifyNode","description":"notifyNode","inputVarMap":{"currentUserId":"userId"},"targetType":"user","outputVarMap":{},"notificationType":"web","templateId":"TKRM88OIEM","nodeType":"NOTIFY"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"processInitialData"}],"name":"Start","description":"Start","nodeType":"START"},"logContextVar":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchSchedulerLogData"}],"processId":"featureLoggerWF","name":"logContextVar","description":"logContextVar","inputVarMap":{"featureName":"featureName","extraMsg":"extraMsg"},"id":"logContextVar","outputVarMap":{},"nodeType":"WORKFLOW"},"workflowNodes":["start","processInitialData","logContextVar","fetchSchedulerLogData","isSchedulerCurrentStatusFailed","processDataForSchedulerLog","insertIntoAimlRecs","isWorkOrderOpenTaskDataNotEmpty","callSchedulerLogModelWF","notifyNode","end"],"isWorkOrderOpenTaskDataNotEmpty":{"connectors":[{"exitPortType":"TrueStep","nodeId":"insertIntoAimlRecs"},{"exitPortType":"FalseStep","nodeId":"callSchedulerLogModelWF"}],"name":"isWorkOrderOpenTaskDataNotEmpty","description":"isWorkOrderOpenTaskDataNotEmpty","processRule":"(Array.isArray(contextVar.recommendations) && contextVar.recommendations.length > 0)","nodeType":"DECISION"},"isSchedulerCurrentStatusFailed":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"processDataForSchedulerLog"}],"name":"isSchedulerCurrentStatusFailed","description":"isSchedulerCurrentStatusFailed","processRule":"{ !Array.isArray(contextVar.schedulerLogData) || contextVar.schedulerLogData[0].status === 'schedulerLogFailed'}","nodeType":"DECISION"},"workflowContext":{"customBatchSize":1000,"appointmentWindowRecommendation":"{@taskId} could not be scheduled within its appointment window due to lack of technician availability. Please review this task and schedule accordingly.","featureName":"batchScheduler","payload":{"aimlRecTypeId":"autoSchedulingTaskFailed","priorityModel":"AimlRecs","rejected":false,"notified":false,"accepted":false,"recommendation":"{@taskId} could not be auto scheduled. Please review this task and schedule it manually.","priority":20,"done":false,"expired":false,"addDecisionToTraining":false,"recommendContext":{},"superseded":false,"status":"recommended"},"extraMsg":"NOTIFICATION: taskSchedulingBatchSchedulerNotificationWF call","recommendations":[]},"fetchSchedulerLogData":{"filter":"{$schedulerLog.id} = {@currentSchedulerLogId}","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"isSchedulerCurrentStatusFailed"}],"columns":{"result":"IF({$schedulerLog.result} IS NULL , '[]',{$schedulerLog.result})","currentUserId":"schedulerLog.initiatedByUserId","context":"schedulerLog.context","id":"schedulerLog.id","status":"schedulerLog.status"},"name":"fetchSchedulerLogData","description":"fetchSchedulerLogData","inputVarMap":{"currentSchedulerLogId":"currentSchedulerLogId"},"outputVarMap":{"data":"schedulerLogData"},"nodeType":"QUERY"},"end":{"name":"end","description":"End","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"processDataForSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"isWorkOrderOpenTaskDataNotEmpty"}],"contextChangePermitted":true,"name":"processDataForSchedulerLog","description":"processDataForSchedulerLog","processRule":"{ contextVar.currentUserId = contextVar.schedulerLogData[0].currentUserId; contextVar.schedulerLogData[0]['status'] = contextVar.status === true ? 'schedulerLogCompleted' : 'schedulerLogFailed'; contextVar.schedulerLogData[0].endTime = new Date().toISOString().replace('T', ' ').replace('Z', ''); contextVar.schedulerLogData[0]['message'] = contextVar.schedulerMessage; if (Array.isArray(contextVar.schedulerLogData[0] ?.context ?.schedulerTriggerContext ?.jobs) && contextVar.schedulerLogData[0].context.schedulerTriggerContext.jobs.length > 0) { let jobsMap = {}; contextVar.schedulerLogData[0].context.schedulerTriggerContext.jobs.forEach(function (job) { jobsMap[job.id] = job; }); var payload; contextVar.openJobs.forEach(function (job) { payload = JSON.parse(JSON.stringify(contextVar.payload)); var recommendationText = payload.recommendation; if (jobsMap[job].isAppointmentBasedTask) { recommendationText = contextVar.appointmentWindowRecommendation; } payload.recommendation = recommendationText.replace('{@taskId}', job); contextVar.recommendations.push(payload); }); } if (typeof contextVar.data !== 'undefined' && contextVar.schedulerLogData[0] ?.context) { contextVar.schedulerLogData[0].context['notificationData'] = {}; contextVar.schedulerLogData[0].context.notificationData = contextVar.data; } }","nodeType":"PROCESS","jsEngine":"es6"},"processInitialData":{"connectors":[{"exitPortType":"NextStep","nodeId":"logContextVar"}],"contextChangePermitted":true,"name":"processInitialData","description":"processInitialData","processRule":"{ if (typeof contextVar.data !== 'undefined') { for (const key in contextVar.data) { contextVar[key] = contextVar.data[key]; } } if (typeof contextVar.defaultInputContext !== 'undefined') { for (const key in contextVar.defaultInputContext) { contextVar[key] = contextVar.defaultInputContext[key]; } } contextVar.schedulerMessage = contextVar.message; contextVar.moveToOpenJobs = []; if (typeof contextVar.openJobs !== 'undefined' && contextVar.openJobs.length > 0) { contextVar.openJobs.forEach(function (job) { contextVar.moveToOpenJobs.push({ 'statusId': 'workOrderTaskOpen', 'eventType': 'workOrderTaskOpen', 'id': job }); }); } }","id":"processInitialData","nodeType":"PROCESS","jsEngine":"es6"}}