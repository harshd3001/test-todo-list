{"processSchedulingDataProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertSchedulingLogDataProximity"}],"contextChangePermitted":true,"name":"processSchedulingDataProximity","description":"processSchedulingData","processRule":"{contextVar.startDate = new Date(); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.endDate = new Date(); contextVar.endDate.setMonth(contextVar.endDate.getMonth() + 6); contextVar.endDate = contextVar.endDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.context = { startDate: contextVar.startDate, endDate: contextVar.endDate, taskIdList: contextVar.taskIdListProximity, taskTypeIdList: contextVar.taskTypeIdListProximity, regionIdList: contextVar.regionIdListProximity, workOrderTypeIdList: contextVar.workOrderTypeIdListProximity, customerIdList: contextVar.customerIdListProximity };}","nodeType":"PROCESS","jsEngine":"es6"},"isProximityTaskTypesEmpty":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTaskTypeProximity"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isProximityTaskTypesEmpty","description":"Use this for decision in workflow","processRule":"typeof contextVar.responseDataProximity!='undefined' && contextVar.responseDataProximity.length > 0","id":"isProximityTaskTypesEmpty","nodeType":"DECISION","jsEngine":"es6"},"insertSchedulingLogDataProximity":{"modelName":"schedulerLog","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"insertSchedulingLogDataProximity","description":"insertSchedulingLogData","inputVarMap":{"modelName":"modelName","statusTargetModel":"statusTargetModel","context":"context","schedulerType":"schedulerType","schedulerProximityId":"schedulerId","status":"status"},"outputVarMap":{"data":"insertDataResult"},"nodeType":"MODEL","displayPositionX":225,"operation":1,"displayPositionY":34},"isBatchTasksEmpty":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTaskId"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isBatchTasksEmpty","description":"Use this for decision in workflow","processRule":"typeof contextVar.taskData!='undefined' && contextVar.taskData.length > 0","id":"isBatchTasksEmpty","nodeType":"DECISION","jsEngine":"es6"},"isTimeZone":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchTaskDetails"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isTimeZone","description":"Use this for decision in workflow","processRule":"{contextVar.time == '12:19'}","id":"isTimeZone","nodeType":"DECISION","jsEngine":"es6"},"fetchSchedulerSetting":{"filter":"","models":["schedulerSetting"],"connectors":[{"exitPortType":"NextStep","nodeId":"isBatchTasksEmpty"}],"columns":{"acPrebookDays":"schedulerSetting.acPrebookDays"},"name":"fetchSchedulerSetting","distinct":true,"inputVarMap":{},"id":"fetchSchedulerSetting","outputVarMap":{"data":"schedulerSettingData"},"nodeType":"QUERY","batchSize":"batchSize","getCount":true},"getTaskTypesProximity":{"filter":"{$statusId} = {@taskStatus} AND {$schedulerId} = {@schedulerProximityId}","models":["autoSchedulerConfig"],"connectors":[{"exitPortType":"NextStep","nodeId":"isProximityTaskTypesEmpty"}],"columns":{"taskType":"autoSchedulerConfig.taskType","statusId":"autoSchedulerConfig.statusId","schedulerId":"autoSchedulerConfig.schedulerId","id":"autoSchedulerConfig.id"},"name":"getTaskTypesProximity","distinct":true,"inputVarMap":{"schedulerProximityId":"schedulerProximityId","taskStatus":"taskStatus"},"id":"getTaskTypesProximity","outputVarMap":{"data":"responseDataProximity","count":"count"},"nodeType":"QUERY","getCount":true},"processRegionId":{"connectors":[{"exitPortType":"NextStep","nodeId":"processWorkOrderTypeId"}],"contextChangePermitted":true,"name":"processRegionId","description":"processRegionId","processRule":"{ contextVar.regionIdListNew = []; if (typeof contextVar.taskData !== 'undefined' && contextVar.taskData !== '') { var len; for (var i = 0; i < contextVar.taskData.length; i++) { contextVar.initialRegionId = contextVar.taskData[i].regionId; contextVar.regionIdListNew.push(contextVar.initialRegionId); } } contextVar.regionIdList = Array.from(new Set(contextVar.regionIdListNew)); contextVar.taskTypeIdListNew = []; if (typeof contextVar.taskData !== 'undefined' && contextVar.taskData !== '') { var len; for (var i = 0; i < contextVar.taskData.length; i++) { contextVar.initialTaskTypeId = contextVar.taskData[i].taskTypeId; contextVar.taskTypeIdListNew.push(contextVar.initialTaskTypeId); } } contextVar.taskTypeIdList = Array.from(new Set(contextVar.taskTypeIdListNew)); }","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"initiatedByUserId":"CXRSRWTU10","newTasksBatchNumberProximity":0,"statusTargetModel":"schedulerLog","newTasksBatchNumber":0,"tskStatus":"workOrderTaskOpen","schedulerId":"acScheduleAndDispatchPreAssigned","noOfTasksBatches":0,"schedulerFilterId":"acScheduleAndDispatchPreAssigned","schedulerType":"manualSchedule","schedulerProximityId":"9E7O01VZJ8","noOfTasksBatchesProximity":0,"customBatchSize":200,"modelName":"BatchScheduler","JitModel":"manualAssign","taskStatus":"schedulerConfigActive","status":"schedulerLogQueued"},"processCustomerId":{"connectors":[{"exitPortType":"NextStep","nodeId":"processSchedulingData"}],"contextChangePermitted":true,"name":"processCustomerId","description":"processCustomerId","processRule":"{contextVar.customerIdListNew = []; if (typeof contextVar.taskData !== 'undefined' && contextVar.taskData !== '') { var len; for (var i = 0; i < contextVar.taskData.length; i++) { contextVar.initialCustomerId = contextVar.taskData[i].customerId; contextVar.customerIdListNew.push(contextVar.initialCustomerId); } } contextVar.customerIdList = Array.from(new Set(contextVar.customerIdListNew));}","nodeType":"PROCESS","jsEngine":"es6"},"processWorkOrderTypeId":{"connectors":[{"exitPortType":"NextStep","nodeId":"processCustomerId"}],"contextChangePermitted":true,"name":"processWorkOrderTypeId","description":"processWorkOrderTypeId","processRule":"{contextVar.workOrderTypeIdListNew = []; if (typeof contextVar.taskData !== 'undefined' && contextVar.taskData !== '') { var len; for (var i = 0; i < contextVar.taskData.length; i++) { contextVar.initialTypeId = contextVar.taskData[i].workOrderTypeId; contextVar.workOrderTypeIdListNew.push(contextVar.initialTypeId); } } contextVar.workOrderTypeIdList = Array.from(new Set(contextVar.workOrderTypeIdListNew));}","nodeType":"PROCESS","jsEngine":"es6"},"end":{"name":"end","description":"End","inputVarMap":{"insertDataResult":"insertDataResult"},"outputVarMap":{"insertDataResult":"insertDataResult"},"nodeType":"END"},"insertSchedulingLogData":{"modelName":"schedulerLog","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"insertSchedulingLogData","description":"insertSchedulingLogData","inputVarMap":{"modelName":"modelName","statusTargetModel":"statusTargetModel","context":"context","schedulerId":"schedulerId","schedulerType":"schedulerType","status":"status"},"outputVarMap":{"data":"insertDataResult"},"nodeType":"MODEL","displayPositionX":225,"operation":1,"displayPositionY":34},"isProximityTasksEmpty":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processTaskIdProximity"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isProximityTasksEmpty","description":"Use this for decision in workflow","processRule":"typeof contextVar.taskDataProximity!='undefined' && contextVar.taskDataProximity.length > 0","id":"isProximityTasksEmpty","nodeType":"DECISION","jsEngine":"es6"},"processTaskTypeProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetailsProximity"}],"contextChangePermitted":true,"name":"processTaskTypeProximity","description":"processTaskType","processRule":"{contextVar.taskTypeIdListProximity = []; if (typeof contextVar.responseDataProximity !== 'undefined' && contextVar.responseDataProximity !== '') { var len; for (var i = 0; i < contextVar.responseDataProximity.length; i++) { contextVar.initialTaskTypeProximity = contextVar.responseDataProximity[i].taskType; contextVar.taskTypeIdListProximity.push(contextVar.initialTaskTypeProximity); } }}","nodeType":"PROCESS"},"getTaskTypes":{"filter":"{$statusId} = {@taskStatus} AND {$schedulerId} = {@schedulerFilterId}","models":["autoSchedulerConfig"],"connectors":[{"exitPortType":"NextStep","nodeId":"isTaskTypesEmpty"}],"columns":{"taskType":"autoSchedulerConfig.taskType","statusId":"autoSchedulerConfig.statusId","schedulerId":"autoSchedulerConfig.schedulerId","id":"autoSchedulerConfig.id"},"name":"getTaskTypes","distinct":true,"inputVarMap":{"schedulerFilterId":"schedulerFilterId","taskStatus":"taskStatus"},"id":"getTaskTypes","outputVarMap":{"data":"responseData","count":"count"},"nodeType":"QUERY","getCount":true},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchTaskDetails"}],"name":"start","description":"Start","nodeType":"START"},"processTaskIdProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"processRegionIdProximity"}],"contextChangePermitted":true,"name":"processTaskIdProximity","description":"processTaskId","processRule":"{contextVar.taskIdListProximity = []; if (typeof contextVar.taskDataProximity !== 'undefined' && contextVar.taskDataProximity !== '') { var len; for (var i = 0; i < contextVar.taskDataProximity.length; i++) { contextVar.initialTaskIdProximity = contextVar.taskDataProximity[i].id; contextVar.taskIdListProximity.push(contextVar.initialTaskIdProximity); } }}","id":"processTaskIdProximity","nodeType":"PROCESS"},"workflowNodes":["start","getTaskTypes","isTimeZone","getTaskTypesProximity","isProximityTaskTypesEmpty","processDate","fetchTaskDetails","fetchSchedulerSetting","isBatchTasksEmpty","processTaskId","processRegionId","processWorkOrderTypeId","processCustomerId","processSchedulingData","insertSchedulingLogData","processTaskTypeProximity","fetchTaskDetailsProximity","isProximityTasksEmpty","processTaskIdProximity","processRegionIdProximity","processWorkOrderTypeIdProximity","processCustomerIdProximity","processSchedulingDataProximity","insertSchedulingLogDataProximity","end"],"processSchedulingData":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertSchedulingLogData"}],"contextChangePermitted":true,"name":"processSchedulingData","description":"processSchedulingData","processRule":"{ if(contextVar.schedulerSettingData !== '' && typeof contextVar.schedulerSettingData !=='undefined'){ contextVar.acPrebookDays = contextVar.schedulerSettingData[0].acPrebookDays; } contextVar.startDate = new Date(); contextVar.startDate = contextVar.startDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.endDate = new Date(); contextVar.endDate.setMonth(contextVar.endDate.getMonth() + contextVar.acPrebookDays); contextVar.endDate = contextVar.endDate.toISOString().replace('T', ' ').replace('Z', ''); contextVar.context = { startDate: contextVar.startDate, endDate: contextVar.endDate, taskIdList: contextVar.taskIdList, taskTypeIdList: contextVar.taskTypeIdList, regionIdList: contextVar.regionIdList, workOrderTypeIdList: contextVar.workOrderTypeIdList, customerIdList: contextVar.customerIdList }; }","nodeType":"PROCESS","jsEngine":"es6"},"processRegionIdProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"processWorkOrderTypeIdProximity"}],"contextChangePermitted":true,"name":"processRegionIdProximity","description":"processRegionId","processRule":"{contextVar.regionIdListNewProximity = []; if (typeof contextVar.taskDataProximity !== 'undefined' && contextVar.taskDataProximity !== '') { var len; for (var i = 0; i < contextVar.taskDataProximity.length; i++) { contextVar.initialRegionIdProximity = contextVar.taskDataProximity[i].regionId; contextVar.regionIdListNewProximity.push(contextVar.initialRegionIdProximity); } } contextVar.regionIdListProximity = Array.from(new Set(contextVar.regionIdListNewProximity));}","nodeType":"PROCESS","jsEngine":"es6"},"fetchTaskDetails":{"models":["workOrder","workOrderTask","taskType","site"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchSchedulerSetting"}],"columns":{"taskTypeId":"workOrderTask.taskTypeId","statusId":"workOrderTask.statusId","workOrderTypeId":"workOrder.workOrderTypeId","regionId":"site.regionId","customerId":"workOrder.customerId","siteId":"workOrderTask.siteId","workOrderId":"workOrder.id","id":"workOrderTask.id","deadline":"workOrder.deadline","acResourceType":"taskType.acResourceType"},"distinct":true,"outerJoinOnModel":"workOrderTask","inputVarMap":{"customBatchSize":"batchSize","taskTypeIdList":"taskTypeIdList","tskStatus":"tskStatus"},"nodeType":"QUERY","filter":"{$workOrderTask.acIsImported} = true && {$workOrderTask.acIsApptConfirmed} = true && {$workOrderTask.acIsPreAssigned} = 'Yes' && {$workOrderTask.statusId} = 'workOrderTaskScheduled' && {$taskType.acResourceType} = 'Analyst' && {$site.acTimeZone} = 'America/Los_Angeles'","name":"fetchTaskDetails","id":"fetchTaskDetails","outputVarMap":{"data":"taskData","count":"tasksCount"},"batchSize":"batchSize","getCount":true},"processWorkOrderTypeIdProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"processCustomerIdProximity"}],"contextChangePermitted":true,"name":"processWorkOrderTypeIdProximity","description":"processWorkOrderTypeId","processRule":"{contextVar.workOrderTypeIdListNewProximity = []; if (typeof contextVar.taskDataProximity !== 'undefined' && contextVar.taskDataProximity !== '') { var len; for (var i = 0; i < contextVar.taskDataProximity.length; i++) { contextVar.initialTypeIdProximity = contextVar.taskDataProximity[i].workOrderTypeId; contextVar.workOrderTypeIdListNewProximity.push(contextVar.initialTypeIdProximity); } } contextVar.workOrderTypeIdListProximity = Array.from(new Set(contextVar.workOrderTypeIdListNewProximity));}","nodeType":"PROCESS","jsEngine":"es6"},"fetchTaskDetailsProximity":{"filter":"{$taskTypeId} in {@taskTypeIdListProximity} AND {$statusId} = {@tskStatus} AND ({$deadline} IS NOT NULL OR {$deadline} = '' OR TIMESTAMPDIFF(HOUR,now(),{$workOrder.deadline}) >= 2 OR {$deadline} IS  NULL)","models":["workOrder","workOrderTask","site"],"connectors":[{"exitPortType":"NextStep","nodeId":"isProximityTasksEmpty"}],"columns":{"taskTypeId":"workOrderTask.taskTypeId","statusId":"workOrderTask.statusId","workOrderTypeId":"workOrder.workOrderTypeId","regionId":"site.regionId","customerId":"workOrder.customerId","siteId":"workOrderTask.siteId","workOrderId":"workOrder.id","id":"workOrderTask.id","deadline":"workOrder.deadline","jdeFlag":"workOrderTask.manualScheduleFlag"},"name":"fetchTaskDetailsProximity","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","taskTypeIdListProximity":"taskTypeIdListProximity","tskStatus":"tskStatus"},"id":"fetchTaskDetailsProximity","outputVarMap":{"data":"taskDataProximity","count":"tasksCountProximity"},"nodeType":"QUERY","batchSize":"batchSize","getCount":true},"processDate":{"connectors":[{"exitPortType":"NextStep","nodeId":"isTimeZone"}],"contextChangePermitted":true,"name":"processDate","description":"processDate","processRule":"{ contextVar.startTime = new Date().toISOString().replace('T', ' ').replace('Z', ''); contextVar.date = contextVar.startTime.slice(0, 11); contextVar.compare = contextVar.date + '05:00:00.000'; contextVar.startDate = new Date(contextVar.startTime).toISOString().replace('T', ' ').replace('Z', ''); contextVar.compareDate = new Date(contextVar.compare).toISOString().replace('T', ' ').replace('Z', ''); contextVar.time = contextVar.startDate.slice(11,16); }","nodeType":"PROCESS","jsEngine":"es6"},"processTaskId":{"connectors":[{"exitPortType":"NextStep","nodeId":"processRegionId"}],"contextChangePermitted":true,"name":"processTaskId","description":"processTaskId","processRule":"{contextVar.taskIdList = []; if (typeof contextVar.taskData !== 'undefined' && contextVar.taskData !== '') { var len; for (var i = 0; i < contextVar.taskData.length; i++) { contextVar.initialTaskId = contextVar.taskData[i].id; contextVar.taskIdList.push(contextVar.initialTaskId); } }}","nodeType":"PROCESS"},"processCustomerIdProximity":{"connectors":[{"exitPortType":"NextStep","nodeId":"processSchedulingDataProximity"}],"contextChangePermitted":true,"name":"processCustomerIdProximity","description":"processCustomerIdProximity","processRule":"{contextVar.customerIdListNewProximity = []; if (typeof contextVar.taskDataProximity !== 'undefined' && contextVar.taskDataProximity !== '') { var len; for (var i = 0; i < contextVar.taskDataProximity.length; i++) { contextVar.initialCustomerIdProximity = contextVar.taskDataProximity[i].customerId; contextVar.customerIdListNewProximity.push(contextVar.initialCustomerIdProximity); } } contextVar.customerIdListProximity = Array.from(new Set(contextVar.customerIdListNewProximity));}","nodeType":"PROCESS","jsEngine":"es6"}}