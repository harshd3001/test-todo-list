{"insertToTaskLog":{"eventId":"insertIntoTaskLogProcessEvent","connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"name":"insertToTaskLog","description":"insertToTaskLog","inputVarMap":{},"outputVarMap":{},"nodeType":"PUBLISH"},"workflowContext":{"workOrderTaskApproved":"workOrderTaskApproved","workOrderTaskDraft":"workOrderTaskDraft","workOrderTaskPendingApproval":"workOrderTaskPendingApproval","workOrderTaskCompleted":"workOrderTaskCompleted","workOrderTaskReopened":"workOrderTaskReopened","workOrderTaskRejected":"workOrderTaskRejected","workOrderTaskSiteChangeRequest":"workOrderTaskSiteChangeRequest","workOrderTaskAutoScheduling":"workOrderTaskAutoScheduling","workOrderTaskDispatched":"workOrderTaskDispatched","workOrderTaskPendingReview":"workOrderTaskPendingReview","workOrderTaskOpen":"workOrderTaskOpen","workOrderTaskCancelled":"workOrderTaskCancelled","workOrderTaskScheduled":"workOrderTaskScheduled","workOrderTaskInProgress":"workOrderTaskInProgress"},"workOrderTaskModelEventZRule":{"connectors":[{"exitPortType":"NextStep","nodeId":"insertToTaskLog"}],"contextChangePermitted":true,"name":"workOrderTaskModelEventZRule","description":"workOrderTaskModelEventZRule","processRule":"@RI6ZZQA7B0","nodeType":"PROCESS"},"processTaskTypeData":{"connectors":[{"exitPortType":"NextStep","nodeId":"workOrderTaskModelEventZRule"}],"contextChangePermitted":true,"name":"processTaskTypeData","description":"processTaskTypeData","processRule":"{if(typeof contextVar.taskTypeData !== 'undefined' && contextVar.taskTypeData !== ''){contextVar.webTask=contextVar.taskTypeData[0].taskTypeWebTask; contextVar.crewTask=contextVar.taskTypeData[0].taskTypeCrewTask;}}","nodeType":"PROCESS"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"isTaskAutoScheduling"}],"name":"Start","description":"Start","nodeType":"START"},"isTaskAutoScheduling":{"connectors":[{"exitPortType":"TrueStep","nodeId":"end"},{"exitPortType":"FalseStep","nodeId":"processModelData"}],"name":"isTaskAutoScheduling","description":"isTaskAutoScheduling","processRule":"typeof contextVar.data !== 'undefined' && contextVar.data.statusId === contextVar.workOrderTaskAutoScheduling","nodeType":"DECISION"},"end":{"name":"end","description":"End","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"processModelData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskTypeData"}],"contextChangePermitted":true,"name":"processModelData","description":"processModelData","processRule":"{ contextVar.workOrderTaskId = contextVar.data.id; contextVar.workOrderTaskStatusId = contextVar.data.statusId; contextVar.workOrderTaskTaskTypeId = contextVar.data.taskTypeId; contextVar.workOrderTaskAssignedToUserId = contextVar.data.assignedToUserId; contextVar.workOrderTaskAssignedToCrewId = contextVar.data.assignedToCrewId; contextVar.workOrderTaskScheduledDate = contextVar.data.scheduledDate; contextVar.workOrderTaskDueDate = contextVar.data.dueDate; contextVar.workOrderTaskActualStartTime = contextVar.data.actualStartTime; contextVar.workOrderTaskCompletedDate = contextVar.data.completedDate; contextVar.workOrderTaskProcessInstanceId = contextVar.data.processInstanceId; contextVar.workOrderTaskEstimatedDuration = Number(contextVar.data.estimatedDuration) / 60; (contextVar.taskLogData = []).push({ 'taskId': contextVar.workOrderTaskId }); (contextVar.taskLogData[0].log = []).push(contextVar.data); contextVar.taskLogData[0].eventType = contextVar.data.eventType ? contextVar.data.eventType : ''; }","nodeType":"PROCESS"},"getTaskTypeData":{"filter":"{$taskType.id} = {@workOrderTaskTaskTypeId}","models":["taskType"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskTypeData"}],"columns":{"taskTypeWebTask":"taskType.webTask","taskTypeCrewTask":"taskType.crewTask"},"name":"getTaskTypeData","description":"getTaskTypeData","inputVarMap":{"workOrderTaskTaskTypeId":"workOrderTaskTaskTypeId"},"outputVarMap":{"data":"taskTypeData"},"nodeType":"QUERY"},"workflowNodes":["start","isTaskAutoScheduling","processModelData","getTaskTypeData","processTaskTypeData","workOrderTaskModelEventZRule","insertToTaskLog","end"]}