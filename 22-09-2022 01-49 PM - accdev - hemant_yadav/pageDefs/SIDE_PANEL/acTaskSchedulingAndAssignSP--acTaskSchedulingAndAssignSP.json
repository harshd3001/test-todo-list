{"pageContext":{},"actionOnLoad":["@actions.fscx2_0_loadDataDynamicallyForZonesWF","@actions.checkIfInventoryInstalled","@actions.checkIfCustomerPortalInstalled","@actions.setData","@actions.fireProcessEventForTaskSchedulingAndAssignFetchData","@actions.fetchEntityConfig","@actions.fetchPartsData","@actions.checkIfPartsDataPresent","@actions.setWorkOrderTaskData","@actions.setOtherWorkOrderTaskData","@actions.changeAppointmentWindowTime","@actions.changeTztime","@actions.setTravelDetails","@actions.setPreviousAssingeesData","@actions.refreshDataGridOnDependency","@actions.enableDataGrid","@actions.refreshScheduleBreakdownGrid","@actions.decisionForCalendarLongDurationTask"],"children":[],"localPageContext":true,"jslib":{"isScheduledDateWarningHidden":"function(pageContext) { if (pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskReopened' || pageContext.status === 'workOrderTaskScheduled') { return ((typeof pageContext.workOrderTaskScheduledDate === 'undefined' || pageContext.workOrderTaskScheduledDate === '') || (typeof pageContext.currentDate === 'undefined' || pageContext.currentDate === '') || (new Date(pageContext.workOrderTaskScheduledDate) > new Date(pageContext.currentDate))); } else return true; }","isDispatchTaskDisabled":"function (pageContext) { if (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '' && (new Date(pageContext.workOrderTaskScheduledDate) >= new Date(pageContext.currentDate)) && pageContext.workOrderTaskEstimatedDuration > 0 && (typeof pageContext.bannerType === 'undefined' || pageContext.bannerType === '') && ((pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToCrewId !== 'undefined' && pageContext.workOrderTaskAssignedToCrewId !== '') || (!pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== ''))) { return false; } return (!(((new Date(pageContext.workOrderTaskScheduledDate) >= new Date(pageContext.currentDate)) && (pageContext.workOrderTaskEstimatedDuration % 0.25 === 0) && (Number(pageContext.workOrderTaskEstimatedDuration) === Number(pageContext.workOrderTaskTotalDuration)) && ((Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown.length >= 1) || ((typeof pageContext.workOrderTaskEstimatedDuration !== 'undefined' && pageContext.workOrderTaskEstimatedDuration !== '')) && (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '')) && ((pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToCrewId !== 'undefined' && pageContext.workOrderTaskAssignedToCrewId !== '') || (!pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== ''))) && ((((pageContext.workOrderTaskLongDurationFlag === false && Number(pageContext.workOrderTaskEstimatedDuration) > 0 && Number(pageContext.workOrderTaskEstimatedDuration) <= 24) || (pageContext.workOrderTaskLongDurationFlag === true && Number(pageContext.workOrderTaskEstimatedDuration) > 0 && (typeof pageContext.bannerType === 'undefined' || pageContext.bannerType === ''))) && (typeof pageContext.taskScheduleMultipleBreakdown === 'undefined' || pageContext.taskScheduleMultipleBreakdown === '' || pageContext.taskScheduleMultipleBreakdown.length <= 1)) || (pageContext.taskScheduleMultipleBreakdown.length > 1)))) }","isShowActualStartTime":"function(pageContext){if(pageContext.status === 'workOrderTaskInProgress'){return false;}else{return true;}}","isActionView":"function(pageContext) { return pageContext.action === 'view' }","isTaskDispatched":"function(pageContext){return( pageContext.status !== 'workOrderTaskScheduled' && pageContext.status !== 'workOrderTaskOpen' && pageContext.status !== 'workOrderTaskReopened')}","isPriceListItemHidden":"function (pageContext) { return ((pageContext.status === 'workOrderTaskScheduled' && pageContext.workOrderTaskReOpenCount === 0) || pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskAutoScheduling'|| pageContext.status === 'workOrderTaskDispatched' || pageContext.status === 'workOrderTaskInTransit') }","isSaveDisabled":"function(pageContext) { if (typeof pageContext.workOrderTaskLongDurationFlag !== 'undefined' && pageContext.workOrderTaskLongDurationFlag === true && (typeof pageContext.bannerType === 'undefined' || pageContext.bannerType === '') && ((pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToCrewId !== 'undefined' && pageContext.workOrderTaskAssignedToCrewId !== '' && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToCrewId) || ((typeof pageContext.initialAssignee !== 'undefined' && (pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToUserId || pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToCrewId)) && (pageContext.workOrderTaskAssignedToUserId === '' || pageContext.workOrderTaskAssignedToCrewId === '')) || (!pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '' && !pageContext.taskTypeCrewTask && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToUserId) || (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '') || (typeof pageContext.workOrderTaskDueDate !== 'undefined' && pageContext.workOrderTaskDueDate !== ''))) { if (pageContext.workOrderTaskDueDate !== '' && pageContext.workOrderTaskScheduledDate !== '' && ((pageContext.workOrderTaskScheduledDate !== pageContext.initialWorkOrderTaskScheduledDate || pageContext.workOrderTaskDueDate !== pageContext.initialWorkOrderTaskDueDate) || (pageContext.initialcustomerContactPerson !== pageContext.customerContactPerson) || (pageContext.initialcustomerContactPhone !== pageContext.customerContactPhone) || (pageContext.initialcustomerContactEmail !== pageContext.customerContactEmail) || (typeof pageContext.initialAssignee !== 'undefined' && ((!pageContext.taskTypeCrewTask && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToUserId) || (pageContext.taskTypeCrewTask && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToCrewId))) || (typeof pageContext.initialAssignee === 'undefined' && ((!pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '') || (pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToCrewId !== 'undefined' && pageContext.workOrderTaskAssignedToCrewId !== ''))))) { return false; } return true; } return !((Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown.length > 1 && (!(_(pageContext.initialWorkOrderTaskScheduleBreakdown).xorWith(pageContext.taskScheduleMultipleBreakdown, _.isEqual).isEmpty())) || (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '' && pageContext.workOrderTaskScheduledDate !== pageContext.initialWorkOrderTaskScheduledDate) || (pageContext.initialcustomerContactPerson !== pageContext.customerContactPerson) || (pageContext.initialcustomerContactPhone !== pageContext.customerContactPhone) || (pageContext.initialcustomerContactEmail !== pageContext.customerContactEmail) || (typeof pageContext.workOrderTaskEstimatedDuration !== 'undefined' && pageContext.workOrderTaskEstimatedDuration !== '' && Number(pageContext.workOrderTaskEstimatedDuration) !== Number(pageContext.initialworkOrderTaskEstimatedDuration) && pageContext.workOrderTaskEstimatedDuration % 0.25 === 0) || (pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToCrewId !== 'undefined' && pageContext.workOrderTaskAssignedToCrewId !== '' && pageContext.taskTypeCrewTask && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToCrewId) || ((typeof pageContext.initialAssignee !== 'undefined' && (pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToUserId || pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToCrewId)) && (pageContext.workOrderTaskAssignedToUserId === '' || pageContext.workOrderTaskAssignedToCrewId === '')) || (!pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '' && !pageContext.taskTypeCrewTask && pageContext.initialAssignee !== pageContext.workOrderTaskAssignedToUserId) || (pageContext.workOrderTaskNotes !== pageContext.initialWorkOrderTaskNotes) || (pageContext.workOrderTaskAcInternalNotes !== pageContext.initialworkOrderTaskAcInternalNotes)) && (((pageContext.workOrderTaskEstimatedDuration > 0 && pageContext.workOrderTaskEstimatedDuration <= 24) && (typeof pageContext.taskScheduleMultipleBreakdown === 'undefined' || pageContext.taskScheduleMultipleBreakdown === '' || pageContext.taskScheduleMultipleBreakdown.length <= 1)) || (Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown.length > 1))) }","isInventoryRequestHidden":"function(pageContext) {if (typeof pageContext.isInventoryModelPresent !== 'undefined' && pageContext.isInventoryModelPresent === false) { return false; } else { return true; }}","showBanner":"function (pageContext) { if(pageContext.banner !== 'show'){return false;} else {return true;}}","minScheduledTimeAbsolute":"function(pageContext) { var addMinutes = function(date) { return (new Date(date.getTime() - (pageContext.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; var currentDateInAbsolute = addMinutes(new Date()); if (pageContext.scheduledDateAbsolute === currentDateInAbsolute.split(' ')[0]) return currentDateInAbsolute.split(' ')[1]; else return ''; }","isServiceTabHidden":"function (pageContext) { return (!pageContext.workOrderTaskService) || (typeof pageContext.workOrderTaskResult != 'undefined' && pageContext.workOrderTaskResult != '' && JSON.stringify(pageContext.workOrderTaskResult).indexOf('submitType') > 0); }","dynamicHeaderText":"function (pageContext) { if (pageContext.status === 'workOrderTaskInProgress' || pageContext.status === 'workOrderTaskInTransit') { return '@lang.[\"vt\",\"View Task\"]' } else if (pageContext.action === 'openTask') { return '@lang.[\"sa\",\"Schedule & Assign\"]' } else if (pageContext.logsAction === 'dispatchFailed') { return pageContext.workOrderTaskId } else if (pageContext.action === 'view') { return '@lang.[\"taskDetails\",\"Task Details\"]' } else { return '@lang.[\"edit\",\"Edit\"]' } }","getLocationCoordinates":"function(pageContext){if((typeof pageContext.siteAddress!=='undefined'&&pageContext.siteAddress!=='')&&((typeof pageContext.latitude!=='undefined'&&pageContext.latitude!=='')&&(typeof pageContext.longitude!=='undefined'&&pageContext.longitude!==''))){return[Number(pageContext.latitude),Number(pageContext.longitude)];}return[0,0];}","isDependencyOverrideHidden":"function (pageContext) { return (typeof pageContext.workOrderTaskOverrideReason === 'undefined' || pageContext.workOrderTaskOverrideReason === '') }","isScheduleAndAssignPage":"function(pageContext) { if (typeof pageContext.action != 'undefined' && pageContext.action != '') { if (pageContext.action == 'openTask' || pageContext.action == 'dispatch') { console.log('inside hide'); return false; } return true; } else { return true; } }","minScheduledEndDate":"function(pageContext) { if (typeof pageContext.workOrderTaskLongDurationFlag !== 'undefined' && pageContext.workOrderTaskLongDurationFlag !== '' && pageContext.workOrderTaskLongDurationFlag === true) { function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; }; let minScheduleEndDate = ''; if (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '') { minScheduleEndDate = toDateString(new Date(pageContext.workOrderTaskScheduledDate)); minScheduleEndDate = toDateString(new Date(new Date(minScheduleEndDate).getTime() + 60 * 60 * 24 * 1000)); } else { minScheduleEndDate = toDateString(new Date(pageContext.currentDate)); minScheduleEndDate = toDateString(new Date(new Date(minScheduleEndDate).getTime() + 60 * 60 * 24 * 1000));  } return minScheduleEndDate; } }","multipleBreakdown":"function(pageContext){if (typeof pageContext.taskScheduleMultipleBreakdown != 'undefined' &&  pageContext.taskScheduleMultipleBreakdown != '' &&  pageContext.taskScheduleMultipleBreakdown.length >1){return true;}}","isTaskProgressTabHidden":"function (pageContext) { var flag = true; if (Array.isArray(pageContext.workOrderTaskResult) && pageContext.workOrderTaskResult.length > 0 && JSON.stringify(pageContext.workOrderTaskResult).indexOf('submitType') > 0 && (pageContext.status !== 'workOrderTaskScheduled' && pageContext.status !== 'workOrderTaskOpen' && pageContext.status !== 'workOrderTaskReopened')) { for (var i = 0; i < pageContext.workOrderTaskResult.length; i++) { if ((typeof pageContext.workOrderTaskResult[i].initialEvidenceDataGrid !== 'undefined' && pageContext.workOrderTaskResult[i].initialEvidenceDataGrid.length > 0) || (typeof pageContext.workOrderTaskResult[i].submitProgressEvidenceDataGrid !== 'undefined' && pageContext.workOrderTaskResult[i].submitProgressEvidenceDataGrid.length > 0) || (typeof pageContext.workOrderTaskResult[i].servicesDataGrid !== 'undefined' && pageContext.workOrderTaskResult[i].servicesDataGrid.length > 0)) { flag = false; } else { flag = true; } } } return flag; }","singleBreakdown":"function(pageContext){if (typeof pageContext.taskScheduleMultipleBreakdown === 'undefined' ||  pageContext.taskScheduleMultipleBreakdown == '' ||  pageContext.taskScheduleMultipleBreakdown[0] == '' ||  pageContext.taskScheduleMultipleBreakdown.length  <= 1 ){return true;}}","isBackButtonHidden":"function (pageContext) { return ((pageContext.action !== 'view' && pageContext.action !== 'calendarOpenTask') || pageContext.status === 'workOrderTaskAutoScheduling') }","isBannerHidden":"function (pageContext) { return !(pageContext.status == 'workOrderTaskAutoScheduling')}","isIncidentReportHidden":"function(pageContext){ return typeof pageContext.incidentDetails === 'undefined' || pageContext.incidentDetails === '' || pageContext.incidentDetails.length === 0; }","isCrewTask":"function(pageContext) {return pageContext.action === 'openTask' || pageContext.taskTypeCrewTask || pageContext.action === 'calendarOpenTask'}","isEditPage":"function(pageContext) { if (typeof pageContext.action != 'undefined' && pageContext.action != '' && pageContext.action == 'dispatch') { return true; } else { return false; } }","disableSiteDetails":"function(pageContext) { if ((pageContext.status == 'workOrderTaskScheduled') || (pageContext.status == 'workOrderTaskOpen')) { return false; } else { return true; } }","isInitialEvidenceHidden":"function (pageContext) { if( typeof pageContext.showInitialEvidenceGrid != 'undefined' &&  pageContext.showInitialEvidenceGrid == true ) { return false; } else { return true; } }","isSubmittedProgressHidden":"function (pageContext) { if( typeof pageContext.selectedFilterForView !== 'undefined' &&  pageContext.selectedFilterForView === 'byDate'){return false;}else{return true;} }","isTravelDetailsHidden":"function (pageContext) { return !(pageContext.viewTravelStatus && typeof pageContext.startAddress !== 'undefined' && pageContext.startAddress !== ''); }","disableSchedule":"function(pageContext) { if (pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskReopened' || pageContext.status === 'workOrderTaskScheduled') { return false; } else return true; }","isActionNotCalendarOpenTask":"function (pageContext){return pageContext.action !== 'calendarOpenTask'}","isPartsAndMaterialsGridHidden":"function (pageContext) {if (((typeof pageContext.workOrderTaskAssignedToUserId != 'undefined' && pageContext.workOrderTaskAssignedToUserId == '') || typeof pageContext.workOrderTaskAssignedToUserId == 'undefined') && pageContext.isInventoryModelPresent === true) { return false; } else { return true; }}","isTechnicianHidden":"function (pageContext) { return pageContext.taskTypeCrewTask || pageContext.action === 'dispatch' || pageContext.workOrderTaskAction === 'view' || pageContext.logsAction === 'dispatchFailed' || pageContext.status === 'workOrderTaskAutoScheduling' }","saveButtonText":"function(pageContext) { if (pageContext.action === 'calendarOpenTask') { return '@lang.[\"s19\",\"Schedule\"]' } else { return '@lang.[\"s12\",\"Save\"]' } }","minScheduledDateAbsolute":"function (pageContext) { var addMinutes = function (date) { return (new Date(date.getTime() - (pageContext.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; return addMinutes(new Date()).split(' ')[0]; }","isServicesDeliveredHidden":"function (pageContext) { if( typeof pageContext.showServicesDeliveredGrid != 'undefined' &&  pageContext.showServicesDeliveredGrid == true ) { return false; } else { return true; } }","isCrewHidden":"function(pageContext){return !pageContext.taskTypeCrewTask || pageContext.action === 'dispatch' || pageContext.workOrderTaskAction === 'view'  || pageContext.logsAction === 'dispatchFailed'}","isPartsAndMaterialsGrid1Hidden":"function (pageContext) {if (typeof pageContext.workOrderTaskAssignedToUserId != 'undefined' && pageContext.workOrderTaskAssignedToUserId != '' && pageContext.isInventoryModelPresent === true) { return false; } else { return true; }}","isPreviousAssigneeHidden":"function (pageContext) { return !(typeof pageContext.previousAssignees !== 'undefined' && pageContext.previousAssignees.length > 0); }","isBookingStatusHidden":"function(pageContext) {if (typeof pageContext.isCustomerPortalOrderDetailsModelPresent != 'undefined' && pageContext.isCustomerPortalOrderDetailsModelPresent == true && typeof pageContext.UID != 'undefined' && pageContext.UID != '' && pageContext.UID != '-' && (pageContext.status == 'workOrderTaskOpen' || pageContext.status == 'workOrderTaskScheduled') && pageContext.bookingStatus != '-' && pageContext.bookingStatus != '') { return false; } else { return true; }}","isAttendanceHidden":"function (pageContext) { return (pageContext.status === 'workOrderTaskScheduled' || pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskReopened' || pageContext.status === 'workOrderTaskAutoScheduling' || pageContext.logsAction === 'dispatchFailed') }","showErrMsgForEstDuration":"function (pageContext) {if(pageContext.workOrderTaskEstimatedDuration <= 0 || pageContext.workOrderTaskEstimatedDuration > 24){pageContext.errTxt='Estimated task duration must be between .25 and 24 hours';return true;}else if(pageContext.workOrderTaskEstimatedDuration % 0.25 > 0){pageContext.errTxt='This field only accepts values ending in .25, .50, .75 or .00';return true;}else {return false;} }","isCloseButtonHidden":"function (pageContext) { return ((pageContext.action === 'view' && pageContext.status !== 'workOrderTaskAutoScheduling') || pageContext.action === 'calendarOpenTask') }","isAppointmentWindowTypeTask":"function(pageContext){return (pageContext.workOrderTaskAppointmentBasedFlag)}","isLongDurationTaskHidden":"function(pageContext) { let returnFlag = true; if (typeof pageContext.workOrderTaskLongDurationFlag !== 'undefined' && pageContext.workOrderTaskLongDurationFlag !== '') { returnFlag = !(pageContext.workOrderTaskLongDurationFlag); } return returnFlag; }","isDependencyDatagridHidden":"function (pageContext){ return !((typeof pageContext.taskDependencyData !== 'undefined' && pageContext.taskDependencyData !== '' && pageContext.taskDependencyData.length > 0));}","isAppointmentWindowHidden":"function(pageContext){return !(pageContext.workOrderTaskAppointmentBasedFlag);}","isActionViewOrCalendarOpenTask":"function (pageContext){return pageContext.action === 'view' || pageContext.action === 'calendarOpenTask'}","isTaskNotDispatched":"function(pageContext){return (pageContext.status === 'workOrderTaskScheduled' || pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskReopened')}","isLongDurationTypeTask":"function(pageContext) { let returnFlag = true; if (typeof pageContext.workOrderTaskLongDurationFlag !== 'undefined' && pageContext.workOrderTaskLongDurationFlag !== '') { returnFlag = pageContext.workOrderTaskLongDurationFlag; } return returnFlag; }","isNotCrewTask":"function(pageContext) {return pageContext.action === 'openTask' || !pageContext.taskTypeCrewTask || pageContext.action === 'calendarOpenTask'}","isStatusNameHidden":"function (pageContext) {return(pageContext.logsAction === 'dispatchFailed')}","isSelectedServicesHidden":"function (pageContext) { if( typeof pageContext.showSelectedServicesGrid != 'undefined' &&  pageContext.showSelectedServicesGrid == true ) { return false; } else { return true; } }","disableScheduledEndDate":"function(pageContext) { if (pageContext.workOrderTaskLongDurationFlag === true && (typeof pageContext.workOrderTaskScheduledDate === 'undefined' || pageContext.workOrderTaskScheduledDate === '')) { return true; } else { return false; } }"},"header":{"leftData":{"children":[{"hidden":"@jslib.isBackButtonHidden","name":"back","icon":"@iconlib.NavigationArrowBackGrey","actionOnClick":["@actions.goToPreviousPanel"],"id":"back","type":"buttonIcon"}]},"children":[{"hidden":"@jslib.isStatusNameHidden","statusColor":"@pageContext.statusNameColor","id":"status","type":"status","value":"@pageContext.statusName"},{"data":[{"buttonType":"secondary","hidden":"@jslib.isTaskNotDispatched","actionOnClick":["@actions.recallTaskModal"],"id":"recallTask","type":"button","title":"@lang.['rt3','Recall Task']"},{"buttonType":"secondary","hidden":"@jslib.isTaskDispatched","actionOnClick":["@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskDueDate","@actions.decisionActionCheckCrewTask","@actions.setWorkOrderTaskStatusAndEventTypeForDispatch","@actions.fetchTaskDependencyCheck","@actions.setDependencyCheck","@actions.appointmentWindowDecision"],"disabled":"@jslib.isDispatchTaskDisabled","id":"saveAndDispatchFromOpenTasks","type":"button","title":"@lang.['dt3','Dispatch Task']"},{"buttonType":"secondary","actionOnClick":["@actions.cancelTaskModal"],"id":"cancelTask","type":"button","title":"@lang.['ct4','Cancel Task']"}],"hidden":"@jslib.isActionViewOrCalendarOpenTask","type":"actionDropdown","title":"@lang.['o4','Options']"},{"buttonType":"secondary","hidden":"@jslib.isActionNotCalendarOpenTask","actionOnClick":["@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskStatusAndEventTypeForDispatch","@actions.setWorkOrderTaskDueDate","@actions.fetchTaskDependencyCheck","@actions.setDependencyCheck","@actions.appointmentWindowDecision"],"disabled":"@jslib.isDispatchTaskDisabled","id":"saveAndDispatchButton","type":"button","title":"@lang.['sad1','Schedule And Dispatch']"},{"buttonType":"primary","hidden":"@jslib.isActionView","actionOnClick":["@actions.setUpsertData","@actions.removeAssignee","@actions.setWorkOrderTaskStatusAndEventTypeForSave","@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskDueDate","@actions.updateCustomerContactDetails","@actions.appointmentWindowDecision"],"disabled":"@jslib.isSaveDisabled","id":"submit","type":"button","title":"@jslib.saveButtonText"},{"hidden":"@jslib.isCloseButtonHidden","icon":"@iconlib.NavigationCloseGrey","actionOnClick":["@actions.closePanel","@actions.clearPageContext","@actions.refreshDataGrid"],"id":"close","type":"buttonIcon"}],"title":"@jslib.dynamicHeaderText"},"body":{"children":[{"children":[{"children":[{"hidden":true,"id":"infoText","type":"infoText","value":"The fields below display date and time in the Timezone of the Property"},{"hidden":"@jslib.isScheduleAndAssignPage","children":[{"hidden":true,"readOnly":true,"id":"WorkOrderDeadline1","title":"Work Order Deadline","type":"datetime","value":"@pageContext.workOrderDeadline"},{"hidden":false,"readOnly":true,"id":"appointmentWindowStart1","title":"Appointment Window Start","type":"datetime","value":"@pageContext.workOrderTaskAppointmentWindowStartDate"},{"hidden":false,"readOnly":true,"id":"appointmentWindowEnd1","title":"Appointment Window End","type":"datetime","value":"@pageContext.workOrderTaskAppointmentWindowEndDate"},{"isRequired":false,"actionOnChange":["@actions.changeTztime"],"minDate":"@pageContext.currentDate","hidden":false,"readOnly":false,"disabled":"@jslib.disableSchedule","id":"workOrderTaskScheduledDate","title":"@lang.['sdt2','Scheduled Date & Time']","type":"datetime","value":"@pageContext.workOrderTaskScheduledDate","placeHolder":"@lang.['etsdt','Enter the scheduled date & time']"},{"minDate":"1970-01-01 00:00","readOnly":true,"id":"workOrderDeadline","title":"@lang.['wod1','Due Date']","type":"datetime","value":"@pageContext.workOrderDeadline"}],"disabled":"@jslib.isEditPage","id":"section_6136","label":"","type":"section","title":"section_6136"},{"alertMessage":"@lang.['ttcbeaiiciass','This task cannot be edited as it is currently in Auto Scheduling status.']","alertType":"warning","rightIconVisible":false,"hidden":"@jslib.isBannerHidden","id":"alertMessage","type":"alert"},{"alertMessage":"@lang.['tcbdbtsthappatstiotp','Task cannot be dispatched because the start time has already passed. Please adjust the start time in order to proceed.']","alertType":"warning","rightIconVisible":false,"hidden":"@jslib.isScheduledDateWarningHidden","id":"scheduledDateWarning","type":"alert"},{"hidden":false,"children":[{"alertType":"warning","id":"errSectionAlert","type":"sectionAlert","message":"@pageContext.bannerText","sectionBannerAlert":"@jslib.showBanner"},{"hidden":false,"children":[{"children":[{"readOnly":true,"id":"appointmentWindowStart","label":"@lang.['aws','Appointment Window Start']","title":"@lang.['aws','Appointment Window Start']","type":"input","value":"@pageContext.appointmentWindowStartDate"}],"flex":"3","type":"column"},{"children":[{"readOnly":true,"id":"appointmentWindowEnd","label":"@lang.['awe','Appointment Window End']","title":"@lang.['awe','Appointment Window End']","type":"input","value":"@pageContext.appointmentWindowEndDate"}],"flex":"3","type":"column"}],"id":"appointmentWindowRow","type":"row"},{"hidden":"@jslib.isLongDurationTypeTask","children":[{"children":[{"isRequired":false,"minDate":"@pageContext.currentDate","disabled":true,"readOnly":true,"id":"workOrderTaskScheduledDate","label":"Scheduled Date & Time","title":"Scheduled Date & Time","type":"input","value":"@pageContext.siteLocalTime","placeHolder":"@lang.['etsdt','Enter the scheduled date & time']"}],"flex":"3","type":"column"},{"children":[{"isRequired":true,"errorText":"@pageContext.errTxt","actionOnChange":["@actions.processWorkOrderTaskEstimatedDurationMinutes"],"validator":"@jslib.showErrMsgForEstDuration","inputType":"number","readOnly":"@jslib.isTaskDispatched","id":"workOrderTaskEstimatedDuration","label":"@lang.['dh2','Duration (In Hours)']","placeholder":"@lang.['etd2','Enter task duration']","type":"input","value":"@pageContext.workOrderTaskEstimatedDuration"}],"flex":"3","type":"column"}],"id":"scheduledDateTimeRow","type":"row"},{"hidden":"@jslib.isLongDurationTaskHidden","children":[{"children":[{"isRequired":true,"minDate":"@pageContext.currentDate","actionOnChange":["@actions.decisionActionCheckLongDurationTask","@actions.clearScheduledEndDate"],"readOnly":"@jslib.isTaskDispatched","id":"scheduledStartDate","label":"@lang.['ssdt1','Scheduled Start Date & Time']","title":"@lang.['ssdt1','Scheduled Start Date & Time']","type":"datetime","value":"@pageContext.workOrderTaskScheduledDate","placeHolder":"@lang.['sd8','Select date']"}],"flex":"3","type":"column"},{"children":[{"isRequired":true,"minDate":"@jslib.minScheduledEndDate","actionOnChange":["@actions.decisionActionCheckLongDurationTask"],"readOnly":"@jslib.isTaskDispatched","id":"scheduledEndDate","label":"@lang.['sedt2','Scheduled End Date & Time']","title":"@lang.['sedt2','Scheduled End Date & Time']","type":"datetime","value":"@pageContext.scheduledEndDate","placeHolder":"@lang.['sd8','Select date']"}],"flex":"3","type":"column"}],"id":"scheduledStartEndDateTimeRow","type":"row"},{"children":[{"children":[{"buttonType":"secondary","actionOnClick":["@actions.getWeeklyScheduleData","@actions.enableDataGridAndSetWeeklyScheduleData","@actions.serviceWindowOverlay"],"id":"serviceWindow","type":"button","title":"@lang.['vsw','View Service Window']"}],"flex":"0","type":"column"}],"id":"serviceWindow","type":"row"},{"children":[{"children":[{"actionOnChange":["@actions.setBookingStatus"],"hidden":"@jslib.isBookingStatusHidden","options":"@pageContext.bookingStatuses","optTitleKey":"label","optValueKey":"value","id":"priorityList","title":"Booking Status","type":"select","value":"@pageContext.bookingStatus","placeHolder":""}],"flex":"2","type":"column"},{"flex":"4","type":"column"}],"id":"bookingStatus1","type":"row"}],"label":"Scheduling (Site Local Time)","id":"schedule","type":"section"},{"hidden":true,"children":[{"id":"scheduleBreakdownGrid","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.taskScheduleMultipleBreakdown"}},"isScrollAble":false,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsBinPurple","hidden":"@jslib.hideStatusDispatched","icon":"@iconlib.ActionsBinGrey","name":"@lang.['d1','Delete']","tooltip":"@lang.['d1','Delete']","actionOnClick":["@actions.deleteTimeSlot","@actions.refreshScheduleBreakdownGrid"],"id":"deleteTimeSlot","type":"buttonIcon","title":"@lang.['d1','Delete']"}]},"gridRefreshId":"scheduleBreakdownGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['sd4','Scheduled Date']","options":{"type":"date","showLabel":true},"key":"startDate"},{"name":"@lang.['st7','Start Time']","options":{"type":"time","showLabel":true},"key":"startDate"},{"name":"@lang.['et2','End Time']","options":{"type":"time","showLabel":true},"key":"endDate"},{"name":"@lang.['dh2','Duration (In Hours)']","options":{"showLabel":true},"key":"durationInHours"}],"actionOnLoad":[],"jslib":{"hideStatusDispatched":"function(pageContext){return pageContext.action === 'dispatch' || pageContext.action === 'view' || pageContext.workOrderTaskAction == 'view' || pageContext.logsAction === 'dispatchFailed';}"},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['taskSchedule','Task Schedule']","children":[{"buttonType":"secondary","hidden":"@jslib.hideStatusDispatched","actionOnClick":["@actions.openClearAll"],"id":"clearAll","type":"button","title":"@lang.['ca2','Clear All']"},{"buttonType":"primary","hidden":"@jslib.hideStatusDispatched","actionOnClick":["@actions.openWorkOrderTaskTimeSlotNNSP","@actions.editSchedule","@actions.updateDataGrid"],"id":"edit","type":"button","title":"@lang.['es1','Edit Schedule']"}]},"isSelectable":false,"actions":[{"name":"deleteTimeSlot","type":"script","actionDef":"function (pageContext) { _.remove(pageContext.taskScheduleMultipleBreakdown, function (breakdown) { if (breakdown.startDate === pageContext.startDate) { return true; } }); let totalDuration = 0; if (Array.isArray(pageContext.taskScheduleMultipleBreakdown)) { totalDuration = ((pageContext.taskScheduleMultipleBreakdown.reduce((total, element) => { return total + element.duration; }, 0)) / 60); } pageContext.workOrderTaskTotalDuration = (totalDuration % 1 === 0) ? totalDuration.toFixed(0) : totalDuration.toFixed(2); pageContext.workOrderTaskEstimatedDuration = pageContext.workOrderTaskTotalDuration; pageContext.workOrderTaskScheduledDate = pageContext.taskScheduleMultipleBreakdown[0].startDate; }"},{"name":"editSchedule","type":"script","actionDef":"function(pageContext){pageContext.editTaskScheduleBreakdown='edit';pageContext.workOrderTaskScheduledDate='';pageContext.workOrderTaskEstimatedDuration='';pageContext.workOrderTaskEstimatedDurationMinutes='';}"},{"name":"updateDataGrid","type":"openPanel","requiredPageContextKeys":"[\"taskScheduleMultipleBreakdown\",\"editTaskScheduleBreakdown\",\"workOrderTaskScheduledDate\",\"workOrderTaskEstimatedDurationMinutes\",\"workOrderTaskEstimatedDuration\"]"},{"name":"refreshScheduleBreakdownGrid","gridId":["scheduleBreakdownGrid"],"type":"RefreshGridOnSidePanel"},{"name":"openWorkOrderTaskTimeSlotNNSP","type":"openPanel","pageId":"5JNK1AE1DY"},{"name":"closeModal","type":"closeModal"},{"subTitle":"@lang.['aysywtctsastswbr','Are you sure you want to clear the schedule? All scheduled time slots will be removed.']","name":"openClearAll","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.clearGridData","@actions.refreshScheduleBreakdownGrid"],"type":"button","title":"@lang.['y','Yes']"}],"type":"openModal","title":"@lang.['ca2','Clear All']"}],"searchKeys":[]}}],"localPageContext":true,"label":"@lang.['s38','Scheduling']","id":"taskScheduleMultipleBreakdown","type":"section","transparent":true},{"hidden":"@jslib.isCrewHidden","children":[{"hidden":"@jslib.isTaskDispatched","children":[{"children":[{"actionOnChange":["@actions.setAssignee","@actions.fetchCrewLeadUserId","@actions.setCrewLeadId"],"isMultiSelect":false,"optLabelMap":"crewName","optValueMap":"crewId","searchByOptions":{"dataSourceId":"process/start","sourceType":"api","columns":["crewName","crewId"],"dataToBeSent":{"apiResponseParams":["count"],"inputVar":{},"processId":"taskSchedulingFetchCrewListWF","apiResponseFormat":true,"contextVar":{"filter":"{$userName} like {@searchText}","workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"crewListData"}},"label":"@lang.['a4','Assignee']","id":"selectDropdown","type":"selectDropdown","value":"@pageContext.selectDropdown"}],"flex":"9","type":"column"},{"children":[{"buttonType":"primary","actionOnClick":["@actions.openCrewNestedSidePanel"],"id":"submitTechnician","type":"button","title":"@lang.['va','View All']"}],"flex":"3","id":"viewTechButton","type":"column"}],"id":"selectTechRow","type":"row"}],"id":"selectCrewSection","type":"section"},{"hidden":"@jslib.isTechnicianHidden","children":[{"hidden":"@jslib.isTaskDispatched","children":[{"children":[{"actionOnChange":["@actions.setAssignee","@actions.refreshPartsAndMaterialsGrid1"],"isMultiSelect":false,"optLabelMap":"userName","optValueMap":"workforceUserId","searchByOptions":{"dataSourceId":"process/start","sourceType":"api","columns":["userName","workforceUserId"],"dataToBeSent":{"apiResponseParams":["count"],"inputVar":{},"processId":"taskSchedulingAndAssignFetchEligibleTechniciansWF","apiResponseFormat":true,"contextVar":{"filter":"{$userName} like {@searchText}","workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"technicianList"}},"label":"@lang.['a4','Assignee']","id":"selectDropdown","type":"selectDropdown","value":"@pageContext.selectDropdown"}],"flex":"9","type":"column"},{"children":[{"buttonType":"primary","actionOnClick":["@actions.isSinglebreakdown"],"id":"submitTechnician","type":"button","title":"@lang.['vaa01','View Appraiser / Analyst']"}],"flex":"3","id":"viewTechButton","type":"column"}],"id":"selectTechRow","type":"row"}],"id":"selectTechnicianSection","type":"section"},{"hidden":true,"children":[{"id":"partsAndMaterials","type":"dataGrid","jsonDef":{"isScrollAble":true,"tableWidth":"50rem","searchAllowed":false,"rowActions":{"children":[]},"gridRefreshId":"partsAndMaterialsGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['mn','Model Name']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogName"},{"name":"@lang.['mn1','Model Number']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogModelNumber"},{"name":"@lang.['eq1','Estimated Quantity']","options":{"flex":1.5,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"workOrderInventoryEstimatedQty"},{"name":"@lang.['onHandQty','On Hand Quantity']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"inventoryQty"}],"dataToBeSent":{"apiResponseParams":["count"],"inputVar":{},"processId":"fetchPartsRequiredForTaskWF","apiResponseFormat":true,"contextVar":{"workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"},"apiResponseObject":"partsData"},"dataSourceId":"process/start","jslib":{"hideInventoryRequestButton":"function(pageContext) { return pageContext.calledFromBulkDispatchLogs; }","isInventoryRequestDisabled":"function(pageContext) {if (typeof pageContext.isPartsDataPresent !== 'undefined' && pageContext.isPartsDataPresent === true) { return false; } else { return true; }}"},"rowTextLength":30,"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['pr1','Part Requirements']","children":[{"buttonType":"primary","hidden":"@jslib.hideInventoryRequestButton","actionOnClick":["@actions.setFilter","@actions.openManageInventoryRequestNSP"],"disabled":"@jslib.isInventoryRequestDisabled","id":"addNew","type":"button","title":"@lang.['inventoryRequest','Inventory Requests']"}]},"isSelectable":false,"actions":[{"name":"setFilter","type":"script","actionDef":"function(pageContext){pageContext.inventoryRequestFilter = `{$inventoryRequestWorkOrderTaskId} = '${pageContext.workOrderTaskId}'`;}"},{"name":"openManageInventoryRequestNSP","type":"openPanel","pageId":"taskSchedulingAndAssignManageInventoryRequestNSP"}],"searchKeys":[]}}],"id":"partsAndMaterials","label":"@lang.['pamrftt','Parts & Materials Required For The Task']","type":"section","transparent":true},{"hidden":true,"children":[{"id":"partsAndMaterials1","type":"dataGrid","jsonDef":{"isScrollAble":true,"tableWidth":"50rem","searchAllowed":false,"rowActions":{"children":[]},"gridRefreshId":"partsAndMaterialsGrid1","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['mn','Model Name']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogName"},{"name":"@lang.['mn1','Model Number']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogModelNumber"},{"name":"@lang.['eq1','Estimated Quantity']","options":{"flex":1.5,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"workOrderInventoryEstimatedQty"},{"name":"@lang.['onHandQty','On Hand Quantity']","options":{"flex":1,"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"inventoryQty"}],"dataToBeSent":{"apiResponseParams":["count"],"inputVar":{},"processId":"fetchPartsRequiredForTaskWF","apiResponseFormat":true,"contextVar":{"workOrderTaskAssignedToUserId":"@pageContext.workOrderTaskAssignedToUserId","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"},"apiResponseObject":"partsData"},"dataSourceId":"process/start","jslib":{"hideInventoryRequestButton":"function(pageContext) { return pageContext.calledFromBulkDispatchLogs; }","isInventoryRequestDisabled":"function(pageContext) {if (typeof pageContext.isPartsDataPresent !== 'undefined' && pageContext.isPartsDataPresent === true) { return false; } else { return true; }}"},"rowTextLength":30,"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['pr1','Part Requirements']","children":[{"buttonType":"primary","hidden":"@jslib.hideInventoryRequestButton","actionOnClick":["@actions.setFilter","@actions.openManageInventoryRequestNSP"],"disabled":"@jslib.isInventoryRequestDisabled","id":"addNew","type":"button","title":"@lang.['inventoryRequest','Inventory Requests']"}]},"isSelectable":false,"actions":[{"name":"setFilter","type":"script","actionDef":"function(pageContext){pageContext.inventoryRequestFilter = `{$inventoryRequestWorkOrderTaskId} = '${pageContext.workOrderTaskId}'`;}"},{"name":"openManageInventoryRequestNSP","type":"openPanel","pageId":"taskSchedulingAndAssignManageInventoryRequestNSP"}],"searchKeys":[]}}],"id":"partsAndMaterials1","label":"@lang.['pamrftt','Parts & Materials Required For The Task']","type":"section","transparent":true},{"hidden":"@jslib.isNotCrewTask","children":[{"readOnly":true,"id":"assigneeName","label":"@lang.['a4','Assignee']","type":"input","value":"@pageContext.assigneeName"},{"readOnly":true,"id":"phoneNumber","label":"@lang.['phoneNumber','Phone Number']","type":"input","value":"@pageContext.crewPhoneNumber"}],"id":"assigneeSection","label":"@lang.['ad','Assignee Details']","type":"collapseSection"},{"hidden":"@jslib.isCrewTask","children":[{"readOnly":true,"id":"assignee","label":"@lang.['a4','Assignee']","title":"","type":"input","value":"@pageContext.userName"},{"readOnly":true,"id":"phoneNumber","label":"@lang.['phoneNumber','Phone Number']","type":"input","value":"@pageContext.userPhoneNumber"}],"id":"assigneeSection","label":"@lang.['ad','Assignee Details']","type":"collapseSection"},{"hidden":"@jslib.isDependencyOverrideHidden","children":[{"readOnly":true,"id":"workOrderTaskOverrideReason","label":"@lang.['rfopd','Reason for overriding pending dependency']","type":"input","value":"@pageContext.workOrderTaskOverrideReason"},{"readOnly":true,"id":"workOrderTaskOverrideComment","label":"@lang.['c4','Comments']","type":"input","value":"@pageContext.workOrderTaskOverrideComment"}],"id":"dependencyOverride","label":"@lang.['do','Dependency Override']","type":"section"},{"hidden":"@jslib.isDependencyDatagridHidden","children":[{"label":"","id":"dependenciesDataGrid","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.taskDependencyData"}},"isScrollAble":true,"tableWidth":"60rem","jslib":{},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['td3','Task Dependencies']"},"gridRefreshId":"dependenciesDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSelectable":false,"dataSource":[],"actions":[],"tableHeader":[{"name":"@lang.['t7','Tasks']","options":{"flex":0.8,"showLabel":true},"key":"taskDependencyPrecedentTask"},{"name":"@lang.['c26','Condition']","options":{"flex":0.6,"sortOrder":"ASC","sortable":false,"showLabel":true},"key":"taskDependencyEnforceAllDependency"},{"name":"@lang.['s','Status']","options":{"flex":0.55,"sortOrder":"ASC","sortable":false,"showLabel":true},"key":"taskDependencyPrecedentStatusName"},{"name":"@lang.['dt5','Dependent Tasks']","options":{"flex":0.8,"showLabel":true},"key":"taskDependencyDependentTask"},{"name":"@lang.['ds3','Dependent Status']","options":{"flex":0.55,"sortOrder":"ASC","sortable":false,"showLabel":true},"key":"taskDependencyDependentStatusName"}],"searchKeys":[]}}],"id":"dependencies","label":"@lang.['d27','Dependencies']","type":"section","transparent":true},{"hidden":"@jslib.isTravelDetailsHidden","children":[{"readOnly":true,"id":"startTravelAt","title":"@lang.['sta','Started travelling at']","type":"datetime","value":"@pageContext.startTravelAt"},{"readOnly":true,"id":"transportMode","label":"@lang.['modeOfTransport','Mode of Transport']","type":"input","value":"@pageContext.transportMode"},{"readOnly":true,"id":"estimatedArrivalTime","title":"@lang.['etoaacs','Estimated Time of Arrival at Customer Site']","type":"datetime","value":"@pageContext.estimatedArrivalTime","hoverText":{"title":"@lang.['cbotmotubtaa','Calculated based on the Mode of Transport used by the Appraiser / Analyst']"}},{"hidden":"@jslib.isShowActualStartTime","readOnly":true,"id":"actualArrivalTime","title":"@lang.['atoaacacs','Actual Time of Arrival and Check In at Customer Site']","type":"datetime","value":"@pageContext.actualStartTime"},{"readOnly":true,"id":"startedTravelFrom","label":"@lang.['stf2','Started travelling from']","type":"input","value":"@pageContext.startAddress"},{"readOnly":true,"id":"customerSite","label":"@lang.['csl','Customer Site Location']","type":"input","value":"@pageContext.customerSite"},{"readOnly":true,"id":"endAddress","label":"@lang.['csa1','Customer Site Address']","type":"input","value":"@pageContext.endAddress"}],"label":"@lang.['td2','Travel Details']","id":"taskTravelDetails","type":"collapseSection"},{"children":[{"hidden":"","readOnly":true,"id":"primaryApprasier","label":"@lang.['pa3','Primary Appraiser']","type":"input","value":"@pageContext.primaryApprasier"},{"hidden":"","readOnly":true,"id":"lenderName","label":"@lang.['ln4','Lender Name']","type":"input","value":"@pageContext.lenderName"},{"hidden":"","readOnly":true,"id":"reportType","label":"@lang.['reportType','Report Type']","type":"input","value":"@pageContext.reportType"},{"hidden":"","readOnly":true,"id":"loanType","label":"@lang.['loanType','Loan Type']","type":"input","value":"@pageContext.loanType"},{"hidden":"","readOnly":true,"id":"contractValue","label":"@lang.['contractValue','Contract Value']","type":"input","value":"@pageContext.contractValue"},{"hidden":"","readOnly":true,"id":"tags","label":"@lang.['t01','Tags']","type":"input","value":"@pageContext.tags"},{"hidden":"","readOnly":true,"id":"gla","label":"@lang.['gla','GLA']","type":"input","value":"@pageContext.gla"},{"hidden":"","readOnly":true,"id":"complex","label":"@lang.['complex','Complex']","type":"input","value":"@pageContext.complex"},{"hidden":"","readOnly":true,"id":"rural","label":"@lang.['rural','Rural']","type":"input","value":"@pageContext.rural"},{"hidden":"","readOnly":true,"id":"historical","label":"@lang.['historical','Historical']","type":"input","value":"@pageContext.historical"}],"id":"section_6136","label":"@lang.['anowData','Anow Data']","type":"section","title":"section_6136"},{"children":[{"readOnly":true,"id":"taskId","label":"@lang.['taskId','Task ID']","type":"input","value":"@pageContext.workOrderTaskId"},{"readOnly":true,"id":"taskType","label":"@lang.['taskType','Task Type']","type":"input","value":"@pageContext.taskTypeName"},{"readOnly":true,"id":"workOrderId","label":"@lang.['woi3','Work Order ID']","type":"input","value":"@pageContext.workOrderTaskWorkOrderId"},{"readOnly":true,"id":"workOrderType","label":"@lang.['wot1','Work Order Type']","type":"input","value":"@pageContext.workOrderTypeName"},{"readOnly":true,"id":"priority","label":"@lang.['priority','Priority']","type":"input","value":"@pageContext.ZPriorityName"},{"readOnly":true,"id":"customerSite","label":"@lang.['cs','Customer Site']","type":"input","value":"@pageContext.siteName"},{"hidden":true,"readOnly":true,"id":"assets","label":"@lang.['assets','Assets']","type":"input","value":"@pageContext.selectedCatalog"},{"readOnly":"@jslib.isActionView","id":"internalNotes","label":"@lang.['ino','Internal Notes (Optional)']","type":"textarea","value":"@pageContext.workOrderTaskAcInternalNotes","placeHolder":"@lang.['ino','Internal Notes (Optional)']"},{"readOnly":"@jslib.isActionView","id":"notes","label":"@lang.['n2','Notes (Optional)']","type":"textarea","value":"@pageContext.workOrderTaskNotes","placeHolder":"@lang.['en','Enter Notes (Optional)']"}],"label":"@lang.['taskDetails','Task Details']","id":"taskDetails","type":"collapseSection"},{"children":"@pageContext.dynamicComponent","label":"","id":"schedule","type":"section","transparent":true}],"label":"@lang.['s19','Schedule']","type":"tab"},{"children":[{"children":[{"inputType":"text","readOnly":true,"id":"customerId","label":"@lang.['customer','Customer']","type":"input","value":"@pageContext.customerCompanyName"},{"inputType":"text","readOnly":false,"disabled":"@jslib.disableSiteDetails","id":"customerContactPerson","label":"@lang.['cpn','Contact Person Name']","type":"input","value":"@pageContext.customerContactPerson"},{"inputType":"text","readOnly":true,"id":"customerContactTitle","label":"@lang.['ct3','Contact Title']","type":"input","value":"@pageContext.customerContactTitle"},{"readOnly":false,"disabled":"@jslib.disableSiteDetails","id":"customerContactPhone","label":"@lang.['cp','Contact Phone']","type":"phoneNumber","value":"@pageContext.customerContactPhone"},{"inputType":"email","readOnly":false,"disabled":"@jslib.disableSiteDetails","id":"customerContactEmail","label":"@lang.['ce','Contact Email']","type":"input","value":"@pageContext.customerContactEmail"}],"label":"@lang.['customer','Customer']","id":"customerDetails","type":"section"},{"children":[{"inputType":"text","readOnly":true,"id":"customerSite","label":"@lang.['cs','Customer Site']","type":"input","value":"@pageContext.siteName"},{"readOnly":true,"id":"siteAddress","label":"@lang.['address','Address']","placeholder":"@lang.['ea','Enter address']","type":"address","value":"@pageContext.siteAddress"},{"inputType":"text","readOnly":true,"id":"Market","label":"@lang.['M12','Market']","type":"input","value":"@pageContext.regionName"},{"containerElementHeight":"30rem","item":{"fieldsToShow":[]},"defaultZoom":17,"preserveViewport":false,"location":{"children":[{"dataType":"label","id":"locationText","type":"text","value":"@pageContext.siteAddress"}],"coordinates":"@jslib.getLocationCoordinates","icon":"https://cdn.zeplin.io/5be3ee39a464fd7e89ffaaa0/assets/57BF1B12-69E2-4E77-881C-A53900EB4260.svg","type":"Point"},"id":"mapForShowStatic","type":"map","renderType":"location","mapElementHeight":"100%","mapJson":{}}],"label":"@lang.['l3','Location']","id":"locationDetails","type":"section"}],"label":"@lang.['sd3','Site Details']","id":"siteTab","type":"tab"},{"hidden":"@jslib.isServiceTabHidden","children":[{"children":[{"readOnly":true,"id":"taskTypeName","label":"@lang.['taskType','Task Type']","type":"input","value":"@pageContext.taskTypeName"}],"id":"location","type":"section"},{"children":[{"label":"","id":"servicesGrid","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['navS3','Services']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogName"},{"name":"@lang.['d','Description']","options":{"sortable":false,"showLabel":true},"key":"description"}],"dataToBeSent":{"filter":"  {$catalog.id} IN {@serviceList}","models":["catalog"],"columns":{"catalogName":"catalog.name","description":"catalog.description"},"inputs":{"serviceList":"@pageContext.workOrderTaskServicesArray"},"name":"workOrderTaskServices","distinct":true,"description":"workOrderTaskServices"},"dataSourceId":"query/read","header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['navS3','Services']"},"isSelectable":false,"updateAllowed":true,"actions":[],"searchKeys":["catalogName"]}}],"id":"location","label":"@lang.['los1','List of services']","type":"section","transparent":true}],"label":"@lang.['navS3','Services']","type":"tab"},{"hidden":"@jslib.isAttendanceHidden","children":[{"hidden":"@jslib.isNotCrewTask","children":[{"readOnly":true,"id":"assignedCrew","label":"@lang.['lac','Last Assigned Crew']","type":"input","value":"@pageContext.crewName"}],"id":"crewName","label":"","type":"section"},{"hidden":"@jslib.isCrewTask","children":[{"readOnly":true,"id":"assignee","label":"@lang.['a4','Assignee']","type":"input","value":"@pageContext.userName"},{"readOnly":true,"id":"phoneNumber","label":"@lang.['phoneNumber','Phone Number']","type":"input","value":"@pageContext.userPhoneNumber"},{"readOnly":true,"id":"email","label":"@lang.['e4','Email']","type":"input","value":"@pageContext.userEmail"}],"id":"singleAttendance","label":"@lang.['ca','Current Assignee']","type":"section"},{"hidden":"@jslib.isNotCrewTask","children":[{"label":"","id":"crewMembers","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":true,"tableWidth":"80rem","searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","hidden":{"checkInType":[false]},"name":"@lang.['va1','View Attendance']","tooltip":"@lang.['va1','View Attendance']","icon":"@iconlib.ActionsVisibleGrey","actionOnClick":["@actions.openViewCrewDataSidePanel"],"type":"buttonIcon"}]},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['n','Name']","options":{"flex":1,"showLabel":true},"key":"userName"},{"name":"@lang.['c27','Crew']","options":{"flex":1,"showLabel":true},"key":"crewName"},{"name":"@lang.['e4','Email']","options":{"flex":1.5,"showLabel":true},"key":"userEmail"},{"name":"@lang.['phoneNumber','Phone Number']","options":{"flex":1,"showLabel":true},"key":"userPhoneNumber"},{"name":"@lang.['checkIn','Check In']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkIn"},{"name":"@lang.['checkOut','Check Out']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkOut"},{"name":"@lang.['r8','Role']","options":{"flex":1,"showLabel":true},"key":"crewRole"},{"name":"@lang.['mci','Manual Check In']","options":{"flex":1,"showLabel":true},"key":"manualCheckIn"},{"name":"@lang.['cit','Check In Type']","options":{"hidden":true,"flex":1,"showLabel":false},"key":"checkInType"}],"dataToBeSent":{"apiResponseParams":["count"],"processId":"workOrderTaskCrewDataWF","apiResponseFormat":true,"contextVar":{"responseGrid":"crewAttendance","workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"crewAttendance"},"dataSourceId":"process/start","sourceType":"api","header":{"filterAllowed":true,"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['cm','Crew Members']"},"isSelectable":false,"updateAllowed":true,"actions":[{"name":"openViewCrewDataSidePanel","type":"openPanel","pageId":"97DNWZDQMO"}],"searchKeys":["userName"]}}],"id":"crewMembers","label":"@lang.['a10','Assignees']","type":"section","transparent":true},{"hidden":"@jslib.isCrewTask","children":[{"label":"","id":"singleTechAttendanceHistoryDataGrid","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":true,"tableWidth":"80rem","searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","hidden":{"checkInType":[false]},"name":"@lang.['vd','View Details']","tooltip":"@lang.['vd','View Details']","icon":"@iconlib.ActionsVisibleGrey","actionOnClick":["@actions.openCheckInDetailsNNSP"],"type":"buttonIcon"}]},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['checkIn','Check In']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkInTime"},{"name":"@lang.['checkOut','Check Out']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkOutTime"},{"name":"@lang.['au1','Address Updated']","options":{"flex":1,"showLabel":true},"key":"addressUpdated"},{"name":"@lang.['ul','Updated Location']","options":{"flex":1,"showLabel":true},"key":"location"},{"name":"@lang.['n','Name']","options":{"flex":1,"showLabel":true},"key":"userName"},{"name":"@lang.['e4','Email']","options":{"flex":1.5,"showLabel":true},"key":"userEmail"},{"name":"@lang.['phoneNumber','Phone Number']","options":{"flex":1,"showLabel":true},"key":"userPhoneNumber"},{"name":"@lang.['cit','Check In Type']","options":{"hidden":true,"flex":1,"showLabel":false},"key":"checkInType"}],"dataToBeSent":{"apiResponseParams":["count"],"processId":"workOrderTaskCrewDataWF","apiResponseFormat":true,"contextVar":{"responseGrid":"currentAssigneeAddendance","workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"currentAssigneeAddendance"},"dataSourceId":"process/start","sourceType":"api","header":{"filterAllowed":true,"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['ah2','Attendance History']"},"isSelectable":false,"updateAllowed":true,"actions":[{"name":"openCheckInDetailsNNSP","type":"openPanel","pageId":"B0F4A2FXUE"}],"searchKeys":["userName"]}}],"id":"currentAssigneeAttendance","label":"@lang.['aoca','Attendance Of Current Assignees']","type":"section","transparent":true},{"hidden":"@jslib.isPreviousAssigneeHidden","children":[{"label":"","id":"previousAssigneeGridData","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":true,"tableWidth":"80rem","searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","hidden":{"checkInType":[false]},"name":"@lang.['va1','View Attendance']","tooltip":"@lang.['va1','View Attendance']","icon":"@iconlib.ActionsVisibleGrey","actionOnClick":["@actions.openCheckInDetailsNNSP"],"type":"buttonIcon"}]},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['n','Name']","options":{"flex":1,"showLabel":true},"key":"userName"},{"name":"@lang.['e4','Email']","options":{"flex":1.5,"showLabel":true},"key":"userEmail"},{"name":"@lang.['phoneNumber','Phone Number']","options":{"flex":1,"showLabel":true},"key":"userPhoneNumber"},{"name":"@lang.['checkIn','Check In']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkInTime"},{"name":"@lang.['checkOut','Check Out']","options":{"flex":1,"type":"dateTime","showLabel":true},"key":"checkOutTime"},{"name":"@lang.['au1','Address Updated']","options":{"flex":1,"showLabel":true},"key":"addressUpdated"},{"name":"@lang.['cit','Check In Type']","options":{"hidden":true,"flex":1,"showLabel":false},"key":"checkInType"}],"dataToBeSent":{"apiResponseParams":["count"],"processId":"workOrderTaskCrewDataWF","apiResponseFormat":true,"contextVar":{"responseGrid":"previousAssignees","workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"previousAssignees"},"dataSourceId":"process/start","sourceType":"api","header":{"filterAllowed":true,"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['pa2','Previous Assignees']"},"isSelectable":false,"updateAllowed":true,"actions":[{"name":"openCheckInDetailsNNSP","type":"openPanel","pageId":"97DNWZDQMO"}],"searchKeys":["userName"]}}],"id":"previousAssignee","label":"@lang.['pa2','Previous Assignees']","type":"section","transparent":true}],"label":"@lang.['a11','Attendance']","type":"tab"},{"children":[{"children":[{"id":"workOrderTaskLogs","type":"dataGrid","jsonDef":{"isScrollAble":false,"searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"tableWidth":"50rem","rowActions":{},"gridRefreshId":"logsGridId","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['timeStamp','Time Stamp']","options":{"flex":1.5,"sortOrder":"DESC","sortable":true,"type":"datetime","showLabel":true},"key":"workOrderTaskLogLogDate"},{"name":"@lang.['e10','Event']","options":{"flex":1.5,"sortOrder":"DESC","sortable":true,"showLabel":true},"key":"listOptionAnswerAnswerOptionText"},{"name":"@lang.['mb1','Modified By']","options":{"flex":1.5,"sortOrder":"DESC","sortable":true,"showLabel":true},"key":"userName"},{"name":"@lang.['details','Details']","options":{"flex":2,"showLabel":true},"key":"workOrderTaskLogDetails"},{"name":"@lang.['i','id']","options":{"hidden":true,"showLabel":false},"key":"workOrderTaskLogId","primaryKey":true}],"dataToBeSent":{"filter":"{$workOrderTaskLog.workOrderTaskId} = {@selectedWorkOrderTaskId} AND {$listOptionAnswer.listOptionId}='workOrderTaskLogEvents'","models":["workOrderTaskLog","User","listOptionAnswer"],"columns":{"workOrderTaskLogLogDate":"workOrderTaskLog.logDate","workOrderTaskLogId":"workOrderTaskLog.id","workOrderTaskLogDetails":"workOrderTaskLog.details","listOptionAnswerAnswerOptionText":"listOptionAnswer.answerOptionText","userName":"User.name"},"inputs":{"selectedWorkOrderTaskId":"@pageContext.workOrderTaskId"},"orderBy":"workOrderTaskLogLogDate DESC","outerJoinOnModel":"workOrderTaskLog","links":{"listOptionAnswer":"workOrderTaskLog","workOrderTaskLog":"User"},"translate":true},"dataSourceId":"query/read","jslib":{},"rowTextLength":40,"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['tl','Task Logs']","children":[]},"isSelectable":false,"dataSource":[],"actions":[],"searchKeys":["listOptionAnswerAnswerOptionText","userName"],"multiSelect":false}}],"label":"","id":"workOrderTaskLogSection","type":"section","transparent":true}],"label":"@lang.['navl','Logs']","type":"tab"},{"hidden":"@jslib.isTaskProgressTabHidden","children":[{"children":[{"children":[{"actionOnChange":["@actions.setTimeZoneAndLocale","@actions.decisionActionForTaskProgressFilter","@actions.taskProgressViewChange"],"options":[{"name":"@lang.['d3','Date']","id":"byDate"},{"name":"@lang.['navS3','Services']","id":"byServices"}],"id":"dropdown","label":"@lang.['vprb','View Progress Reports By']","optTitleKey":"name","optValueKey":"id","title":"@lang.['vprb','View Progress Reports By']","type":"dropdown","value":"@pageContext.taskProgressDropdown","placeHolder":"@lang.['so','Select option']"}],"label":"","id":"filterDropdown","type":"section","transparent":true}],"id":"viewProgressReportsBy","label":"","type":"section","transparent":false},{"hidden":"@jslib.isSubmittedProgressHidden","children":[{"id":"submittedProgressData","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.taskProgressDataByDate[0].taskProgressDataByDate"}},"isScrollAble":false,"searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['vtr','View Task Results']","icon":"@iconlib.ActionsVisibleGrey","tooltip":"@lang.['v1','View']","actionOnClick":["@actions.openProgressEvidenceNSP"],"type":"buttonIcon"}]},"gridRefreshId":"submittedProgressDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['so1','Submitted On']","options":{"flex":1.4,"showLabel":true},"key":"date","primaryKey":true},{"name":"@lang.['sd12','Services Delivered']","options":{"flex":1.4,"showLabel":true},"key":"servicesDeliveredCount"},{"name":"@lang.['initialEvidence','Initial Evidence']","options":{"flex":1.4,"showLabel":true},"key":"initialEvidenceCount"},{"name":"@lang.['pe2','Progress Evidence']","options":{"flex":1.4,"showLabel":true},"key":"submitProgressArrayCount"},{"hidden":true,"name":"@lang.['fe','Final Evidence']","options":{},"key":"finalEvidenceCount","primaryKey":true}],"actionOnLoad":[],"dataSourceId":"query/read","jslib":{"isViewResultsByDateDisabled":"function (pageContext) { if( typeof pageContext.selectedRowIds != 'undefined' &&  pageContext.selectedRowIds.length > 0 ) { return false; } else { return true; } }"},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['taskProgress','Task Progress']","children":[{"buttonType":"primary","actionOnClick":["@actions.decisionIfDateSelected"],"disabled":"@jslib.isViewResultsByDateDisabled","id":"viewResults","type":"button","title":"@lang.['vr','View Results']"}]},"isSelectable":true,"actions":[{"falseStep":[],"trueStep":["@actions.setSelectedDates","@actions.processTaskProgressDataByDate","@actions.setFlagsToShowInitialEvidenceAndServicesDelivered","@actions.refreshDataGrids"],"name":"decisionIfDateSelected","type":"decision","actionDef":"function (pageContext) { if( typeof pageContext.selectedRowIds != 'undefined' &&  pageContext.selectedRowIds.length > 0 ) { return true; } else { return false; } }"},{"name":"setSelectedDates","type":"script","actionDef":"function (pageContext) { if ( typeof pageContext.selectedRowIds != 'undefined' &&  pageContext.selectedRowIds.length > 0 ) { pageContext.selectedDates = []; pageContext.selectedRowIds.forEach(function(element) { pageContext.selectedDates.push(element.date); }); } }"},{"name":"openProgressEvidenceNSP","type":"openPanel","pageId":"6KCJEOE5UP"},{"name":"refreshDataGrids","gridId":["servicesDeliveredDataGrid","initialEvidenceDataGrid"],"type":"RefreshGridOnSidePanel"},{"name":"setFlagsToShowInitialEvidenceAndServicesDelivered","type":"script","actionDef":"function (pageContext) { if ( typeof pageContext.selectedRowIds != 'undefined' &&  pageContext.selectedRowIds.length > 0 ) {  pageContext.showInitialEvidenceGrid = true; pageContext.showServicesDeliveredGrid = true;} }"},{"name":"processTaskProgressDataByDate","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.taskProgressDataByDate != 'undefined' && pageContext.taskProgressDataByDate != '' && pageContext.taskProgressDataByDate.length > 0) { pageContext.initialComments = pageContext.taskProgressDataByDate[0].taskProgressDataByDate[0].initialComments; pageContext.finalComments = pageContext.taskProgressDataByDate[0].taskProgressDataByDate[0].finalComments; pageContext.filteredTaskProgressDataByDate = pageContext.taskProgressDataByDate[0].taskProgressDataByDate.filter(function (element) { if (pageContext.selectedDates.indexOf(element.date) > -1) { return true; } else { return false; } }); pageContext.initialEvidenceGridData = []; pageContext.servicesData = []; pageContext.finalEvidenceMainDatagrid = []; pageContext.filteredTaskProgressDataByDate.forEach(function (element) { if (typeof element.initialEvidence !== 'undefined' && element.initialEvidence.length > 0) { element.initialEvidence.forEach(function (ele) { pageContext.initialEvidenceGridData.push(ele); }); } if (typeof element.servicesData !== 'undefined' && element.servicesData.length > 0) { element.servicesData.forEach(function (e) { pageContext.servicesData.push(e); }); } if (typeof element.finalEvidenceArray !== 'undefined' && element.finalEvidenceArray.length > 0) { element.finalEvidenceArray.forEach(function (ele) { pageContext.finalEvidenceMainDatagrid.push(ele); }); } }); pageContext.finalServicesData = []; pageContext.servicesData.forEach(function (ele) { ele.selectedServiceData.forEach(function (e) { var obj = {}; if (new Date(ele.completedOn).getTime() === new Date(e.addedOn).getTime()) { obj = { ...ele, 'serviceMode': e.serviceMode, 'action': e.serviceModeName, 'actionData': e, 'serviceModeName': e.serviceModeName }; delete obj.selectedServiceData; pageContext.finalServicesData.push(obj); } }); }); } }"}],"searchKeys":["date"],"multiSelect":true}}],"label":"","id":"submittedProgress","type":"section","transparent":true},{"hidden":"@jslib.isProgressByServicesHidden","children":[{"id":"servicesGrid","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.taskProgressDataByServices[0].servicesArrayForTaskProgress"}},"isScrollAble":false,"searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{},"gridRefreshId":"servicesDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['si1','Service Id']","options":{"hidden":true,"flex":1.4,"showLabel":false},"key":"id","primaryKey":true},{"name":"@lang.['sn2','Service Name']","options":{"flex":1.4,"showLabel":true},"key":"serviceName","primaryKey":true},{"name":"@lang.['s','Status']","options":{"flex":1.4,"showLabel":true},"key":"serviceStatus"},{"name":"@lang.['r','Records']","options":{"flex":1.4,"showLabel":true},"key":"numberOfServicesUsed"},{"name":"@lang.['sd11','service Data']","options":{"hidden":true,"flex":1.4,"showLabel":false},"key":"servicesData","primaryKey":true}],"singleSelect":true,"actionOnLoad":[],"dataSourceId":"query/read","jslib":{"isViewResultsByServicesDisabled":"function (pageContext) { if( typeof pageContext.selectedRowIds != 'undefined' &&  pageContext.selectedRowIds.length > 0 ) { return false; } else { return true; } }"},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['navS3','Services']","children":[{"buttonType":"primary","actionOnClick":["@actions.setSelectedServicesData","@actions.setFlagsToShowSelectedServices","@actions.refreshSelectedServicesDataGrid"],"disabled":"@jslib.isViewResultsByServicesDisabled","id":"viewResults","type":"button","title":"@lang.['vr','View Results']"}]},"isSelectable":true,"actions":[{"name":"refreshSelectedServicesDataGrid","gridId":["selectedServicesDataGrid"],"type":"RefreshGridOnSidePanel"},{"name":"setSelectedServicesData","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.selectedRowIds !== 'undefined' && pageContext.selectedRowIds.length > 0) { pageContext.selectedServiceName = pageContext.selectedRowIds[0].serviceName; pageContext.selectedServiceData = []; var obj = {}; if (typeof pageContext.selectedRowIds[0].servicesData !== 'undefined') { pageContext.selectedRowIds[0].servicesData.forEach(function (element, index) { obj = { ...element, 'action': element.serviceGridWrapper[index].serviceModeName, 'actionData': element.serviceGridWrapper[index], 'serviceMode': element.serviceGridWrapper[index].serviceMode, 'addedBy': element.serviceGridWrapper[index].addedBy }; delete obj.serviceGridWrapper; pageContext.selectedServiceData.push(obj); }); } } }"},{"name":"setFlagsToShowSelectedServices","type":"script","actionDef":"function(pageContext){pageContext.showSelectedServicesGrid = true;}"}],"searchKeys":["serviceName"]}}],"label":"","id":"services","type":"section","transparent":true},{"hidden":"@jslib.isSelectedServicesHidden","children":[{"id":"selectedServicesData","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.selectedServiceData"}},"isScrollAble":false,"searchAllowed":false,"tableWidth":"50rem","searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['vtr','View Task Results']","icon":"@iconlib.ActionsVisibleGrey","tooltip":"@lang.['v1','View']","actionOnClick":["@actions.openServicesDeliveredNSP"],"type":"buttonIcon"}]},"gridRefreshId":"selectedServicesDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['s33','serviceId']","options":{"hidden":true,"showLabel":false},"key":"serviceItemId","primaryKey":true},{"name":"@lang.['co3','Completed On']","options":{"type":"datetime","showLabel":true},"key":"completedOn"},{"name":"@lang.['action','Action']","options":{"showLabel":true},"key":"action"},{"name":"@lang.['ua1','Updated Asset']","options":{"showLabel":true},"key":"assetName"},{"name":"@lang.['cb1','Captured By']","options":{"showLabel":true},"key":"addedBy"},{"name":"@lang.['s42','serviceMode']","options":{"hidden":true,"showLabel":false},"key":"serviceMode"}],"dataSourceId":"query/read","jslib":{},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@pageContext.selectedServiceName"},"isSelectable":false,"actions":[{"name":"openServicesDeliveredNSP","type":"openPanel","pageId":"KBFLEOEEL2"}],"searchKeys":["addedBy","assetName","assetNumber"]}}],"label":"","id":"selectedServices","type":"section","transparent":true},{"hidden":"@jslib.isInitialEvidenceHidden","children":[{"children":[{"id":"initialEvidenceData","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.initialEvidenceGridData"}},"isScrollAble":false,"searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['vtr','View Task Results']","icon":"@iconlib.ActionsVisibleGrey","tooltip":"@lang.['v1','View']","actionOnClick":["@actions.isInitialEvidence","@actions.openInitialEvidenceNSP"],"type":"buttonIcon"}]},"gridRefreshId":"initialEvidenceDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['co2','Captured On']","options":{"type":"datetime","showLabel":true},"key":"initialEvidenceCapturedTime"},{"name":"@lang.['cb2','Captured By']","options":{"showLabel":true},"key":"capturedBy"},{"name":"@lang.['pp2','Photo Preview']","options":{"hidden":false,"showLabel":true},"type":"thumbnail","key":"initialEvidence","fileType":"JPG"},{"name":"@lang.['n3','Notes']","options":{"showLabel":true},"key":"initialEvidenceNotes"}],"dataSourceId":"query/read","jslib":{},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['ier','Initial Evidence Recorded']"},"updateAllowed":true,"isSelectable":false,"actions":[{"name":"openInitialEvidenceNSP","type":"openPanel","pageId":"0BFEEOE9ON"},{"name":"isInitialEvidence","type":"script","actionDef":"function(pageContext){ pageContext.isInitialEvidence=true; pageContext.isFinalEvidence=false;}"}],"searchKeys":["capturedBy"],"multiSelect":false}}],"label":"","id":"initialEvidenceGrid","type":"section","transparent":true},{"children":[{"readOnly":true,"id":"notes","label":"@lang.['n3','Notes']","placeholder":"@lang.['blank4','-']","type":"input","value":"@pageContext.initialComments"}],"label":"","id":"notes","type":"section"}],"label":"@lang.['initialEvidence','Initial Evidence']","id":"initialEvidence","type":"collapseSection","transparent":true},{"hidden":"@jslib.isServicesDeliveredHidden","children":[{"id":"servicesDeliveredData","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.finalServicesData"}},"isScrollAble":false,"tableWidth":"70rem","searchAllowed":true,"searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['vtr','View Task Results']","icon":"@iconlib.ActionsVisibleGrey","tooltip":"@lang.['v1','View']","actionOnClick":["@actions.openServicesDeliveredNSP"],"type":"buttonIcon"}]},"gridRefreshId":"servicesDeliveredDataGrid","emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"tableHeader":[{"name":"@lang.['co3','Completed On']","options":{"flex":1.4,"type":"datetime","showLabel":true},"key":"completedOn"},{"name":"@lang.['s21','Service']","options":{"flex":1.4,"showLabel":true},"key":"serviceType"},{"name":"@lang.['action','Action']","options":{"showLabel":true},"key":"serviceModeName"},{"name":"@lang.['ua1','Updated Asset']","options":{"flex":1.8,"showLabel":true},"key":"assetName"},{"name":"@lang.['cb1','Captured By']","options":{"flex":1.2,"showLabel":true},"key":"capturedBy"}],"dataSourceId":"query/read","jslib":{},"header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['sd12','Services Delivered']"},"isSelectable":false,"actions":[{"name":"openServicesDeliveredNSP","type":"openPanel","pageId":"KBFLEOEEL2"}],"searchKeys":["capturedBy","serviceType","assetName","assetNumber"]}}],"label":"@lang.['navS3','Services']","id":"servicesDelivered","type":"collapseSection","transparent":true}],"label":"@lang.['taskProgress','Task Progress']","type":"tab"},{"hidden":"@jslib.isPriceListItemHidden","children":[{"children":[{"label":"","id":"priceListItemsGridData","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":true,"tableWidth":"80rem","searchEmptyScreen":{"image":"@iconlib.ActionsSearchError","contentValue":"@lang.['sysrcue','SORRY! YOUR SEARCH RESULTS CAME UP EMPTY ']","type":"noData"},"rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['v1','View']","tooltip":"@lang.['v1','View']","icon":"@iconlib.ActionsVisibleGrey","actionOnClick":["@actions.openPriceListItemDetailsNSP"],"type":"buttonIcon"}]},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['m','Manufacturer']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"manufacturerName"},{"name":"@lang.['mn','Model Name']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"modelName"},{"name":"@lang.['mn1','Model Number']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"modelNumber"},{"name":"@lang.['t5','Type']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"catalogType"},{"name":"@lang.['quantityUsed','Quantity Used']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"actualQty"},{"name":"@lang.['eq1','Estimated Quantity']","options":{"sortOrder":"ASC","sortable":true,"showLabel":true},"key":"estimatedQty"}],"dataToBeSent":{"apiResponseParams":["count"],"processId":"X6AMXTO0IH","apiResponseFormat":true,"contextVar":{"statusFilter":"@pageContext.statusId","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"},"apiResponseObject":"workOrderTaskIventoryData"},"dataSourceId":"process/start","sourceType":"api","header":{"filterAllowed":true,"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['pam','Parts and Materials']"},"isSelectable":false,"updateAllowed":true,"actions":[{"name":"openPriceListItemDetailsNSP","type":"openPanel","pageId":"J0JIXTOPCX"}],"searchKeys":["modelName"]}}],"id":"priceListItemsSection","label":"","type":"section","transparent":true}],"label":"@lang.['pr1','Part Requirements']","type":"tab"},{"hidden":"@jslib.isIncidentReportHidden","children":[{"children":[{"id":"incidentReports","type":"dataGrid","jsonDef":{"isScrollAble":true,"searchAllowed":false,"tableWidth":"70rem","rowActions":{"children":[{"activeIcon":"@iconlib.ActionsVisiblePurple","name":"@lang.['t1','taskView']","icon":"@iconlib.ActionsVisibleGrey","tooltip":"@lang.['v1','View']","actionOnClick":["@actions.openIncidentDetailsSidePanel"],"type":"buttonIcon"}]},"emptyScreen":{"image":"@iconlib.ActionsSearchEmpty","contentValue":"@lang.['ylieatm','YOUR LIST IS EMPTY AT THE MOMENT']","type":"noData"},"isSync":true,"tableHeader":[{"name":"@lang.['it','Incident Type']","options":{"flex":1.5,"sortable":false,"showLabel":true},"key":"incidentType","primaryKey":true},{"name":"@lang.['r5','Reason']","options":{"flex":1.5,"sortable":false,"showLabel":true},"key":"travelIncidentReason"},{"name":"@lang.['st9','Submission Time']","options":{"flex":1.5,"sortable":false,"type":"datetime","showLabel":true},"key":"reportIssueCapturedTime"},{"name":"@lang.['action','Action']","options":{"flex":1.5,"sortable":false,"showLabel":true},"key":"reportIssueType"},{"name":"@lang.['dm','Delay (In Minutes)']","options":{"flex":1.5,"sortable":false,"showLabel":true},"key":"taskDelay"}],"dataToBeSent":{"apiResponseParams":["count"],"processId":"workorderTaskIncidentReportWF","apiResponseFormat":true,"contextVar":{"workOrderTaskId":"@pageContext.workOrderTaskId"},"apiResponseObject":"incidentReportsData"},"dataSourceId":"process/start","sourceType":"api","header":{"subHeaderText":"@lang.['r','Records']","headerText":"@lang.['il','Incident Logs']"},"isSelectable":false,"updateAllowed":true,"actions":[{"name":"openIncidentDetailsSidePanel","type":"openPanel","pageId":"UGWILUCH1E"}],"searchKeys":[]}}],"id":"incidentReports","type":"section","transparent":true}],"label":"@lang.['ir1','Incident Reports']","type":"tab"}],"id":"taskProgressTab","type":"tab"}]},"actions":[{"endPoint":"event/start","name":"fireProcessEventForTaskSchedulingAndAssignFetchData","outputVarMap":{"data":"@pageContext.workOrderTaskInfo"},"type":"api","continueOnError":true,"actionDef":{"data":[{"eventId":"NN3OQ58980","inputVar":{},"apiResponseFormat":true,"contextVar":{"statusId":"@pageContext.status","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId","viewTravelStatus":"@pageContext.viewTravelStatus"}}]}},{"name":"fetchCrewLeadUserId","outputVarMap":{"data":"@pageContext.crewData"},"type":"query","actionDef":{"filter":"{$crew.id} = {@crewId}","models":["crew"],"inputs":{"crewId":"@pageContext.workOrderTaskAssignedToCrewId"},"columns":{"crewLeadUserId":"crew.leadUserId","crewStatusId":"crew.statusId"}}},{"name":"setWorkOrderTaskDueDate","type":"script","actionDef":"function (pageContext) { if(Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown.length > 0){ pageContext.workOrderTaskDueDate = pageContext.taskScheduleMultipleBreakdown[pageContext.taskScheduleMultipleBreakdown.length - 1].endDate }}"},{"endPoint":"event/start","name":"fireProcessEventUpsertTask","outputVarMap":{"data":"@pageContext.workFlowData"},"type":"api","actionDef":{"data":[{"eventId":"BM58GU7UNT","contextVar":{"workOrderTask":{"assignedToUserId":"@pageContext.workOrderTaskAssignedToUserId","notes":"@pageContext.workOrderTaskNotes","statusId":"@pageContext.workOrderTaskStatusId","acInternalNotes":"@pageContext.workOrderTaskAcInternalNotes","dueDate":"@pageContext.workOrderTaskDueDate","scheduledDate":"@pageContext.workOrderTaskScheduledDate","id":"@pageContext.workOrderTaskId","eventType":"@pageContext.eventType","assignedToCrewId":"@pageContext.workOrderTaskAssignedToCrewId","estimatedDuration":"@pageContext.workOrderTaskEstimatedDurationMinutes"},"taskScheduleBreakdown":"@pageContext.taskScheduleMultipleBreakdown","subAction":"@pageContext.subAction","workOrderTaskAction":"@pageContext.workOrderTaskAction","operation":"upsert","customerPortalOrderDetails":"@pageContext.customerPortalOrderDetails"}}]}},{"name":"setWorkOrderTaskData","type":"script","actionDef":"function(pageContext) {if (Array.isArray(pageContext.workOrderTaskInfo) && pageContext.workOrderTaskInfo.length > 0 && Array.isArray(pageContext.workOrderTaskInfo[0].data) && pageContext.workOrderTaskInfo[0].data.length > 0) { for (var i = 0; i < pageContext.workOrderTaskInfo[0].data.length; i++) { if (typeof pageContext.workOrderTaskInfo[0].data[i].workOrderTaskData !== 'undefined' && pageContext.workOrderTaskInfo[0].data[i].workOrderTaskData !== '') { pageContext.workOrderTaskData = pageContext.workOrderTaskInfo[0].data[i].workOrderTaskData; } if (typeof pageContext.workOrderTaskInfo[0].data[i].taskScheduleBreakdown !== 'undefined' && pageContext.workOrderTaskInfo[0].data[i].taskScheduleBreakdown !== '') { pageContext.workOrderTaskScheduleBreakdown = pageContext.workOrderTaskInfo[0].data[i].taskScheduleBreakdown; } if (typeof pageContext.workOrderTaskInfo[0].data[i].taskDependencyData !== 'undefined' && pageContext.workOrderTaskInfo[0].data[i].taskDependencyData !== '') { pageContext.taskDependencyData = pageContext.workOrderTaskInfo[0].data[i].taskDependencyData; } } pageContext.statusName = pageContext.workOrderTaskData.statusName; pageContext.workOrderTaskReOpenCount = pageContext.workOrderTaskData.workOrderTaskReOpenCount; pageContext.statusNameColor = pageContext.workOrderTaskData.statusNameColor; pageContext.workOrderTaskResult = pageContext.workOrderTaskData.workOrderTaskResult; pageContext.workOrderCalendarId = pageContext.workOrderTaskData.workOrderCalendarId; if (pageContext.action !== 'calendarOpenTask' && pageContext.action !== 'addedInventoryRequest') { pageContext.workOrderTaskAssignedToUserId = pageContext.workOrderTaskData.workOrderTaskAssignedToUserId; pageContext.userName = pageContext.workOrderTaskData.userName; pageContext.workOrderTaskScheduledDate = pageContext.workOrderTaskData.workOrderTaskScheduledDate; } pageContext.workOrderTaskId = pageContext.workOrderTaskData.workOrderTaskId; pageContext.workOrderTaskAppointmentBasedFlag = pageContext.workOrderTaskData.workOrderTaskAppointmentBasedFlag; pageContext.workOrderTaskLongDurationFlag = pageContext.workOrderTaskData.workOrderTaskLongDurationFlag; pageContext.workOrderTaskAppointmentWindowId = pageContext.workOrderTaskData.workOrderTaskAppointmentWindowId; pageContext.workOrderTaskAppointmentWindowStartDate = pageContext.workOrderTaskData.workOrderTaskAppointmentWindowStartDate; pageContext.workOrderTaskAppointmentWindowEndDate = pageContext.workOrderTaskData.workOrderTaskAppointmentWindowEndDate; pageContext.workOrderTaskAppointmentWindow = pageContext.workOrderTaskData.workOrderTaskAppointmentWindow; pageContext.incidentDetails = (pageContext.workOrderTaskData.incidentDetails) ? pageContext.workOrderTaskData.incidentDetails : ''; pageContext.workOrderTaskEstimatedDurationMinutes = pageContext.workOrderTaskData.workOrderTaskEstimatedDurationMinutes; pageContext.workOrderTaskEstimatedDuration = pageContext.workOrderTaskData.workOrderTaskEstimatedDuration; pageContext.workOrderTaskWorkOrderId = pageContext.workOrderTaskData.workOrderTaskWorkOrderId; pageContext.workOrderTaskService = pageContext.workOrderTaskData.workOrderTaskService; pageContext.workOrderDeadline = (pageContext.workOrderTaskData.workOrderDeadline) ? pageContext.workOrderTaskData.workOrderDeadline : '-'; pageContext.taskTypeCrewTask = pageContext.workOrderTaskData.taskTypeCrewTask; pageContext.workOrderTaskAssignedToCrewId = pageContext.workOrderTaskData.workOrderTaskAssignedToCrewId; pageContext.crewName = pageContext.workOrderTaskData.crewName; pageContext.currentDate = new Date().toISOString().replace('T', ' ').replace('Z', ''); if ((pageContext.status !== 'workOrderTaskScheduled' && pageContext.status !== 'workOrderTaskOpen' && pageContext.status !== 'workOrderTaskReopened') || pageContext.action === 'view') { pageContext.currentDate = pageContext.workOrderTaskScheduledDate; } if (pageContext.taskTypeCrewTask && pageContext.workOrderTaskAssignedToCrewId) { pageContext.selectDropdown = []; pageContext.assigneeName = pageContext.crewName; pageContext.initialAssignee = (pageContext.action !== 'calendarOpenTask') ? pageContext.workOrderTaskAssignedToCrewId : ''; pageContext.crewLeadUserId = pageContext.workOrderTaskData.crewLeadUserId; pageContext.crewPhoneNumber = pageContext.workOrderTaskData.userPhoneNumber; pageContext.crewStatusId = pageContext.workOrderTaskData.crewStatusId; pageContext.selectDropdown.push({ 'value': pageContext.workOrderTaskAssignedToCrewId, 'label': pageContext.crewName }) } else if (typeof pageContext.userName !== 'undefined') { pageContext.selectDropdown = []; pageContext.assigneeName = pageContext.userName; pageContext.initialAssignee = (pageContext.action !== 'calendarOpenTask') ? pageContext.workOrderTaskAssignedToUserId : ''; pageContext.selectDropdown.push({ 'value': pageContext.workOrderTaskAssignedToUserId, 'label': pageContext.userName }) }; pageContext.initialWorkOrderTaskEstimatedDurationMinutes = pageContext.workOrderTaskEstimatedDurationMinutes; pageContext.initialworkOrderTaskEstimatedDuration = pageContext.workOrderTaskEstimatedDuration; pageContext.initialWorkOrderTaskScheduledDate = pageContext.workOrderTaskScheduledDate; pageContext.initialBookingStatus = pageContext.bookingStatus; } if ((pageContext.action == 'openTask' || pageContext.action == 'dispatch' || pageContext.action == 'view' || pageContext.workOrderTaskAction == 'view' || pageContext.logsAction === 'dispatchFailed') && pageContext.workOrderTaskNNSP != 'edit' && Array.isArray(pageContext.workOrderTaskScheduleBreakdown)) { pageContext.taskScheduleMultipleBreakdown = Array.from(pageContext.workOrderTaskScheduleBreakdown); pageContext.initialWorkOrderTaskScheduleBreakdown = Array.from(pageContext.taskScheduleMultipleBreakdown); } let totalDuration = 0; if (Array.isArray(pageContext.taskScheduleMultipleBreakdown)) { totalDuration = ((pageContext.taskScheduleMultipleBreakdown.reduce((total, element) => { return total + element.duration; }, 0)) / 60); } else { totalDuration = pageContext.workOrderTaskEstimatedDuration; } pageContext.workOrderTaskTotalDuration = (totalDuration % 1 === 0) ? totalDuration.toFixed(0) : totalDuration.toFixed(2); pageContext.timezoneOffset = new Date().getTimezoneOffset();}"},{"async":true,"name":"setOtherWorkOrderTaskData","type":"script","actionDef":"function(pageContext) { if (typeof pageContext.workOrderTaskData.overrideReason !== 'undefined' && typeof pageContext.workOrderTaskData.overrideReason.reason !== 'undefined' && pageContext.workOrderTaskData.overrideReason.reason !== '') { pageContext.workOrderTaskOverrideReason = pageContext.workOrderTaskData.overrideReason.reason; pageContext.workOrderTaskOverrideComment = pageContext.workOrderTaskData.overrideReason.comment; } pageContext.workOrderTaskDueDate = pageContext.workOrderTaskData.workOrderTaskDueDate; pageContext.initialWorkOrderTaskDueDate = pageContext.workOrderTaskDueDate; if (typeof pageContext.workOrderTaskDueDate !== 'undefined' && pageContext.workOrderTaskDueDate !== '') { pageContext.scheduledEndDate = pageContext.workOrderTaskDueDate; pageContext.workOrderTaskDate = pageContext.scheduledEndDate; } pageContext.taskTypeName = pageContext.workOrderTaskData.taskTypeName; pageContext.workOrderTaskServicesArray = pageContext.workOrderTaskData.workOrderTaskServicesArray; pageContext.siteName = pageContext.workOrderTaskData.siteName; pageContext.siteId = pageContext.workOrderTaskData.siteId; pageContext.regionName = pageContext.workOrderTaskData.regionName; pageContext.workOrderTaskNotes = (pageContext.action === 'view' && !pageContext.workOrderTaskData.workOrderTaskNotes) ? '-' : pageContext.workOrderTaskData.workOrderTaskNotes; pageContext.workOrderTaskAcInternalNotes = (pageContext.action === 'view' && !pageContext.workOrderTaskData.workOrderTaskAcInternalNotes) ? '-' : pageContext.workOrderTaskData.workOrderTaskAcInternalNotes; pageContext.selectedCatalog = pageContext.workOrderTaskData.selectedCatalog; pageContext.initialWorkOrderTaskNotes = pageContext.workOrderTaskNotes; pageContext.customerCompanyName = pageContext.workOrderTaskData.customerCompanyName; pageContext.customerContactPerson = pageContext.workOrderTaskData.customerContactPerson; pageContext.customerContactTitle = pageContext.workOrderTaskData.customerContactTitle; pageContext.customerContactPhone = pageContext.workOrderTaskData.customerContactPhone; pageContext.customerContactEmail = pageContext.workOrderTaskData.customerContactEmail; pageContext.initialcustomerContactPerson = pageContext.workOrderTaskData.customerContactPerson; pageContext.initialcustomerContactPhone = pageContext.workOrderTaskData.customerContactPhone; pageContext.initialcustomerContactEmail = pageContext.workOrderTaskData.customerContactEmail; pageContext.reportType = pageContext.workOrderTaskData.anowReportType; pageContext.lenderName = pageContext.workOrderTaskData.lenderName; pageContext.loanType = pageContext.workOrderTaskData.anowLoanType; pageContext.primaryApprasier = pageContext.workOrderTaskData.primaryAppraiser; pageContext.contractValue = pageContext.workOrderTaskData.anowContractValue; pageContext.tags = pageContext.workOrderTaskData.anowTags; pageContext.gla = pageContext.workOrderTaskData.anowGLA; pageContext.complex = pageContext.workOrderTaskData.anowComplex; pageContext.rural = pageContext.workOrderTaskData.anowRural; pageContext.historical = pageContext.workOrderTaskData.anowHistorical; pageContext.workOrderTypeName = pageContext.workOrderTaskData.workOrderTypeName; pageContext.ZPriorityName = pageContext.workOrderTaskData.ZPriorityName; pageContext.latitude = pageContext.workOrderTaskData.siteLatitude; pageContext.longitude = pageContext.workOrderTaskData.siteLongitude; pageContext.siteAddress = pageContext.workOrderTaskData.siteAddress; pageContext.siteTimeZone = pageContext.workOrderTaskData.siteTimeZone; pageContext.userEmail = pageContext.workOrderTaskData.userEmail; if (typeof pageContext.workOrderTaskData.userPhoneNumber === 'undefined' || pageContext.workOrderTaskData.userPhoneNumber === '') { pageContext.userPhoneNumber = '-'; } else { pageContext.userPhoneNumber = pageContext.workOrderTaskData.userPhoneNumber; } }"},{"async":true,"name":"setTravelDetails","type":"script","actionDef":"function (pageContext) { for (var i = 0; i < pageContext.workOrderTaskInfo[0].data.length; i++) { if (pageContext.workOrderTaskInfo[0].data[i].originAddress != undefined && pageContext.workOrderTaskInfo[0].data[i].originAddress != '') { pageContext.startTravelAt = pageContext.workOrderTaskInfo[0].data[i].taskData[0].workOrderTaskStartDate; pageContext.estimatedArrivalTime = (pageContext.workOrderTaskInfo[0].data[i].duration) ? pageContext.workOrderTaskInfo[0].data[i].duration : '-'; pageContext.startAddress = pageContext.workOrderTaskInfo[0].data[i].originAddress; pageContext.customerSite = pageContext.workOrderTaskInfo[0].data[i].taskData[0].siteName; pageContext.endAddress = pageContext.workOrderTaskInfo[0].data[i].destinationAddress; pageContext.actualStartTime = pageContext.workOrderTaskInfo[0].data[i].taskData[0].workOrderTaskActualStartTime; pageContext.transportMode = pageContext.workOrderTaskInfo[0].data[i].taskData[0].workOrderTaskTravelDetails[0].transportMode; if (pageContext.transportMode == undefined || pageContext.transportMode == '') { pageContext.transportMode = '@lang.[\"d20\",\"Driving\"]'; }; if (pageContext.transportMode != undefined && pageContext.transportMode == '{%b1}') { pageContext.transportMode = '@lang.[\"b1\",\"Bicycling\"]'; }; if (pageContext.transportMode != undefined && pageContext.transportMode == '{%d20}') { pageContext.transportMode = '@lang.[\"d20\",\"Driving\"]'; }; if (pageContext.transportMode != undefined && pageContext.transportMode == '{%w4}') { pageContext.transportMode = '@lang.[\"w4\",\"Walking\"]'; }; } } }"},{"async":true,"name":"setPreviousAssingeesData","type":"script","actionDef":"function (pageContext) { if (Array.isArray(pageContext.workOrderTaskInfo) && pageContext.workOrderTaskInfo.length > 0 && Array.isArray(pageContext.workOrderTaskInfo[0].data) && pageContext.workOrderTaskInfo[0].data.length > 0) { for (var i = 0; i < pageContext.workOrderTaskInfo[0].data.length; i++) { if (typeof pageContext.workOrderTaskInfo[0].data[i].previousAssignees !== 'undefined' && pageContext.workOrderTaskInfo[0].data[i].previousAssignees.length > 0) { pageContext.previousAssignees = pageContext.workOrderTaskInfo[0].data[i].previousAssignees; } } } }"},{"name":"setBookingStatus","type":"script","actionDef":"function(pageContext){if (typeof pageContext.bookingStatus != 'undefined' && pageContext.bookingStatus != '' && (pageContext.bookingStatus == 'fscx2_0_userBookingConfirmed' || pageContext.bookingStatus == 'Confirmed')) { pageContext.bookingStatus = 'Confirmed'; } else if (typeof pageContext.bookingStatus != 'undefined' && pageContext.bookingStatus != '' && (pageContext.bookingStatus == 'fscx2_0_userBookingUnconfirmed' || pageContext.bookingStatus == 'Unconfirmed')) { pageContext.bookingStatus = 'Unconfirmed'; } if (pageContext.isCustomerPortalOrderDetailsModelPresent) { pageContext.bookingStatuses = []; if (typeof pageContext.bookingStatus != 'undefined' && pageContext.bookingStatus == 'Confirmed') { pageContext.bookingStatuses.push({ 'label': 'Confirmed', 'value': 'fscx2_0_userBookingConfirmed' }, { 'label': 'Unconfirmed', 'value': 'fscx2_0_userBookingUnconfirmed' }); } else if (typeof pageContext.bookingStatus != 'undefined' && pageContext.bookingStatus == 'Unconfirmed') { pageContext.bookingStatuses.push({ 'label': 'Unconfirmed', 'value': 'fscx2_0_userBookingUnconfirmed' }, { 'label': 'Confirmed', 'value': 'fscx2_0_userBookingConfirmed' }); } }}"},{"name":"setAssignee","type":"script","actionDef":"function (pageContext) { if (pageContext.taskTypeCrewTask) { if (pageContext.selectDropdown[0] !== null) { pageContext.workOrderTaskAssignedToCrewId = pageContext.selectDropdown[0].value; } else { pageContext.workOrderTaskAssignedToCrewId = '' } } else { if (pageContext.selectDropdown[0] !== null) { pageContext.workOrderTaskAssignedToUserId = pageContext.selectDropdown[0].value; } else { pageContext.workOrderTaskAssignedToUserId = '' } }}"},{"name":"setCrewLeadId","type":"script","actionDef":"function (pageContext) { if(Array.isArray(pageContext.crewData) && pageContext.crewData.length > 0){ pageContext.workOrderTaskAssignedToUserId = pageContext.crewData[0].crewLeadUserId; pageContext.crewStatusId  = pageContext.crewData[0].crewStatusId;} }"},{"name":"refreshDataGrid","type":"refreshDataGrid"},{"name":"enableDataGrid","type":"script","actionDef":"function(pageContext){pageContext.enable=true;}"},{"name":"clearPageContext","type":"clearPageContext"},{"name":"goToPreviousPanel","type":"backPanel"},{"name":"closePanel","type":"closePanel"},{"subTitle":"@lang.['twbrfaatlatswbcbts1','~Task will be removed from Appraiser / Analyst task list and task status will be changed back to Scheduled.~']","name":"recallTaskModal","options":[{"buttonType":"secondary","name":"no","actionOnClick":"@actions.closeModal","type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.setWorkOrderTaskStatusAndEventTypeForRecall","@actions.fireProcessEventUpsertTask","@actions.closeModal","@actions.closePanel","@actions.clearPageContext","@actions.refreshDataGrid"],"type":"button","title":"@lang.['rt3','Recall Task']"}],"type":"openModal","title":"@lang.['rt3','Recall Task']"},{"subTitle":"@lang.['aysywtctt','Are you sure you want to cancel this task?']","name":"cancelTaskModal","options":[{"buttonType":"secondary","name":"no","actionOnClick":"@actions.closeModal","type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.openCancelTaskNestedSidePanel","@actions.closeModal"],"type":"button","title":"@lang.['yp','Yes, Proceed']"}],"type":"openModal","title":"@lang.['ct4','Cancel Task']"},{"name":"openCancelTaskNestedSidePanel","type":"openPanel","pageId":"1RFSG2AF8J"},{"name":"removeAssignee","type":"script","actionDef":"function (pageContext) { if (pageContext.taskTypeCrewTask && pageContext.workOrderTaskAssignedToCrewId === '' && pageContext.workOrderTaskAssignedToUserId !== '') {pageContext.workOrderTaskAssignedToUserId = ''; } }"},{"name":"setWorkOrderTaskStatusAndEventTypeForSave","type":"script","actionDef":"function (pageContext) {if (pageContext.status === 'workOrderTaskOpen' || pageContext.status === 'workOrderTaskReopened') { if ((typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '') && (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '')) { pageContext.workOrderTaskStatusId = 'workOrderTaskScheduled'; pageContext.eventType = 'workOrderTaskScheduled'; } else if (typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '' && (typeof pageContext.workOrderTaskScheduledDate === 'undefined' || pageContext.workOrderTaskScheduledDate === '') && pageContext.workOrderTaskAssignedToUserId !== pageContext.initialAssignee) { pageContext.workOrderTaskStatusId = pageContext.status; pageContext.eventType = 'workOrderTaskAssigned'; } else { pageContext.workOrderTaskStatusId = pageContext.status; pageContext.eventType = 'workOrderTaskUpdated'; } } else if (pageContext.status === 'workOrderTaskScheduled') { if (typeof pageContext.workOrderTaskAssignedToUserId === 'undefined' || pageContext.workOrderTaskAssignedToUserId === '') { pageContext.workOrderTaskStatusId = 'workOrderTaskOpen'; pageContext.eventType = 'workOrderTaskUnassigned'; } else if (pageContext.workOrderTaskAssignedToUserId !== pageContext.initialAssignee) { pageContext.workOrderTaskStatusId = pageContext.status; pageContext.eventType = 'workOrderTaskAssigned'; } else { pageContext.workOrderTaskStatusId = pageContext.status; pageContext.eventType = 'workOrderTaskUpdated'; } } else { pageContext.workOrderTaskStatusId = pageContext.status; pageContext.eventType = 'workOrderTaskUpdated'; } pageContext.subAction = 'upsertWorkOrderTask';}"},{"name":"setWorkOrderTaskStatusAndEventTypeForRecall","type":"script","actionDef":"function (pageContext) { pageContext.workOrderTaskStatusId = 'workOrderTaskScheduled'; pageContext.eventType = 'workOrderTaskRecalled'; pageContext.subAction = 'upsertWorkOrderTask'; }"},{"name":"setWorkOrderTaskStatusAndEventTypeForDispatch","type":"script","actionDef":"function (pageContext) { pageContext.workOrderTaskStatusId = 'workOrderTaskDispatched'; pageContext.eventType = 'workOrderTaskDispatched'; pageContext.subAction = 'upsertWorkOrderTask'; }"},{"name":"closeModal","type":"closeModal"},{"name":"openNestedSidePanel","type":"openPanel","pageId":"CTHWJO8VBO"},{"name":"clearBannerType","type":"script","actionDef":"function(pageContext){pageContext.bannerType='';}"},{"falseStep":["@actions.fireProcessEventUpsertTask","@actions.closePanel","@actions.clearPageContext","@actions.refreshDataGrid"],"trueStep":["@actions.openModalOverrideDependency"],"name":"taskDependencyDecision","type":"decision","actionDef":"function (pageContext) { return (pageContext.dependencyCheck && pageContext.workOrderTaskStatusId === 'workOrderTaskDispatched');}"},{"subTitle":"@lang.['tthapddywtotdadtt','This task has a pending dependency. Do you want to override the dependency and dispatch this task?']","name":"openModalOverrideDependency","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.setDependencyOverrideSourceDispatch","@actions.openOverrideNSP"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['dt3','Dispatch Task']"},{"name":"openOverrideNSP","type":"openPanel","pageId":"7EXQWZDPS8"},{"name":"setDependencyOverrideSourceDispatch","type":"script","actionDef":"function(pageContext){pageContext.dependencyOverrideSource = 'dispatch';}"},{"endPoint":"process/start","name":"fetchTaskProgressDataByDate","outputVarMap":{"data":"@pageContext.taskProgressDataByDate"},"type":"api","actionDef":{"data":[{"inputVar":{},"processId":"taskSchedulingDispatchedViewTaskProgressByDateWF","apiResponseFormat":true,"contextVar":{"userLocale":"@pageContext.userLocale","workOrderTaskId":"@pageContext.workOrderTaskId","timeZone":"@pageContext.timeZone"}}]}},{"endPoint":"process/start","name":"fetchTaskProgressDataByServices","outputVarMap":{"data":"@pageContext.taskProgressDataByServices"},"type":"api","actionDef":{"data":[{"inputVar":{},"processId":"taskSchedulingDispatchedViewTaskProgressByServicesWF","apiResponseFormat":true,"contextVar":{"userLocale":"@pageContext.userLocale","workOrderTaskId":"@pageContext.workOrderTaskId","timeZone":"@pageContext.timeZone"}}]}},{"name":"openWorkOrderTaskTimeSlotNNSP","type":"openPanel","pageId":"5JNK1AE1DY"},{"subTitle":"@lang.['tthapddywtotdadtt','This task has a pending dependency. Do you want to override the dependency and dispatch this task?']","name":"openModalOverrideDependency","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.setDependencyOverrideSourceDispatch","@actions.openOverrideNSP"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['dt3','Dispatch Task']"},{"name":"openOverrideNSP","type":"openPanel","pageId":"7EXQWZDPS8"},{"name":"setDependencyOverrideSourceDispatch","type":"script","actionDef":"function(pageContext){pageContext.dependencyOverrideSource = 'dispatch';}"},{"async":true,"name":"clearScheduledEndDate","type":"script","actionDef":"function(pageContext) { function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; }; let minScheduleEndDate = ''; if (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '' && pageContext.workOrderTaskScheduledDate !== pageContext.initialWorkOrderTaskScheduledDate) { minScheduleEndDate = toDateString(new Date(pageContext.workOrderTaskScheduledDate)); minScheduleEndDate = toDateString(new Date(new Date(minScheduleEndDate).getTime() + 60 * 60 * 24 * 1000)); if (new Date(minScheduleEndDate).getTime() > new Date(pageContext.scheduledEndDate).getTime()) { pageContext.scheduledEndDate = ''; pageContext.workOrderTaskDueDate = ''; pageContext.workOrderTaskEstimatedDuration = ''; pageContext.workOrderTaskEstimatedDurationMinutes = ''; } } }"},{"falseStep":[],"trueStep":["@actions.decisionActionCheckLongDurationTask"],"name":"decisionForCalendarLongDurationTask","type":"decision","actionDef":"function(pageContext) { return (typeof pageContext.action !== 'undefined' && pageContext.action !== '' && pageContext.action === 'calendarOpenTask'); }"},{"falseStep":[],"trueStep":["@actions.fetchTaskScheduleBreakdownData","@actions.processLongDurationTaskScheduleBreakdownData","@actions.bannerShowOrHide"],"name":"decisionActionCheckLongDurationTask","type":"decision","actionDef":"function(pageContext) { return (((typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '') || (typeof pageContext.workOrderTaskDueDate !== 'undefined' && pageContext.workOrderTaskDueDate !== '')) && pageContext.workOrderTaskLongDurationFlag) }"},{"endPoint":"process/start","name":"fetchTaskScheduleBreakdownData","outputVarMap":{"data":"@pageContext.responseData"},"type":"api","actionDef":{"data":[{"processId":"workOrderTaskScheduleBreakdownWF","contextVar":{"scheduledEndDate":"@pageContext.scheduledEndDate","workOrderscheduleMethodId":"addTimeSlotsForLongDurationTask","taskScheduleBreakdown":"@pageContext.taskScheduleMultipleBreakdown","calendarId":"@pageContext.workOrderCalendarId","timezoneOffset":"@pageContext.timezoneOffset","scheduleOnPublicHolidays":false,"scheduleOnDaysOff":false,"scheduledStartDate":"@pageContext.workOrderTaskScheduledDate"}}]}},{"name":"processLongDurationTaskScheduleBreakdownData","type":"script","actionDef":"function(pageContext) { function nullCheck(a) { try { a = eval(a); return (typeof a !== 'undefined' && a !== ''); } catch (e) { return false; } } pageContext.enable = true; pageContext.bannerType = pageContext.responseData[0].outputVar.bannerType; if (typeof pageContext.bannerType === 'undefined' || pageContext.bannerType === '') { pageContext.taskScheduleMultipleBreakdown = pageContext.responseData[0].outputVar.taskScheduleBreakdown; } else { pageContext.taskScheduleMultipleBreakdown = []; } if (Array.isArray(pageContext.taskScheduleMultipleBreakdown) && pageContext.taskScheduleMultipleBreakdown !== [] && pageContext.taskScheduleMultipleBreakdown.length > 0) pageContext.taskScheduleMultipleBreakdown.forEach(breakEle => { breakEle.startDate = new Date(breakEle.startDate).toISOString().replace('T', ' ').replace('Z', ''); breakEle.endDate = new Date(breakEle.endDate).toISOString().replace('T', ' ').replace('Z', ''); }); pageContext.workOrderTaskEstimatedDuration = nullCheck(pageContext.responseData[0].outputVar.workOrderTaskEstimatedDuration) ? pageContext.responseData[0].outputVar.workOrderTaskEstimatedDuration : ''; pageContext.workOrderTaskEstimatedDurationMinutes = nullCheck(pageContext.workOrderTaskEstimatedDuration) ? (Number(pageContext.workOrderTaskEstimatedDuration) * 60) : ''; pageContext.workOrderTaskTotalDuration = nullCheck(pageContext.workOrderTaskEstimatedDuration) ? Number(pageContext.workOrderTaskEstimatedDuration) : ''; pageContext.workOrderTaskDueDate = pageContext.scheduledEndDate; pageContext.workOrderTaskDate = pageContext.scheduledEndDate; }"},{"name":"bannerShowOrHide","type":"script","actionDef":"function(pageContext) { if (pageContext.workOrderTaskLongDurationFlag) { if (pageContext.bannerType === 'timeSlotsInPHandFallsOutsideSW') { bannerData('show', '@lang.[\"oomtsasoaphafootswftcs\",\"One or more time slots are scheduled on a public holiday and fall outside of the service window for this customer site.\"]'); } else if (pageContext.bannerType === 'timeSlotsInPH') { bannerData('show', '@lang.[\"oomtsasoaph\",\"One or more time slots are scheduled on a public holiday.\"]'); } else if (pageContext.bannerType === 'timeSlotsFallsOutsideSW') { bannerData('show', '@lang.[\"oomtsasotswftcs\",\"One or more time slots are scheduled outside the service window for this customer site.\"]'); } else if (pageContext.bannerType === 'startDateUnderDOOrPH') { bannerData('show', '@lang.[\"tsdycioadooph\",\"The start date you chose is on a day off or public holiday. Please adjust the start date or switch off the toggle to proceed.\"]'); } else if (pageContext.bannerType === 'startDailyAtLessThanStartTime') { bannerData('show', '@lang.[\"tstotftshappatsdottp\",\"The start time of the first time slot has already passed. Please adjust the start date or time to proceed.\"]'); } else if (pageContext.bannerType === 'timeSlotsOutsideSW') { bannerData('show', '@lang.[\"saedcbooswh\",\"Start and End Dates cannot be outside of Service Window hours.\"]'); } else { bannerData('hide', ''); } } function bannerData(banner, bannerText) { pageContext.banner = banner; pageContext.bannerText = bannerText; } }"},{"async":true,"name":"processWorkOrderTaskEstimatedDurationMinutes","type":"script","actionDef":"function(pageContext) { if (pageContext.workOrderTaskLongDurationFlag === true && typeof pageContext.scheduledEndDate !== 'undefined' && pageContext.scheduledEndDate !== '' && typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '') { pageContext.workOrderTaskDueDate = pageContext.scheduledEndDate; pageContext.workOrderTaskDate = pageContext.scheduledEndDate; function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; }; pageContext.workOrderTaskEstimatedDurationMinutes = Number(new Date(toDateString(new Date(pageContext.workOrderTaskDueDate))).getTime() - new Date(toDateString(new Date(pageContext.workOrderTaskScheduledDate))).getTime()) / 60000; pageContext.workOrderTaskEstimatedDuration = Number(pageContext.workOrderTaskEstimatedDurationMinutes) / 60; } else { pageContext.workOrderTaskEstimatedDurationMinutes = (Number(pageContext.workOrderTaskEstimatedDuration) * 60); } pageContext.workOrderTaskTotalDuration = pageContext.workOrderTaskEstimatedDuration; }"},{"name":"clearGridData","type":"script","actionDef":"function (pageContext) { pageContext.workOrderTaskScheduledDate = pageContext.taskScheduleMultipleBreakdown[0].startDate; pageContext.workOrderTaskEstimatedDuration = pageContext.taskScheduleMultipleBreakdown[0].durationInHours; pageContext.workOrderTaskTotalDuration = pageContext.workOrderTaskEstimatedDuration; pageContext.taskScheduleMultipleBreakdown = ''; }"},{"endPoint":"process/start","name":"fetchTaskDependencyCheck","outputVarMap":{"data":"@pageContext.dependencyCheckData"},"type":"api","actionDef":{"data":[{"inputVar":{},"processId":"taskSchedulingTaskDependencyCheckWF","contextVar":{"dependentTaskStatusId":"@pageContext.workOrderTaskStatusId","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"}}]}},{"name":"setDependencyCheck","type":"script","actionDef":"function (pageContext) {if(typeof pageContext.dependencyCheckData !== 'undefined' && pageContext.dependencyCheckData !== '') {pageContext.dependencyCheck = pageContext.dependencyCheckData[0].outputVar.dependencyCheck;} }"},{"name":"addAdditionalSingledayTask","type":"script","actionDef":"function(pageContext) { pageContext.workOrderTaskEstimatedDurationMinutes = (Number(pageContext.workOrderTaskEstimatedDuration) * 60); if (!pageContext.workOrderTaskLongDurationFlag && typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '' && pageContext.workOrderTaskEstimatedDuration !== '' && Number(pageContext.workOrderTaskEstimatedDuration) > 0 && Number(pageContext.workOrderTaskEstimatedDuration) <= 24 && (typeof pageContext.taskScheduleMultipleBreakdown === 'undefined' || pageContext.taskScheduleMultipleBreakdown === '' || pageContext.taskScheduleMultipleBreakdown.length <= 1)) { pageContext.workOrderTaskDate = toDateString(new Date(new Date(pageContext.workOrderTaskScheduledDate).getTime() + (Number(pageContext.workOrderTaskEstimatedDurationMinutes) * 60000))); pageContext.taskScheduleMultipleBreakdown = []; pageContext.taskScheduleMultipleBreakdown.push({ 'duration': pageContext.workOrderTaskEstimatedDurationMinutes, 'durationInHours': pageContext.workOrderTaskEstimatedDuration, 'endDate': pageContext.workOrderTaskDate, 'startDate': pageContext.workOrderTaskScheduledDate }); } function toDateString(date) { var dateString = ''; function pad(number) { if (number < 10) { return '0' + number; } return number; } if (date instanceof Date) { dateString = date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + ' ' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5); } return dateString; } }"},{"name":"refreshScheduleBreakdownGrid","gridId":["scheduleBreakdownGrid"],"type":"RefreshGridOnSidePanel"},{"name":"setTimeZoneAndLocale","type":"script","actionDef":"function (pageContext) { pageContext.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone; pageContext.userLocale = sessionStorage.getItem('locale'); }"},{"name":"taskProgressViewChange","type":"script","actionDef":"function (pageContext) { if (typeof pageContext.taskProgressDropdown !== 'undefined' && pageContext.taskProgressDropdown !== '') { if (pageContext.taskProgressDropdown === 'byDate') { pageContext.selectedFilterForView = 'byDate'; pageContext.showSelectedServicesGrid = false;} if (pageContext.taskProgressDropdown === 'byServices') { pageContext.selectedFilterForView = 'byServices'; pageContext.showInitialEvidenceGrid = false; pageContext.showServicesDeliveredGrid = false;  } } }"},{"falseStep":["@actions.fetchTaskProgressDataByServices"],"trueStep":["@actions.fetchTaskProgressDataByDate"],"name":"decisionActionForTaskProgressFilter","type":"decision","actionDef":"function(pageContext){if( typeof pageContext.taskProgressDropdown !== 'undefined' && pageContext.taskProgressDropdown !='' && pageContext.taskProgressDropdown === 'byDate'){return true;} else {return false;}}"},{"name":"refreshDataGridOnDependency","gridId":["dependenciesDataGrid"],"type":"RefreshGridOnSidePanel"},{"falseStep":["@actions.openNestedSidePanel"],"trueStep":["@actions.openMultipleBreakdownNestedSidePanel"],"name":"isSinglebreakdown","type":"decision","actionDef":"function(pageContext){return (typeof pageContext.workOrderTaskLongDurationFlag !== 'undefined' &&  pageContext.workOrderTaskLongDurationFlag);}"},{"name":"openCrewNestedSidePanel","type":"openPanel","pageId":"U7H8JGEV4R"},{"name":"openMultipleBreakdownNestedSidePanel","type":"openPanel","pageId":"taskSchedulingViewAllTechnicianMultipleTimeSlotNSP"},{"name":"fetchTechnicianOnCrew","outputVarMap":{"data":"@pageContext.techCrewData"},"type":"query","actionDef":{"filter":"((({$crew.startDate} BETWEEN {@startDate} AND {@endDate}) OR ({$crew.endDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$crew.startDate} AND {$crew.endDate}) OR ({@endDate} BETWEEN {$crew.startDate} AND {$crew.endDate})) AND {$workforceCrew.statusId}=\"workforceCrewOnCrew\" AND {$crew.statusId}!=\"crewDeactivated\")AND {$workforceCrew.workforceUserId} ={@workforceUserId}","models":["workforceCrew","crew"],"inputs":{"endDate":"@pageContext.workOrderTaskDueDate","workforceUserId":"@pageContext.workOrderTaskAssignedToUserId","startDate":"@pageContext.workOrderTaskScheduledDate"},"columns":{"crewId":"workforceCrew.crewId"},"links":{"workforceCrew":"crew"}}},{"endPoint":"process/start","name":"getWeeklyScheduleData","outputVarMap":{"data":"@pageContext.weeklyScheduleData"},"type":"api","actionDef":{"data":[{"processId":"settingsGeneralCalendarWeeklyScheduleFetchDataWF","contextVar":{"timezoneOffset":"@pageContext.timezoneOffset","id":"@pageContext.workOrderCalendarId"}}]}},{"name":"enableDataGridAndSetWeeklyScheduleData","type":"script","actionDef":"function(pageContext){pageContext.enable=true;pageContext.calendarData=pageContext.weeklyScheduleData[0].outputVar.calendarData;}"},{"name":"setData","type":"script","actionDef":"function (pageContext) { pageContext.isInventoryModelPresent = pageContext.isInventoryModelPresent[0].outputVar.isInventoryModelPresent; pageContext.isCustomerPortalOrderDetailsModelPresent = pageContext.isCustomerPortalOrderDetailsModelPresent[0].outputVar.isCustomerPortalOrderDetailsModelPresent; if (pageContext.isCustomerPortalOrderDetailsModelPresent) { pageContext.bookingStatuses = []; if (typeof pageContext.bookingStatusId != 'undefined' && pageContext.bookingStatusId == 'fscx2_0_userBookingConfirmed') { pageContext.bookingStatuses.push({ 'label': 'Confirmed', 'value': 'fscx2_0_userBookingConfirmed' }, { 'label': 'Unconfirmed', 'value': 'fscx2_0_userBookingUnconfirmed' }); } else if (typeof pageContext.bookingStatusId != 'undefined' && pageContext.bookingStatusId == 'fscx2_0_userBookingUnconfirmed') { pageContext.bookingStatuses.push({ 'label': 'Unconfirmed', 'value': 'fscx2_0_userBookingUnconfirmed' }, { 'label': 'Confirmed', 'value': 'fscx2_0_userBookingConfirmed' }); } } if (Array.isArray(pageContext.zoneData)) { pageContext.dynamicComponent = pageContext.zoneData[0].dynamicComponent; }}"},{"subTitle":"@lang.['bdttpetaahtritptt','Before dispatching the task, please ensure that the Appraiser/Analyst has the right inventory to perform this task.']","name":"confirmInventory","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c23','Close']"}],"type":"openModal","title":"@lang.['utdt','Unable to Dispatch Task']"},{"subTitle":"@lang.['r','Records']","name":"serviceWindowOverlay","type":"openOverlayView","title":"@lang.['navSW','Service Window']","pageDef":[{"id":"weeklyScheduleDatagrid","type":"dataGrid","jsonDef":{"pageContextConfig":{"enable":true,"isPaginationReqd":false,"tableData":{"source":"@pageContext.calendarData"}},"rowTextLength":30,"isSelectable":false,"tableHeader":[{"name":"@lang.['d12','Day']","options":{"sortable":true,"showLabel":true},"key":"weeklyScheduleDay"},{"name":"@lang.['s','Status']","options":{"showLabel":true},"key":"serviceWindowWeeklyScheduleIsOpen"},{"name":"@lang.['t11','Timings']","options":{"flex":2,"dateRangeType":"absoluteTime","sortable":true,"type":"dateRange","showLabel":true},"key":"weeklyScheduleTimings"},{"name":"@lang.['h','Hours']","options":{"sortable":true,"showLabel":true},"key":"weeklyScheduleTotalHours"}]}}]},{"endPoint":"process/start","name":"fetchPartsOnDispatch","outputVarMap":{"data":"@pageContext.requiredParts"},"type":"api","actionDef":{"data":[{"processId":"fetchPartsRequiredForTaskWF","contextVar":{"workOrderTaskAssignedToUserId":"@pageContext.workOrderTaskAssignedToUserId","workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"}}]}},{"name":"fetchEntityConfig","outputVarMap":{"data":"@pageContext.checkInventoryConfigData"},"type":"query","actionDef":{"filter":"{$configKey} = 'checkInventoryBeforeTaskDispatch'","models":["EntityConfig"],"columns":{"configKey":"EntityConfig.configKey","valueType":"EntityConfig.valueType","configScope":"EntityConfig.configScope","configValue":"EntityConfig.configValue"}}},{"falseStep":["@actions.dispatchTaskModal"],"trueStep":["@actions.confirmInventory"],"name":"checkEntityConfig","type":"decision","actionDef":"function (pageContext) {if (typeof pageContext.checkInventoryConfigData !== 'undefined' && pageContext.checkInventoryConfigData !== '' && Array.isArray(pageContext.checkInventoryConfigData) && pageContext.checkInventoryConfigData.length > 0 && pageContext.checkInventoryConfigData[0].configValue === 'true'){ return true; } else { return false; } }"},{"falseStep":["@actions.taskDependencyDecision"],"trueStep":["@actions.openModalOverrideTechnicianOnCrew"],"name":"decisionActionForTechnicianOnCrew","type":"decision","actionDef":"function(pageContext){if(typeof pageContext.techCrewData !== 'undefined' && pageContext.techCrewData.length > 0){return true;} else { return false;}}"},{"falseStep":["@actions.crewTaskDecision"],"trueStep":["@actions.openModalOverrideAppointmentWindow"],"name":"appointmentWindowDecision","type":"decision","actionDef":"function(pageContext) { if (typeof pageContext.workOrderTaskAppointmentBasedFlag !== 'undefined' && pageContext.workOrderTaskAppointmentBasedFlag !== '' && pageContext.workOrderTaskAppointmentBasedFlag === true) { if ((new Date(pageContext.workOrderTaskScheduledDate) < new Date(pageContext.workOrderTaskAppointmentWindowStartDate)) || (new Date(pageContext.workOrderTaskScheduledDate) > new Date(pageContext.workOrderTaskAppointmentWindowEndDate))) { return true; } else { return false; } } else { return false; } }"},{"falseStep":["@actions.crewTaskDecision"],"trueStep":["@actions.fireProcessEventUpsertTask","@actions.closePanel","@actions.clearPageContext","@actions.refreshDataGrid"],"name":"workOrderTaskStatusDecision","type":"decision","actionDef":"function(pageContext){return pageContext.workOrderTaskStatusId !== 'workOrderTaskScheduled';}"},{"falseStep":["@actions.checkWorkOrderTaskAssignedToUserId"],"trueStep":["@actions.crewStatusDecision"],"name":"crewTaskDecision","type":"decision","actionDef":"function(pageContext){ return pageContext.taskTypeCrewTask && pageContext.workOrderTaskStatusId === 'workOrderTaskDispatched';}"},{"falseStep":[],"trueStep":["@actions.setAssignee","@actions.fetchCrewLeadUserId","@actions.setCrewLeadId"],"name":"decisionActionCheckCrewTask","type":"decision","actionDef":"function(pageContext){return pageContext.taskTypeCrewTask}"},{"falseStep":["@actions.taskDependencyDecision"],"trueStep":["@actions.fetchTechnicianOnCrew","@actions.decisionActionForTechnicianOnCrew"],"name":"singleTechTaskDecision","type":"decision","actionDef":"function(pageContext){ return !pageContext.taskTypeCrewTask && typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '' && typeof pageContext.workOrderTaskDueDate !== 'undefined' && pageContext.workOrderTaskDueDate !== ''; }"},{"falseStep":["@actions.taskDependencyDecision"],"trueStep":["@actions.singleTechTaskDecision"],"name":"checkWorkOrderTaskAssignedToUserId","type":"decision","actionDef":"function(pageContext){ if (typeof pageContext.workOrderTaskAssignedToUserId !== 'undefined' && pageContext.workOrderTaskAssignedToUserId !== '') { return true; } else { return false; }}"},{"falseStep":["@actions.openModalCrewNotActive"],"trueStep":["@actions.taskDependencyDecision"],"name":"crewStatusDecision","type":"decision","actionDef":"function(pageContext){ return pageContext.crewStatusId === 'crewActive'}"},{"subTitle":"@lang.['ttcbdstacinagttcmtatcortt','This task cannot be dispatched since the assigned crew is not active. Go to the Crews module to activate this crew or reassign the task.']","name":"openModalCrewNotActive","options":[{"buttonType":"primary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c23','Close']"}],"type":"openModal","title":"@lang.['utdt','Unable to Dispatch Task']"},{"subTitle":"@lang.['taaaabtacambatotaysywtatttt','The assigned Appraiser / Analyst already belongs to a crew and may be assigned to other tasks. Are you sure you want to assign this task to them?']","name":"openModalOverrideTechnicianOnCrew","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.taskDependencyDecision"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['aaoc','Appraiser / Analyst on Crew']"},{"name":"refreshPartsAndMaterialsGrid1","gridId":["partsAndMaterialsGrid1"],"type":"RefreshGridOnSidePanel"},{"endPoint":"process/start","name":"checkIfInventoryInstalled","outputVarMap":{"data":"@pageContext.isInventoryModelPresent"},"type":"api","actionDef":{"data":[{"processId":"checkIfInventoryModelPresentWF","contextVar":{"checkIfInventoryInstalled":"checkIfInventoryInstalled"}}]}},{"endPoint":"process/start","name":"fetchPartsData","outputVarMap":{"data":"@pageContext.requiredParts"},"type":"api","actionDef":{"data":[{"processId":"fetchPartsRequiredForTaskWF","contextVar":{"workOrderTaskId":"@pageContext.workOrderTaskId","workOrderId":"@pageContext.workOrderId"}}]}},{"name":"checkIfPartsDataPresent","type":"script","actionDef":"function (pageContext) {pageContext.isPartsDataPresent = false; if (typeof pageContext.requiredParts[0].outputVar.partsData != 'undefined' && Array.isArray(pageContext.requiredParts[0].outputVar.partsData) && pageContext.requiredParts[0].outputVar.partsData.length) { pageContext.isPartsDataPresent = true; }}"},{"subTitle":"@lang.['tssdatiootawdywtpwstt','The scheduled start date and time is outside of the appointment window. Do you want to proceed with scheduling this task?']","name":"openModalOverrideAppointmentWindow","options":[{"buttonType":"secondary","name":"no","actionOnClick":["@actions.closeModal"],"type":"button","title":"@lang.['c2','Cancel']"},{"buttonType":"primary","name":"yes","actionOnClick":["@actions.closeModal","@actions.crewTaskDecision"],"type":"button","title":"@lang.['c13','Continue']"}],"type":"openModal","title":"@lang.['vss','Verify Scheduled Start']"},{"name":"setLatLongData","type":"script","actionDef":"function(pageContext) { if (typeof pageContext.latitude !== 'undefined' && pageContext.latitude !== '' && typeof pageContext.longitude !== 'undefined' && pageContext.longitude !== '') { pageContext.location = pageContext.latitude + ' ' + pageContext.longitude; pageContext.timestamp = +Math.floor(Date.now() / 1000); } }"},{"endPoint":"process/start","name":"fetchTimeZoneData","outputVarMap":{"data":"@pageContext.fetchTimeZoneData"},"type":"api","actionDef":{"data":[{"inputVar":{"latitude":"@pageContext.latitude","location":"@pageContext.location","timestamp":"@pageContext.timestamp","longitude":"@pageContext.longitude"},"processId":"Q1OXR54SMG","contextVar":{"latitude":"@pageContext.latitude","location":"@pageContext.location","timestamp":"@pageContext.timestamp","longitude":"@pageContext.longitude"}}]}},{"name":"setCurrentTimeData","type":"script","actionDef":"function(pageContext) { var d = new Date(new Date(pageContext.workOrderTaskDueDate).getTime() - pageContext.siteTimezoneOffset * 60 * 1000); pageContext.workOrderTaskScheduledDate = d.getFullYear() + '-' + (parseInt(d.getMonth() + 1) < 10 ? '0' + parseInt(d.getMonth() + 1) : parseInt(d.getMonth() + 1)) + '-' + (d.getDate() < 10 ? '0' + d.getDate() : d.getDate()) + ' ' + (d.getHours() < 10 ? '0' + d.getHours() : d.getHours()) + ':' + (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()) + ':00.000'; }"},{"name":"setTimeStampDueDate","type":"script","actionDef":"function(pageContext) { if (typeof pageContext.workOrderTaskScheduledDate !== 'undefined' && pageContext.workOrderTaskScheduledDate !== '') { pageContext.dueDateTimestamp = parseInt((new Date(pageContext.workOrderTaskScheduledDate).getTime() / 1000).toFixed(0)); } }"},{"endPoint":"process/start","name":"fetchTZDueDate","outputVarMap":{"data":"@pageContext.fetchTZDueDate"},"type":"api","actionDef":{"data":[{"inputVar":{"latitude":"@pageContext.latitude","location":"@pageContext.location","timestamp":"@pageContext.dueDateTimestamp","longitude":"@pageContext.longitude"},"processId":"Q1OXR54SMG","contextVar":{"latitude":"@pageContext.latitude","location":"@pageContext.location","timestamp":"@pageContext.dueDateTimestamp","longitude":"@pageContext.longitude"}}]}},{"name":"setDueDateTz","type":"script","actionDef":"function(pageContext) { var mmaindte = pageContext.fetchTZDueDate[0].outputVar.currentSiteTime; var tz = pageContext.fetchTZDueDate[0].outputVar.timeZone; var a = mmaindte.slice(0, 11); var t = a.concat(tz.slice(1, 5)); var timeStart = new Date(mmaindte); var timeEnd = new Date(t); var difference = timeStart.getTime() - timeEnd.getTime(); var diff_result = new Date(difference); var c = JSON.stringify(diff_result); c.replace('T', ' ').replace('Z', ''); pageContext.workOrderTaskDueDate = (a.concat(c.slice(12, 24))); }"},{"name":"changeTztime","type":"script","actionDef":"function(pageContext) { function formatDate(date) { if (date) { var d = new Date(new Date(date).getTime() - pageContext.siteTimezoneOffset * 60 * 1000); return (d.getDate() < 10 ? '0' + d.getDate() : d.getDate()) + '-' + (parseInt(d.getMonth() + 1) < 10 ? '0' + parseInt(d.getMonth() + 1) : parseInt(d.getMonth() + 1)) + '-' + d.getFullYear() + ' ' + (d.getHours() < 10 ? '0' + d.getHours() : d.getHours()) + ':' + (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()) + ':00.000'; d = new Date(new Date(d + ' UTC').toLocaleString('en-us', { timeZone: pageContext.siteTimeZone })), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(); var hours = d.getHours().toString(); var minutes = d.getMinutes().toString(); var seconds = d.getSeconds().toString(); var timeZone = new Date().toString().split(' ')[5]; if (minutes.length < 2) minutes = '0' + minutes; if (hours.length < 2) hours = '0' + hours; if (seconds.length < 2) seconds = '0' + seconds; time = hours + ':' + minutes + ':' + seconds; if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; date = ([day, month, year].join('-') + ' ' + time); } else { return '-'; } } pageContext.siteLocalTime = formatDate(pageContext.workOrderTaskScheduledDate); }"},{"endPoint":"process/start","name":"updateCustomerContactDetails","outputVarMap":{"data":"@pageContext.updateCustomerContactDetails"},"type":"api","actionDef":{"data":[{"inputVar":{"contactEmail":"@pageContext.customerContactEmail","customerId":"@pageContext.customerId","contactPerson":"@pageContext.customerContactPerson","siteId":"@pageContext.siteId","contactPhone":"@pageContext.customerContactPhone"},"processId":"saveCustomerContactDetails","contextVar":{"contactEmail":"@pageContext.customerContactEmail","customerId":"@pageContext.customerId","contactPerson":"@pageContext.customerContactPerson","siteId":"@pageContext.siteId","contactPhone":"@pageContext.customerContactPhone"}}]}},{"endPoint":"process/start","name":"checkIfCustomerPortalInstalled","outputVarMap":{"data":"@pageContext.isCustomerPortalOrderDetailsModelPresent"},"type":"api","actionDef":{"data":[{"processId":"checkIfCustomerPortalOrderDetailsModelPresentWF","contextVar":{"checkIfCustomerPortalOrderDetailsModelPresentWF":"checkIfCustomerPortalOrderDetailsModelPresentWF"}}]}},{"name":"setUpsertData","type":"script","actionDef":"function (pageContext) { pageContext.customerPortalOrderDetails = []; if (pageContext.bookingStatus == 'Confirmed') { pageContext.customerPortalOrderDetails.push({ 'UID': pageContext.UID, 'statusId': 'fscx2_0_userBookingConfirmed' }); } else if (pageContext.bookingStatus == 'Unconfirmed') { pageContext.customerPortalOrderDetails.push({ 'UID': pageContext.UID, 'statusId': 'fscx2_0_userBookingUnconfirmed' }); }}"},{"endPoint":"process/start","name":"fscx2_0_loadDataDynamicallyForZonesWF","outputVarMap":{"data":"@pageContext.zoneData"},"type":"api","continueOnError":true,"actionDef":{"data":[{"inputVar":{},"processId":"fscx2_0_loadDataDynamicallyForZonesWF","apiResponseFormat":true,"contextVar":{"workOrderTaskId":"@pageContext.workOrderTaskId"}}]}},{"name":"changeAppointmentWindowTime","type":"script","continueOnError":true,"actionDef":"function(pageContext) { function formatDate(date) { if (date) { var d = new Date(new Date(date).getTime() - pageContext.siteTimezoneOffset * 60 * 1000); return (d.getDate() < 10 ? '0' + d.getDate() : d.getDate()) + '-' + (parseInt(d.getMonth() + 1) < 10 ? '0' + parseInt(d.getMonth() + 1) : parseInt(d.getMonth() + 1)) + '-' + d.getFullYear() + ' ' + (d.getHours() < 10 ? '0' + d.getHours() : d.getHours()) + ':' + (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()) + ':00.000'; d = new Date(new Date(d + ' UTC').toLocaleString('en-us', { timeZone: pageContext.siteTimeZone })), month = '' + (d.getMonth() + 1), day = '' + d.getDate(), year = d.getFullYear(); var hours = d.getHours().toString(); var minutes = d.getMinutes().toString(); var seconds = d.getSeconds().toString(); var timeZone = new Date().toString().split(' ')[5]; if (minutes.length < 2) minutes = '0' + minutes; if (hours.length < 2) hours = '0' + hours; if (seconds.length < 2) seconds = '0' + seconds; time = hours + ':' + minutes + ':' + seconds; if (month.length < 2) month = '0' + month; if (day.length < 2) day = '0' + day; date = ([day, month, year].join('-') + ' ' + time); } else { return '-'; } } pageContext.appointmentWindowStartDate = formatDate(pageContext.workOrderTaskAppointmentWindowStartDate); pageContext.appointmentWindowEndDate = formatDate(pageContext.workOrderTaskAppointmentWindowEndDate); }"},{"falseStep":["@actions.addAdditionalSingledayTask","@actions.setWorkOrderTaskDueDate","@actions.decisionActionCheckCrewTask","@actions.setWorkOrderTaskStatusAndEventTypeForDispatch","@actions.fetchTaskDependencyCheck","@actions.setDependencyCheck","@actions.appointmentWindowDecision"],"trueStep":["@actions.checkEntityConfig"],"name":"isPartDataPresent","type":"decision","actionDef":"function (pageContext) { var openDispatchModal = false; if (typeof pageContext.requiredParts[0].outputVar.partsData != 'undefined' && Array.isArray(pageContext.requiredParts[0].outputVar.partsData) && pageContext.requiredParts[0].outputVar.partsData.length) { var partsData = pageContext.requiredParts[0].outputVar.partsData; partsData.forEach(function(element) { if (element.inventoryQty < element.estimatedQty || element.inventoryQty === undefined || element.inventoryQty === '') { openDispatchModal = true; return; } }); return openDispatchModal; } }"}]}