{"checkIfTimezoneAndDatePresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getTaskData"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"checkIfTimezoneAndDatePresent","description":"checkIfTimezoneAndDatePresent","processRule":"typeof contextVar.scheduledDate !== 'undefined' && contextVar.scheduledDate !== '' ","nodeType":"DECISION"},"processCapacityData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processCapacityData","description":"processCapacityData","processRule":"{ contextVar.capacity = 0; if (contextVar.appendTechnicianLeaveData.length > 0) { contextVar.appendTechnicianLeaveData.forEach(function(value) { var obj = { 'workforceUserId': value.workforceUserId, 'endTime': value.endTime, 'startTime': value.startTime }; contextVar.overlappingTaskData.push(obj); }) } if (contextVar.appendTechnicianHolidayData.length > 0) { contextVar.appendTechnicianHolidayData.forEach(function(element) { var obj = { 'workforceUserId': element.workforceUserId, 'endTime': element.holidayEndDate, 'startTime': element.holidayDate }; contextVar.overlappingTaskData.push(obj); }) } var addMinutes = function(date) { return (new Date(date.getTime() + (contextVar.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; contextVar.appointmentWindowsData = contextVar.appointmentWindowsData.map((window) => { window.startTimeInUTC = addMinutes(new Date(contextVar.scheduledDate + ' ' + window.startTime)); window.endTimeInUTC = addMinutes(new Date(contextVar.scheduledDate + ' ' + window.endTime)); window.availableSlots = window.maxTasks; return window; }); var nextIndex = 0; for (var j = 0; j < contextVar.overlappingTaskData.length; j++) { for (var i = nextIndex; i < contextVar.appointmentWindowsData.length; i++) { if ((contextVar.overlappingTaskData[j].startDate >= contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].startDate < contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.overlappingTaskData[j].endDate > contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.appointmentWindowsData[i].startTimeInUTC >= contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].startTimeInUTC < contextVar.overlappingTaskData[j].endDate) || (contextVar.appointmentWindowsData[i].endTimeInUTC > contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j].endDate)) { contextVar.appointmentWindowsData[i].availableSlots--; } if (j !== contextVar.overlappingTaskData.length - 1 && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j + 1].startDate) { nextIndex = i; } if (contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].startTimeInUTC) break; } } contextVar.count = contextVar.appointmentWindowsData.length; contextVar.day = new Date(contextVar.scheduledDate).getDay(); if (contextVar.day == 6 || contextVar.day == 0) { contextVar.appointmentWindowsData.forEach(function(value) { value.availableSlots = 0 }) }; if (contextVar.techData !== '' && typeof contextVar.techData !== 'undefined') { contextVar.techCap = contextVar.techData[0].acCapacity; } if (contextVar.appriaserCapacityData !== '' && typeof contextVar.appriaserCapacityData !== 'undefined') { contextVar.appCap = contextVar.appriaserCapacityData[0].acCapacity; } if (contextVar.techCap < contextVar.appCap) { contextVar.finCap = contextVar.techCap; } if (contextVar.techCap > contextVar.appCap) { contextVar.finCap = contextVar.appCap; } contextVar.appointmentWindowsData.forEach(function(value) { if (contextVar.finCap == 0) { value.availableSlots = 0; } else if (contextVar.finCap == contextVar.capacity) { value.availableSlots = 0; } else { contextVar.capacity = contextVar.capacity + 1; } }) }","nodeType":"PROCESS","jsEngine":"es6"},"appendTasks":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTasksPresent"}],"contextChangePermitted":true,"name":"appendTasks","description":"appendTasks","processRule":"if (Array.isArray(contextVar.appendOverlappingTaskData)) { contextVar.overlappingTaskData = contextVar.overlappingTaskData.concat(contextVar.appendOverlappingTaskData) } contextVar.overlappingTasksBatchNumber++;","nodeType":"PROCESS"},"getTechniciansLeaves":{"models":["workforceLeave","workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTechCapacity"}],"columns":{"workforceLeaveEndDate":"workforceLeave.endDate","startTime":"workforceLeave.startDate","endTime":"workforceLeave.endDate","workforceUserId":"workforceLeave.workforceUserId","workforceLeaveStartDate":"workforceLeave.startDate"},"orderBy":"workforceLeaveStartDate ASC","description":"getTechniciansLeaves","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","assignedToUserId":"userList","endDate":"endDate","scheduledDate":"startTime","startDate":"startDate"},"nodeType":"QUERY","filter":"({$workforceUserId} = {@acPrimaryAppraiserId} || {$workforce.userId} = {@userList}) AND (({$workforceLeaveStartDate} BETWEEN {@startDate} AND {@endDate}) OR ({$workforceLeaveEndDate} BETWEEN {@startDate} AND {@endDate}) OR ({@startDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}) OR ({@endDate} BETWEEN {$workforceLeaveStartDate} AND {$workforceLeaveEndDate}))","name":"getTechniciansLeaves","links":{"workforce":"workforceLeave"},"outputVarMap":{"data":"appendTechnicianLeaveData","count":"leavesCount","batchSize":"techLeavesbatchSize","batchNumber":"techLeavesBatchNumber"},"batchSize":"batchSize","getCount":true},"findNumberOfBatches":{"connectors":[{"exitPortType":"NextStep","nodeId":"areMoreTasksPresent"}],"contextChangePermitted":true,"name":"findNumberOfBatches","description":"findNumberOfBatches","processRule":"{contextVar.noOfBatches = Math.ceil(contextVar.overlappingTasksCount / contextVar.customBatchSize);contextVar.overlappingTasksBatchNumber++;}","id":"findNumberOfBatches","nodeType":"PROCESS"},"areMoreTasksPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"fetchMoreOverlappingTaskData"},{"exitPortType":"FalseStep","nodeId":"fetchAppointmentWindows"}],"name":"areMoreTasksPresent","description":"areMoreTasksPresent","processRule":"contextVar.noOfBatches >= 2 && contextVar.noOfBatches >= contextVar.overlappingTasksBatchNumber","nodeType":"DECISION"},"getTaskData":{"filter":"{$id} = {$workOrderId} && {$taskId} = {$jobId} && {$uid} = {@uid}","models":["workOrderTask","workOrder","site","customerPortalOrderDetails"],"connectors":[{"exitPortType":"NextStep","nodeId":"processTaskData"}],"columns":{"acPrimaryAppraiserId":"workOrder.acPrimaryAppraiserId","assignedToUserId":"workOrderTask.assignedToUserId","jobId":"customerPortalOrderDetails.jobId","uid":"customerPortalOrderDetails.UID","timezoneOffset":"site.timezoneOffset","workOrderId":"workOrderTask.workOrderId","id":"workOrder.id","siteTimeZone":"site.acTimeZone","taskId":"workOrderTask.id"},"name":"getTaskData","description":"getTaskData","distinct":true,"outerJoinOnModel":"workOrderTask","inputVarMap":{"uid":"uid","techId":"techId"},"outputVarMap":{"data":"taskData"},"nodeType":"QUERY","getCount":true},"processTaskData":{"connectors":[{"exitPortType":"NextStep","nodeId":"decisionCheckAssign"}],"contextChangePermitted":true,"name":"processTaskData","description":"processTaskData","processRule":"{ if (contextVar.taskData !== '' && typeof contextVar.taskData !== 'undefined' && contextVar.taskData.length > 0) { contextVar.workOrderId = contextVar.taskData[0].workOrderId; contextVar.acPrimaryAppraiserId = contextVar.taskData[0].acPrimaryAppraiserId; contextVar.customerId = contextVar.taskData[0].customerId; contextVar.timezoneOffset = contextVar.taskData[0].timezoneOffset; contextVar.timeZone=contextVar.taskData[0].siteTimeZone; if (contextVar.taskData[0].assignedToUserId !== '' && typeof contextVar.taskData[0].assignedToUserId !== 'undefined') { contextVar.assignedToUserId = contextVar.taskData[0].assignedToUserId; } } var addMinutes = function(date) { return (new Date(date.getTime() + (contextVar.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; contextVar.startDate = contextVar.scheduledDate + ' 00:00:00.000'; contextVar.startDate = addMinutes(new Date(contextVar.startDate)); contextVar.endDate = contextVar.scheduledDate + ' 23:59:00.000'; contextVar.endDate = addMinutes(new Date(contextVar.endDate)); }","nodeType":"PROCESS"},"getCalendarHolidays":{"models":["workforce","calendar","calendarHoliday","holiday"],"connectors":[{"exitPortType":"NextStep","nodeId":"getTechniciansLeaves"}],"columns":{"holidayEndDate":"CONCAT(DATE_ADD({$holiday.date}, INTERVAL CAST(1439 AS UNSIGNED) MINUTE), '.000')","workforceUserId":"workforce.userId","holidayDate":"holiday.date"},"description":"getCalendarHolidays","distinct":true,"orderBy":"holidayDate ASC","inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","assignedToUserId":"userList","scheduledDate":"startTime"},"nodeType":"QUERY","filter":"({$workforceUserId} = {@acPrimaryAppraiserId} || {$workforceUserId} = {@userList}) && {$holidayDate} > {@startTime}","name":"getCalendarHolidays","links":{"calendar":"calendarHoliday","workforce":"calendar","calendarHoliday":"holiday"},"outputVarMap":{"data":"appendTechnicianHolidayData","count":"holidaysCount","batchSize":"techHolidaysbatchSize","batchNumber":"techHolidaysBatchNumber"},"batchSize":"batchSize","getCount":true},"fetchAppointmentWindowsData":{"models":["appointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"processCapacityData"}],"columns":{"maxTasks":"appointmentWindow.maxTasks","startTime":"appointmentWindow.startTime","id":"appointmentWindow.id","endTime":"appointmentWindow.endTime"},"name":"fetchAppointmentWindowsData","description":"Fetch Appointment Windows","orderBy":"startTime ASC","inputVarMap":{"customBatchSize":"batchSize"},"outputVarMap":{"data":"appointmentWindowsData"},"batchSize":"batchSize","nodeType":"QUERY"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"checkIfTimezoneAndDatePresent"}],"name":"start","description":"Start","nodeType":"START"},"getTechCapacity":{"filter":"{$userId} = {@techId} ","models":["workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"getAppraiserCapacity"}],"columns":{"acCapacity":"workforce.acCapacity","userId":"workforce.userId"},"name":"getTechCapacity","description":"getTechCapacity","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","assignedToUserId":"techId"},"outputVarMap":{"data":"techData"},"nodeType":"QUERY","getCount":true},"fetchOverlappingTaskData":{"models":["workOrderTask","workOrderTaskAppointmentWindow","taskScheduleBreakdown"],"connectors":[{"exitPortType":"NextStep","nodeId":"findNumberOfBatches"}],"columns":{"endDate":"IF({$taskScheduleBreakdown.endDate} IS NOT NULL,{$taskScheduleBreakdown.endDate}, {$workOrderTaskAppointmentWindow.endDate})","workOrderTaskId":"workOrderTask.id","workOrderTaskWorkOrderId":"workOrderTask.workOrderId","startDate":"IF({$taskScheduleBreakdown.startDate} IS NOT NULL,{$taskScheduleBreakdown.startDate}, {$workOrderTaskAppointmentWindow.startDate})"},"orderBy":"startDate ASC","outerJoinOnModel":"workOrderTask","description":"Fetch Task Details","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","overlappingTaskStatuses":"overlappingTaskStatuses","endDate":"endDate","startDate":"startDate"},"nodeType":"QUERY","filter":"((({$taskScheduleBreakdown.startDate} >= {@startDate} AND {$taskScheduleBreakdown.startDate} <= {@endDate}) OR ({$taskScheduleBreakdown.endDate} >= {@startDate} AND {$taskScheduleBreakdown.endDate} <= {@endDate}) OR ({@startDate} >= {$taskScheduleBreakdown.startDate} AND {@startDate} <= {$taskScheduleBreakdown.endDate}) OR ({@endDate} >= {$taskScheduleBreakdown.startDate} AND {@endDate} <={$taskScheduleBreakdown.endDate})) OR (({$workOrderTaskAppointmentWindow.startDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.startDate} <= {@endDate}) OR ({$workOrderTaskAppointmentWindow.endDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.endDate} <= {@endDate}) OR ({@startDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@startDate} <= {$workOrderTaskAppointmentWindow.endDate}) OR ({@endDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@endDate} <={$workOrderTaskAppointmentWindow.endDate})) ) AND {$workOrderTask.statusId} IN {@overlappingTaskStatuses}","name":"fetchOverlappingTaskData","links":{"workOrderTask":"workOrderTaskAppointmentWindow","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"overlappingTaskData","count":"overlappingTasksCount","batchNumber":"overlappingTasksBatchNumber"},"batchSize":"batchSize","getCount":true},"getAppraiserCapacity":{"filter":"{$userId} = {@acPrimaryAppraiserId} ","models":["workforce"],"connectors":[{"exitPortType":"NextStep","nodeId":"fetchAppointmentWindows"}],"columns":{"acCapacity":"workforce.acCapacity","userId":"workforce.userId"},"name":"getAppraiserCapacity","description":"getAppraiserCapacity","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId"},"outputVarMap":{"data":"appriaserCapacityData"},"nodeType":"QUERY","getCount":true},"workflowNodes":["start","checkIfTimezoneAndDatePresent","processTimezoneData","getTaskData","processTaskData","decisionCheckAssign","processCapacityData","getTechniciansLeaves","getTechCapacity","getAppraiserCapacity","getCalendarHolidays","getCalendarData","fetchOverlappingTaskData","findNumberOfBatches","areMoreTasksPresent","appendTasks","fetchMoreOverlappingTaskData","fetchAppointmentWindows","fetchAppointmentWindowsData","processData","end"],"processData":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"contextChangePermitted":true,"name":"processData","description":"processData","processRule":"{ contextVar.appointmentWindowsData.map((data) => { data.startTimeInUTC = contextVar.scheduledDate + ' ' + data.startTime; data.endTimeInUTC = contextVar.scheduledDate + ' ' + data.endTime; data.availableSlots = data.maxTasks; }); var nextIndex = 0; for (var j = 0; j < contextVar.overlappingTaskData.length; j++) { for (var i = nextIndex; i < contextVar.appointmentWindowsData.length; i++) { if ((contextVar.overlappingTaskData[j].startDate >= contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].startDate < contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.overlappingTaskData[j].endDate > contextVar.appointmentWindowsData[i].startTimeInUTC && contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].endTimeInUTC) || (contextVar.appointmentWindowsData[i].startTimeInUTC >= contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].startTimeInUTC < contextVar.overlappingTaskData[j].endDate) || (contextVar.appointmentWindowsData[i].endTimeInUTC > contextVar.overlappingTaskData[j].startDate && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j].endDate)) { contextVar.appointmentWindowsData[i].availableSlots--; } if (j !== contextVar.overlappingTaskData.length - 1 && contextVar.appointmentWindowsData[i].endTimeInUTC <= contextVar.overlappingTaskData[j + 1].startDate) { nextIndex = i; } if (contextVar.overlappingTaskData[j].endDate <= contextVar.appointmentWindowsData[i].startTimeInUTC) break; } } contextVar.count = contextVar.appointmentWindowsData.length; contextVar.day = new Date(contextVar.scheduledDate).getDay(); if (contextVar.day == 6 || contextVar.day == 0) { contextVar.appointmentWindowsData.forEach(function(value) { value.availableSlots = 0 }) } }","nodeType":"PROCESS","jsEngine":"es6"},"workflowContext":{"customBatchSize":1000,"overlappingTaskStatuses":["workOrderTaskOpen","workOrderTaskScheduled","workOrderTaskDispatched","workOrderTaskIncident","workOrderTaskInProgress","workOrderTaskAutoScheduling","workOrderTaskInTransit"],"appointmentWindowsData":[],"count":0},"processTimezoneData":{"connectors":[{"exitPortType":"NextStep","nodeId":"getTaskData"}],"contextChangePermitted":true,"name":"processTimezoneData","description":"processTimezoneData","processRule":"{ var addMinutes = function (date) { return (new Date(date.getTime() + (contextVar.timezoneOffset * 60000))).toISOString().replace('T', ' ').replace('Z', ''); }; contextVar.startDate = contextVar.scheduledDate + ' 00:00:00.000'; contextVar.startDate = addMinutes(new Date(contextVar.startDate)); contextVar.endDate=contextVar.scheduledDate + ' 23:59:00.000'; contextVar.endDate = addMinutes(new Date(contextVar.endDate)); }","nodeType":"PROCESS"},"decisionCheckAssign":{"connectors":[{"exitPortType":"TrueStep","nodeId":"getCalendarData"},{"exitPortType":"FalseStep","nodeId":"fetchOverlappingTaskData"}],"name":"decisionCheckAssign","description":"decisionCheckAssign","processRule":"{typeof contextVar.assignedToUserId !== 'undefined' && contextVar.assignedToUserId !== ''}","nodeType":"DECISION"},"getCalendarData":{"filter":"(( {$startTime} > {@startTime} && {$endTime} < {@endTime}  )) && ({$userId} = {@userList} || {$userId} = {@acPrimaryAppraiserId})","models":["techCalendarV2"],"connectors":[{"exitPortType":"NextStep","nodeId":"getCalendarHolidays"}],"columns":{"endDate":"techCalendarV2.endTime","workOrderTaskId":"techCalendarV2.workOrderTaskId","id":"techCalendarV2.id","userId":"techCalendarV2.userId","startDate":"techCalendarV2.startTime"},"name":"getCalendarData","description":"getCalendarData","distinct":true,"inputVarMap":{"acPrimaryAppraiserId":"acPrimaryAppraiserId","assignedToUserId":"userList","endDate":"endTime","startDate":"startTime"},"outputVarMap":{"data":"overlappingTaskData"},"nodeType":"QUERY","getCount":true},"fetchAppointmentWindows":{"filter":"{$appointmentWindow.accTimeZone}={@timeZone}","models":["appointmentWindow"],"connectors":[{"exitPortType":"NextStep","nodeId":"processData"}],"columns":{"maxTasks":"appointmentWindow.maxTasks","startTime":"appointmentWindow.startTime","id":"appointmentWindow.id","endTime":"appointmentWindow.endTime"},"name":"fetchAppointmentWindows","description":"Fetch Appointment Windows","orderBy":"startTime ASC","inputVarMap":{"customBatchSize":"batchSize","timeZone":"timeZone"},"outputVarMap":{"data":"appointmentWindowsData"},"batchSize":"batchSize","nodeType":"QUERY"},"end":{"name":"End","description":"End","inputVarMap":{"appointmentWindowsData":"appointmentWindowsData","count":"count","overlappingTaskData":"overlappingTaskData"},"outputVarMap":{"appointmentWindowsData":"appointmentWindowsData","count":"count","overlappingTaskData":"overlappingTaskData"},"nodeType":"END"},"fetchMoreOverlappingTaskData":{"models":["workOrderTask","workOrderTaskAppointmentWindow","taskScheduleBreakdown"],"connectors":[{"exitPortType":"NextStep","nodeId":"appendTasks"}],"columns":{"endDate":"IF({$taskScheduleBreakdown.endDate} IS NOT NULL,{$taskScheduleBreakdown.endDate}, {$workOrderTaskAppointmentWindow.endDate})","workOrderTaskId":"workOrderTask.id","workOrderTaskWorkOrderId":"workOrderTask.workOrderId","startDate":"IF({$taskScheduleBreakdown.startDate} IS NOT NULL,{$taskScheduleBreakdown.startDate}, {$workOrderTaskAppointmentWindow.startDate})"},"orderBy":"startDate ASC","outerJoinOnModel":"workOrderTask","description":"Fetch Task Details","distinct":true,"inputVarMap":{"customBatchSize":"batchSize","overlappingTaskStatuses":"overlappingTaskStatuses","endDate":"endDate","overlappingTasksBatchNumber":"batchNumber","startDate":"startDate"},"nodeType":"QUERY","filter":"((({$taskScheduleBreakdown.startDate} >= {@startDate} AND {$taskScheduleBreakdown.startDate} <= {@endDate}) OR ({$taskScheduleBreakdown.endDate} >= {@startDate} AND {$taskScheduleBreakdown.endDate} <= {@endDate}) OR ({@startDate} >= {$taskScheduleBreakdown.startDate} AND {@startDate} <= {$taskScheduleBreakdown.endDate}) OR ({@endDate} >= {$taskScheduleBreakdown.startDate} AND {@endDate} <={$taskScheduleBreakdown.endDate})) OR (({$workOrderTaskAppointmentWindow.startDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.startDate} <= {@endDate}) OR ({$workOrderTaskAppointmentWindow.endDate} >= {@startDate} AND {$workOrderTaskAppointmentWindow.endDate} <= {@endDate}) OR ({@startDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@startDate} <= {$workOrderTaskAppointmentWindow.endDate}) OR ({@endDate} >= {$workOrderTaskAppointmentWindow.startDate} AND {@endDate} <={$workOrderTaskAppointmentWindow.endDate})) ) AND {$workOrderTask.statusId} IN {@overlappingTaskStatuses}","name":"fetchMoreOverlappingTaskData","links":{"workOrderTask":"workOrderTaskAppointmentWindow","taskScheduleBreakdown":"workOrderTask"},"outputVarMap":{"data":"appendOverlappingTaskData"},"batchSize":"batchSize","getCount":true,"batchNumber":"batchNumber"}}