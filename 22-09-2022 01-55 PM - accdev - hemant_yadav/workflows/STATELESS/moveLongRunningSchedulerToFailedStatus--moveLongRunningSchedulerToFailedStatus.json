{"isTimeDifferenceMoreThanThree":{"connectors":[{"exitPortType":"TrueStep","nodeId":"upsertIntoSchedulerLog"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isTimeDifferenceMoreThanThree","description":"isTimeDifferenceMoreThanThree","processRule":"contextVar.timeDifference>=3","nodeType":"DECISION"},"start":{"connectors":[{"exitPortType":"NextStep","nodeId":"fetchInProgressScheduler"}],"name":"start","description":"Start","nodeType":"START"},"upsertIntoSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"end"}],"processId":"schedulerLogModelWF","name":"upsertIntoSchedulerLog","description":"upsertIntoSchedulerLog","inputVarMap":{"schedulerLog":"schedulerLog"},"outputVarMap":{},"nodeType":"WORKFLOW"},"end":{"name":"End","description":"end","inputVarMap":{},"outputVarMap":{},"nodeType":"END"},"fetchInProgressScheduler":{"filter":"{$schedulerLog.status}='schedulerLogInProgress'","models":["schedulerLog"],"connectors":[{"exitPortType":"NextStep","nodeId":"isInProgressSchedulerPresent"}],"columns":{"result":"IF({$schedulerLog.result} IS NULL , '[]',{$schedulerLog.result})","unassignedJobs":"IF({$schedulerLog.unassignedJobs} IS NULL , '[]',{$schedulerLog.unassignedJobs})","startTime":"schedulerLog.startTime","id":"schedulerLog.id","message":"IF({$schedulerLog.id} IS NOT NULL,'Failed by timer event due to incomplete scheduler process','-')","status":"IF({$schedulerLog.id} IS NOT NULL,'schedulerLogFailed','-')"},"name":"fetchInProgressScheduler","description":"fetchInProgressScheduler","inputVarMap":{},"outputVarMap":{"data":"schedulerLog"},"nodeType":"QUERY"},"isInProgressSchedulerPresent":{"connectors":[{"exitPortType":"TrueStep","nodeId":"processDataForSchedulerLog"},{"exitPortType":"FalseStep","nodeId":"end"}],"name":"isInProgressSchedulerPresent","description":"isInProgressSchedulerPresent","processRule":"typeof contextVar.schedulerLog!=='undefined' && contextVar.schedulerLog.length>0","nodeType":"DECISION"},"processDataForSchedulerLog":{"connectors":[{"exitPortType":"NextStep","nodeId":"isTimeDifferenceMoreThanThree"}],"contextChangePermitted":true,"name":"processDataForSchedulerLog ","description":"processDataForSchedulerLog","processRule":"{ contextVar.timeDifference = (new Date()- new Date(contextVar.schedulerLog[0].startTime))/3600000; contextVar.schedulerLog[0].endTime = new Date().toISOString().replace('T', ' ').replace('Z',''); }","nodeType":"PROCESS"},"workflowNodes":["start","fetchInProgressScheduler","isInProgressSchedulerPresent","processDataForSchedulerLog","isTimeDifferenceMoreThanThree","upsertIntoSchedulerLog","end"]}